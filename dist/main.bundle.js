(()=>{"use strict";var n={147:(n,e,r)=>{r.d(e,{Z:()=>c});var t=r(537),o=r.n(t),i=r(645),a=r.n(i)()(o());a.push([n.id,"#popup-frame{background-color:rgba(0,0,0,.62);top:0;left:0;right:0;height:100vh}#popup-frame #popup-inner{max-height:80vh;background-color:#fff;color:#000;overflow-y:scroll}#popup-frame #popup-close{z-index:10;top:5px;right:8px}#popup-frame ul{padding:0}#popup-frame li{list-style:none;white-space:nowrap}#popup-frame form>*{margin-bottom:.5rem}#popup-frame h2 span{font-size:1rem}*{margin:0%;padding:0%}.cursor-pointer{cursor:pointer !important}li{white-space:nowrap}footer{padding:5vh 1% 0% 1%;background-color:#2e1223;color:#f09e41;font-weight:600}button{border:none;background-color:inherit}.footer1{width:100%;padding:5vh 5%;display:flex;justify-content:space-between;align-items:center}.footer1 button{background-color:#f09e41;color:#2e1223;border:none}.footer2{width:100%;text-align:center}.value-drop{color:red}.value-increase{color:green}ul{list-style:none;padding:0%}.homeTitle{color:#2e1223}.listContainer{display:flex;flex-direction:column}.coins{padding:0%}.coinImage{width:30px;height:30px;margin-right:10px}.listTitles{font-weight:700;background-color:#f09e41;color:#2e1223}.listTitles,.coin{padding:5px;border:1px solid #000;border-radius:25px;display:grid;grid-template-columns:1fr 2fr 1fr 1fr 2fr 1fr 3fr 1fr;margin:10px 0%}.listTitles li,.coin li{text-align:center}.coinIcons,.likeIcons{justify-self:start}.buyButton{color:green;font-weight:600;margin-left:5px}.pagination{display:flex;justify-content:space-around}.pagination ul{display:flex}.cryptoCounter{padding:5px;align-self:flex-end;margin-right:30px}.page,.cryptoCounter{display:flex;justify-content:center;align-items:center;font-weight:600;color:#f09e41;background-color:#2e1223;border-radius:50%;margin:10px;cursor:pointer}.page{padding:1px 8px}.selectedPage{opacity:.5}.fa-heart{color:#bababe}.liked{color:red}.likeBtn{display:flex;justify-content:space-between;align-items:center}","",{version:3,sources:["webpack://./src/_popup.scss","webpack://./src/style.scss"],names:[],mappings:"AAAA,aACE,gCAAA,CACA,KAAA,CACA,MAAA,CACA,OAAA,CACA,YAAA,CAEA,0BACE,eAAA,CACA,qBAAA,CACA,UAAA,CACA,iBAAA,CAGF,0BACE,UAAA,CACA,OAAA,CACA,SAAA,CAGF,gBACE,SAAA,CAGF,gBACE,eAAA,CACA,kBAAA,CAIA,oBACE,mBAAA,CAKF,qBACE,cAAA,CCnCN,EACE,SAAA,CACA,UAAA,CAGF,gBACE,yBAAA,CAGF,GACE,kBAAA,CAGF,OACE,oBAAA,CACA,wBAAA,CACA,aAAA,CACA,eAAA,CAGF,OACE,WAAA,CACA,wBAAA,CAGF,SACE,UAAA,CACA,cAAA,CACA,YAAA,CACA,6BAAA,CACA,kBAAA,CAGF,gBACE,wBAAA,CACA,aAAA,CACA,WAAA,CAGF,SACE,UAAA,CACA,iBAAA,CAGF,YACE,SAAA,CAGF,gBACE,WAAA,CAGF,GACE,eAAA,CACA,UAAA,CAGF,WACE,aAAA,CAGF,eACE,YAAA,CACA,qBAAA,CAGF,OACE,UAAA,CAGF,WACE,UAAA,CACA,WAAA,CACA,iBAAA,CAGF,YACE,eAAA,CACA,wBAAA,CACA,aAAA,CAGF,kBAEE,WAAA,CACA,qBAAA,CACA,kBAAA,CACA,YAAA,CACA,qDAAA,CACA,cAAA,CAGF,wBAEE,iBAAA,CAGF,sBAEE,kBAAA,CAGF,WACE,WAAA,CACA,eAAA,CACA,eAAA,CAGF,YACE,YAAA,CACA,4BAAA,CAGF,eACE,YAAA,CAGF,eACE,WAAA,CACA,mBAAA,CACA,iBAAA,CAGF,qBAEE,YAAA,CACA,sBAAA,CACA,kBAAA,CACA,eAAA,CAGA,aAAA,CACA,wBAAA,CACA,iBAAA,CACA,WAAA,CACA,cAAA,CAGF,MACE,eAAA,CAGF,cACE,UAAA,CAGF,UACE,aAAA,CAGF,OACE,SAAA,CAGF,SACE,YAAA,CACA,6BAAA,CACA,kBAAA",sourcesContent:["#popup-frame {\r\n  background-color: rgb(0 0 0 / 62%);\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  height: 100vh;\r\n\r\n  #popup-inner {\r\n    max-height: 80vh;\r\n    background-color: white;\r\n    color: black;\r\n    overflow-y: scroll;\r\n  }\r\n\r\n  #popup-close {\r\n    z-index: 10;\r\n    top: 5px;\r\n    right: 8px;\r\n  }\r\n\r\n  ul {\r\n    padding: 0;\r\n  }\r\n\r\n  li {\r\n    list-style: none;\r\n    white-space: nowrap;\r\n  }\r\n\r\n  form {\r\n    > * {\r\n      margin-bottom: 0.5rem;\r\n    }\r\n  }\r\n\r\n  h2 {\r\n    span {\r\n      font-size: 1rem;\r\n    }\r\n  }\r\n}\r\n",'@import "popup";\r\n\r\n* {\r\n  margin: 0%;\r\n  padding: 0%;\r\n}\r\n\r\n.cursor-pointer {\r\n  cursor: pointer !important;\r\n}\r\n\r\nli {\r\n  white-space: nowrap;\r\n}\r\n\r\nfooter {\r\n  padding: 5vh 1% 0% 1%;\r\n  background-color: #2e1223;\r\n  color: #f09e41;\r\n  font-weight: 600;\r\n}\r\n\r\nbutton {\r\n  border: none;\r\n  background-color: inherit;\r\n}\r\n\r\n.footer1 {\r\n  width: 100%;\r\n  padding: 5vh 5%;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.footer1 button {\r\n  background-color: #f09e41;\r\n  color: #2e1223;\r\n  border: none;\r\n}\r\n\r\n.footer2 {\r\n  width: 100%;\r\n  text-align: center;\r\n}\r\n\r\n.value-drop {\r\n  color: red;\r\n}\r\n\r\n.value-increase {\r\n  color: green;\r\n}\r\n\r\nul {\r\n  list-style: none;\r\n  padding: 0%;\r\n}\r\n\r\n.homeTitle {\r\n  color: #2e1223;\r\n}\r\n\r\n.listContainer {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.coins {\r\n  padding: 0%;\r\n}\r\n\r\n.coinImage {\r\n  width: 30px;\r\n  height: 30px;\r\n  margin-right: 10px;\r\n}\r\n\r\n.listTitles {\r\n  font-weight: 700;\r\n  background-color: #f09e41;\r\n  color: #2e1223;\r\n}\r\n\r\n.listTitles,\r\n.coin {\r\n  padding: 5px;\r\n  border: 1px solid black;\r\n  border-radius: 25px;\r\n  display: grid;\r\n  grid-template-columns: 1fr 2fr 1fr 1fr 2fr 1fr 3fr 1fr;\r\n  margin: 10px 0%;\r\n}\r\n\r\n.listTitles li,\r\n.coin li {\r\n  text-align: center;\r\n}\r\n\r\n.coinIcons,\r\n.likeIcons {\r\n  justify-self: start;\r\n}\r\n\r\n.buyButton {\r\n  color: green;\r\n  font-weight: 600;\r\n  margin-left: 5px;\r\n}\r\n\r\n.pagination {\r\n  display: flex;\r\n  justify-content: space-around;\r\n}\r\n\r\n.pagination ul {\r\n  display: flex;\r\n}\r\n\r\n.cryptoCounter {\r\n  padding: 5px;\r\n  align-self: flex-end;\r\n  margin-right: 30px;\r\n}\r\n\r\n.page,\r\n.cryptoCounter {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-weight: 600;\r\n  // width: 20px;\r\n  // height: 20px;\r\n  color: #f09e41;\r\n  background-color: #2e1223;\r\n  border-radius: 50%;\r\n  margin: 10px;\r\n  cursor: pointer;\r\n}\r\n\r\n.page {\r\n  padding: 1px 8px;\r\n}\r\n\r\n.selectedPage {\r\n  opacity: 0.5;\r\n}\r\n\r\n.fa-heart {\r\n  color: rgb(186, 186, 190);\r\n}\r\n\r\n.liked {\r\n  color: red;\r\n}\r\n\r\n.likeBtn {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n'],sourceRoot:""}]);const c=a},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var r="",t=void 0!==e[5];return e[4]&&(r+="@supports (".concat(e[4],") {")),e[2]&&(r+="@media ".concat(e[2]," {")),t&&(r+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),r+=n(e),t&&(r+="}"),e[2]&&(r+="}"),e[4]&&(r+="}"),r})).join("")},e.i=function(n,r,t,o,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(t)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(a[s]=!0)}for(var A=0;A<n.length;A++){var l=[].concat(n[A]);t&&a[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),r&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=r):l[2]=r),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),e.push(l))}},e}},537:n=>{n.exports=function(n){var e=n[1],r=n[3];if(!r)return e;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),i="/*# ".concat(o," */"),a=r.sources.map((function(n){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(n," */")}));return[e].concat(a).concat([i]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function r(n){for(var r=-1,t=0;t<e.length;t++)if(e[t].identifier===n){r=t;break}return r}function t(n,t){for(var i={},a=[],c=0;c<n.length;c++){var s=n[c],A=t.base?s[0]+t.base:s[0],l=i[A]||0,p="".concat(A," ").concat(l);i[A]=l+1;var d=r(p),u={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==d)e[d].references++,e[d].updater(u);else{var f=o(u,t);t.byIndex=c,e.splice(c,0,{identifier:p,updater:f,references:1})}a.push(p)}return a}function o(n,e){var r=e.domAPI(e);return r.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;r.update(n=e)}else r.remove()}}n.exports=function(n,o){var i=t(n=n||[],o=o||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var c=r(i[a]);e[c].references--}for(var s=t(n,o),A=0;A<i.length;A++){var l=r(i[A]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}i=s}}},569:n=>{var e={};n.exports=function(n,r){var t=function(n){if(void 0===e[n]){var r=document.querySelector(n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(n){r=null}e[n]=r}return e[n]}(n);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(r)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,r)=>{n.exports=function(n){var e=r.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(r){!function(n,e,r){var t="";r.supports&&(t+="@supports (".concat(r.supports,") {")),r.media&&(t+="@media ".concat(r.media," {"));var o=void 0!==r.layer;o&&(t+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),t+=r.css,o&&(t+="}"),r.media&&(t+="}"),r.supports&&(t+="}");var i=r.sourceMap;i&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(t,n,e.options)}(e,n,r)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function r(t){var o=e[t];if(void 0!==o)return o.exports;var i=e[t]={id:t,exports:{}};return n[t](i,i.exports,r),i.exports}r.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return r.d(e,{a:e}),e},r.d=(n,e)=>{for(var t in e)r.o(e,t)&&!r.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:e[t]})},r.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n=r(379),e=r.n(n),t=r(795),o=r.n(t),i=r(569),a=r.n(i),c=r(565),s=r.n(c),A=r(216),l=r.n(A),p=r(589),d=r.n(p),u=r(147),f={};f.styleTagTransform=d(),f.setAttributes=s(),f.insert=a().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=l(),e()(u.Z,f),u.Z&&u.Z.locals&&u.Z.locals;class C{constructor(n){this.url=n}post(n,e){return fetch([this.url,n].join(""),{method:"POST",body:JSON.stringify(e),headers:{"Content-type":"application/json; charset=UTF-8"}})}get(n){return fetch([this.url,n].join(""))}}const m="https://us-central1-involvement-api.cloudfunctions.net/capstoneApi/apps/WXXsCPtk675NtAM8NnCG/",g=new C("https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=100&page=1&sparkline=false"),h=new C(m),y=async(n,e)=>{const r=await(async n=>(await h.get(`likes?item_id=${n}`)).json())(n),t=r.filter((e=>e.item_id===n))[0];console.log(t?t.likes:0),e.querySelector("p").innerHTML=`${t?t.likes:0}`},v=async(n,e,r,t=0)=>{const o=await(async n=>(await n.get()).json())(n);var i;r.innerHTML=o.length,e.innerHTML="";for(let n=t;n<t+10;n+=1)e.innerHTML+=`<li><ul class="coin">\n                       <li>${(i=o[n]).market_cap_rank}</li>\n                       <li class="coinIcons"><img class="coinImage" src=${i.image} alt='coin'/><strong>${i.name}</strong></li>\n                       <li class="likeIcons"><button id='likeBtn-${i.id}' class="likeBtn" ><p></p><i class="fas fa-heart"></i></button></li>\n                       <li>${i.symbol}\n                       <button class="buyButton" >Buy\n                       <i class="fas fa-shopping-basket"></i></button>\n                       </li>\n                       <li> ${i.current_price}$</li>\n                       <li style="color:${i.price_change_percentage_24h>0?"green":"red"}">${i.price_change_percentage_24h}</li>\n                       <li>${i.circulating_supply}</li>\n                       <li><i class="fas fa-comment-alt" id=${i.id}></i></li>\n                   </ul>\n                </li>`,await y(o[n].id,e.querySelector(["#likeBtn-",o[n].id].join("")))};function b(n){(function(n){return fetch(`${m}comments?item_id=${n}`).then((n=>200===n.status&&n.json()))})(n).then((n=>{if(n.length>0){const e=document.querySelector("#comments");e.innerHTML=`<h3 class="fw-bolder fs-5">Comments (${n.length})</h3>`,n.forEach((n=>{const{creation_date:r,comment:t,username:o}=n,i=document.createElement("p");i.innerText=`${r} - ${t} - by ${o}`,i.classList.add("text-start"),e.appendChild(i)})),e.classList.remove("d-none")}}))}const x=n=>n.toString().split("").reverse().map(((n,e)=>e%3==0&&e>0?`${n},`:n)).reverse().join(""),k=n=>n>0?Math.floor(n):Math.ceil(n),E="usd",w={usd:"$"},B=n=>{const e=document.querySelector("#popup-frame"),r=e.querySelector("#popup-inner");e.classList.remove("d-none"),(n=>fetch((n=>`https://api.coingecko.com/api/v3/coins/${n}?localization=false&tickers=false&market_data=true&community_data=false&developer_data=false&sparkline=false`)(n)).then((n=>n.json())))(n).then((n=>{r.innerHTML="",console.log(n);const{name:e,symbol:t,image:{large:o},market_data:{current_price:{[E]:i}},market_data:{market_cap:{[E]:a}},market_data:{total_volume:{[E]:c}},market_data:{price_change_percentage_24h:s,price_change_percentage_1y:A}}=n;r.innerHTML+=`\n            <div class="position-relative p-3 m-3 border border-2 border-dark">\n                <span class="position-absolute cursor-pointer" id="popup-close">X</span>\n                <img src="${o}">            \n                <h2 class="mt-3">${e}</h2>\n                <div class="mb-3">\n                    24H: <span class=${s<0?"value-drop":"value-increase"}>${k(s)}%</span>\n                    1Y: <span class=${A<0?"value-drop":"value-increase"}>${k(A)}%</span>\n                </div>\n                <div class="row row-cols-2">\n                    <div class="d-flex justify-content-center">\n                    <ul class="text-start">\n                        <li>Symbol: ${t.toUpperCase()}</li>\n                        <li>Price: ${w[E]}${x(i)}</li>\n                    </ul>\n                    </div>\n                    <div class="d-flex justify-content-center">\n                    <ul class="text-start">\n                        <li>Market Cap: ${w[E]}${x(a)}</li>\n                        <li>Total Volume: ${w[E]}${x(c)}</li>\n                    </ul>\n                    </div>\n                </div>\n                <div>\n                  <div id="comments" class="d-none">\n                  </div>\n                  <h3 class="fw-bolder fs-5">Add Comment</h3>\n                  <form id="submit-form" class="d-flex flex-column align-items-center row row-cols-md-2 row-cols-lg-3">\n                    <input type="text" name="username" placeholder="username">\n                    <textarea type="text" name="comment" placeholder="write your comment here"></textarea>\n                    <button>Submit</button>\n                  </form>\n                </div>\n            </div>`})).then((()=>{document.querySelector("#popup-close").addEventListener("click",(()=>{e.classList.add("d-none")}))})).then((()=>b(n))).then((()=>function(n){const e=document.querySelector("#submit-form > button");e.addEventListener("click",(r=>{r.preventDefault();const t=e.parentElement,{username:{value:o},comment:{value:i}}=t;var a;(a=JSON.stringify({item_id:n,username:o,comment:i}),fetch(`${m}comments`,{method:"POST",headers:{"Content-Type":"application/json"},body:a})).then((e=>201===e.status&&b(n)))}))}(n)))},_=document.querySelector(".coins"),S=document.querySelector(".cryptoCounter"),$=document.querySelectorAll(".page");v(g,_,S).then((()=>{document.querySelectorAll(".likeBtn").forEach((n=>n.addEventListener("click",(async()=>{const e=n.id.split("-")[1];var r;r=e,h.post("likes",{item_id:r}),await y(e,n),n.querySelector(".fa-heart").classList.add("liked")})))),document.querySelectorAll(".coins > li").forEach((n=>{n.querySelector(".buyButton").addEventListener("click",(n=>{let e=n.currentTarget.parentElement.parentElement.querySelector(".likeBtn").id;const r=e.indexOf("-");e=e.slice(r+1),B(e)}))}))})),((n,e,r,t)=>{n.forEach((o=>{o.addEventListener("click",(()=>{n.forEach((n=>n.classList.remove("selectedPage"))),o.classList.add("selectedPage"),v(e,r,t,10*o.id)}))}))})($,g,_,S)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,