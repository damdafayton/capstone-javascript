/*! For license information please see main.bundle.js.LICENSE.txt */
(()=>{var n={332:(n,t,e)=>{"use strict";e.d(t,{Z:()=>N});var o=e(537),r=e.n(o),i=e(645),a=e.n(i),A=e(667),l=e.n(A),s=new URL(e(214),e.b),d=new URL(e(349),e.b),c=new URL(e(204),e.b),p=new URL(e(931),e.b),u=new URL(e(19),e.b),m=new URL(e(609),e.b),f=new URL(e(469),e.b),g=new URL(e(819),e.b),b=new URL(e(144),e.b),C=new URL(e(217),e.b),h=new URL(e(956),e.b),B=new URL(e(740),e.b),v=new URL(e(460),e.b),w=new URL(e(175),e.b),$=new URL(e(647),e.b),x=new URL(e(692),e.b),y=a()(r()),k=l()(s),E=l()(d),I=l()(c),_=l()(p),O=l()(u),J=l()(m),P=l()(f),D=l()(g),z=l()(b),S=l()(C),F=l()(h),U=l()(B),M=l()(v),q=l()(w),j=l()($),T=l()(x);y.push([n.id,'/*!\n * Bootstrap v5.1.3 (https://getbootstrap.com/)\n * Copyright 2011-2021 The Bootstrap Authors\n * Copyright 2011-2021 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n */:root{--bs-blue: #0d6efd;--bs-indigo: #6610f2;--bs-purple: #6f42c1;--bs-pink: #d63384;--bs-red: #dc3545;--bs-orange: #fd7e14;--bs-yellow: #ffc107;--bs-green: #198754;--bs-teal: #20c997;--bs-cyan: #0dcaf0;--bs-white: #fff;--bs-gray: #6c757d;--bs-gray-dark: #343a40;--bs-gray-100: #f8f9fa;--bs-gray-200: #e9ecef;--bs-gray-300: #dee2e6;--bs-gray-400: #ced4da;--bs-gray-500: #adb5bd;--bs-gray-600: #6c757d;--bs-gray-700: #495057;--bs-gray-800: #343a40;--bs-gray-900: #212529;--bs-primary: #0d6efd;--bs-secondary: #6c757d;--bs-success: #198754;--bs-info: #0dcaf0;--bs-warning: #ffc107;--bs-danger: #dc3545;--bs-light: #f8f9fa;--bs-dark: #212529;--bs-primary-rgb: 13, 110, 253;--bs-secondary-rgb: 108, 117, 125;--bs-success-rgb: 25, 135, 84;--bs-info-rgb: 13, 202, 240;--bs-warning-rgb: 255, 193, 7;--bs-danger-rgb: 220, 53, 69;--bs-light-rgb: 248, 249, 250;--bs-dark-rgb: 33, 37, 41;--bs-white-rgb: 255, 255, 255;--bs-black-rgb: 0, 0, 0;--bs-body-color-rgb: 33, 37, 41;--bs-body-bg-rgb: 255, 255, 255;--bs-font-sans-serif: system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", "Liberation Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";--bs-font-monospace: SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;--bs-gradient: linear-gradient(180deg, rgba(255, 255, 255, 0.15), rgba(255, 255, 255, 0));--bs-body-font-family: var(--bs-font-sans-serif);--bs-body-font-size: 1rem;--bs-body-font-weight: 400;--bs-body-line-height: 1.5;--bs-body-color: #212529;--bs-body-bg: #fff}*,*::before,*::after{box-sizing:border-box}@media(prefers-reduced-motion: no-preference){:root{scroll-behavior:smooth}}body{margin:0;font-family:var(--bs-body-font-family);font-size:var(--bs-body-font-size);font-weight:var(--bs-body-font-weight);line-height:var(--bs-body-line-height);color:var(--bs-body-color);text-align:var(--bs-body-text-align);background-color:var(--bs-body-bg);-webkit-text-size-adjust:100%;-webkit-tap-highlight-color:rgba(0,0,0,0)}hr{margin:1rem 0;color:inherit;background-color:currentColor;border:0;opacity:.25}hr:not([size]){height:1px}h6,.h6,h5,.h5,h4,.h4,h3,.h3,h2,.h2,h1,.h1{margin-top:0;margin-bottom:.5rem;font-weight:500;line-height:1.2}h1,.h1{font-size:calc(1.375rem + 1.5vw)}@media(min-width: 1200px){h1,.h1{font-size:2.5rem}}h2,.h2{font-size:calc(1.325rem + 0.9vw)}@media(min-width: 1200px){h2,.h2{font-size:2rem}}h3,.h3{font-size:calc(1.3rem + 0.6vw)}@media(min-width: 1200px){h3,.h3{font-size:1.75rem}}h4,.h4{font-size:calc(1.275rem + 0.3vw)}@media(min-width: 1200px){h4,.h4{font-size:1.5rem}}h5,.h5{font-size:1.25rem}h6,.h6{font-size:1rem}p{margin-top:0;margin-bottom:1rem}abbr[title],abbr[data-bs-original-title]{text-decoration:underline dotted;cursor:help;text-decoration-skip-ink:none}address{margin-bottom:1rem;font-style:normal;line-height:inherit}ol,ul{padding-left:2rem}ol,ul,dl{margin-top:0;margin-bottom:1rem}ol ol,ul ul,ol ul,ul ol{margin-bottom:0}dt{font-weight:700}dd{margin-bottom:.5rem;margin-left:0}blockquote{margin:0 0 1rem}b,strong{font-weight:bolder}small,.small{font-size:0.875em}mark,.mark{padding:.2em;background-color:#fcf8e3}sub,sup{position:relative;font-size:0.75em;line-height:0;vertical-align:baseline}sub{bottom:-0.25em}sup{top:-0.5em}a{color:#0d6efd;text-decoration:underline}a:hover{color:#0a58ca}a:not([href]):not([class]),a:not([href]):not([class]):hover{color:inherit;text-decoration:none}pre,code,kbd,samp{font-family:var(--bs-font-monospace);font-size:1em;direction:ltr /* rtl:ignore */;unicode-bidi:bidi-override}pre{display:block;margin-top:0;margin-bottom:1rem;overflow:auto;font-size:0.875em}pre code{font-size:inherit;color:inherit;word-break:normal}code{font-size:0.875em;color:#d63384;word-wrap:break-word}a>code{color:inherit}kbd{padding:.2rem .4rem;font-size:0.875em;color:#fff;background-color:#212529;border-radius:.2rem}kbd kbd{padding:0;font-size:1em;font-weight:700}figure{margin:0 0 1rem}img,svg{vertical-align:middle}table{caption-side:bottom;border-collapse:collapse}caption{padding-top:.5rem;padding-bottom:.5rem;color:#6c757d;text-align:left}th{text-align:inherit;text-align:-webkit-match-parent}thead,tbody,tfoot,tr,td,th{border-color:inherit;border-style:solid;border-width:0}label{display:inline-block}button{border-radius:0}button:focus:not(:focus-visible){outline:0}input,button,select,optgroup,textarea{margin:0;font-family:inherit;font-size:inherit;line-height:inherit}button,select{text-transform:none}[role=button]{cursor:pointer}select{word-wrap:normal}select:disabled{opacity:1}[list]::-webkit-calendar-picker-indicator{display:none}button,[type=button],[type=reset],[type=submit]{-webkit-appearance:button}button:not(:disabled),[type=button]:not(:disabled),[type=reset]:not(:disabled),[type=submit]:not(:disabled){cursor:pointer}::-moz-focus-inner{padding:0;border-style:none}textarea{resize:vertical}fieldset{min-width:0;padding:0;margin:0;border:0}legend{float:left;width:100%;padding:0;margin-bottom:.5rem;font-size:calc(1.275rem + 0.3vw);line-height:inherit}@media(min-width: 1200px){legend{font-size:1.5rem}}legend+*{clear:left}::-webkit-datetime-edit-fields-wrapper,::-webkit-datetime-edit-text,::-webkit-datetime-edit-minute,::-webkit-datetime-edit-hour-field,::-webkit-datetime-edit-day-field,::-webkit-datetime-edit-month-field,::-webkit-datetime-edit-year-field{padding:0}::-webkit-inner-spin-button{height:auto}[type=search]{outline-offset:-2px;-webkit-appearance:textfield}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-color-swatch-wrapper{padding:0}::file-selector-button{font:inherit}::-webkit-file-upload-button{font:inherit;-webkit-appearance:button}output{display:inline-block}iframe{border:0}summary{display:list-item;cursor:pointer}progress{vertical-align:baseline}[hidden]{display:none !important}.lead{font-size:1.25rem;font-weight:300}.display-1{font-size:calc(1.625rem + 4.5vw);font-weight:300;line-height:1.2}@media(min-width: 1200px){.display-1{font-size:5rem}}.display-2{font-size:calc(1.575rem + 3.9vw);font-weight:300;line-height:1.2}@media(min-width: 1200px){.display-2{font-size:4.5rem}}.display-3{font-size:calc(1.525rem + 3.3vw);font-weight:300;line-height:1.2}@media(min-width: 1200px){.display-3{font-size:4rem}}.display-4{font-size:calc(1.475rem + 2.7vw);font-weight:300;line-height:1.2}@media(min-width: 1200px){.display-4{font-size:3.5rem}}.display-5{font-size:calc(1.425rem + 2.1vw);font-weight:300;line-height:1.2}@media(min-width: 1200px){.display-5{font-size:3rem}}.display-6{font-size:calc(1.375rem + 1.5vw);font-weight:300;line-height:1.2}@media(min-width: 1200px){.display-6{font-size:2.5rem}}.list-unstyled{padding-left:0;list-style:none}.list-inline{padding-left:0;list-style:none}.list-inline-item{display:inline-block}.list-inline-item:not(:last-child){margin-right:.5rem}.initialism{font-size:0.875em;text-transform:uppercase}.blockquote{margin-bottom:1rem;font-size:1.25rem}.blockquote>:last-child{margin-bottom:0}.blockquote-footer{margin-top:-1rem;margin-bottom:1rem;font-size:0.875em;color:#6c757d}.blockquote-footer::before{content:"— "}.img-fluid{max-width:100%;height:auto}.img-thumbnail{padding:.25rem;background-color:#fff;border:1px solid #dee2e6;border-radius:.25rem;max-width:100%;height:auto}.figure{display:inline-block}.figure-img{margin-bottom:.5rem;line-height:1}.figure-caption{font-size:0.875em;color:#6c757d}.container,.container-fluid,.container-xxl,.container-xl,.container-lg,.container-md,.container-sm{width:100%;padding-right:var(--bs-gutter-x, 0.75rem);padding-left:var(--bs-gutter-x, 0.75rem);margin-right:auto;margin-left:auto}@media(min-width: 576px){.container-sm,.container{max-width:540px}}@media(min-width: 768px){.container-md,.container-sm,.container{max-width:720px}}@media(min-width: 992px){.container-lg,.container-md,.container-sm,.container{max-width:960px}}@media(min-width: 1200px){.container-xl,.container-lg,.container-md,.container-sm,.container{max-width:1140px}}@media(min-width: 1400px){.container-xxl,.container-xl,.container-lg,.container-md,.container-sm,.container{max-width:1320px}}.row{--bs-gutter-x: 1.5rem;--bs-gutter-y: 0;display:flex;flex-wrap:wrap;margin-top:calc(-1*var(--bs-gutter-y));margin-right:calc(-0.5*var(--bs-gutter-x));margin-left:calc(-0.5*var(--bs-gutter-x))}.row>*{flex-shrink:0;width:100%;max-width:100%;padding-right:calc(var(--bs-gutter-x)*.5);padding-left:calc(var(--bs-gutter-x)*.5);margin-top:var(--bs-gutter-y)}.col{flex:1 0 0%}.row-cols-auto>*{flex:0 0 auto;width:auto}.row-cols-1>*{flex:0 0 auto;width:100%}.row-cols-2>*{flex:0 0 auto;width:50%}.row-cols-3>*{flex:0 0 auto;width:33.3333333333%}.row-cols-4>*{flex:0 0 auto;width:25%}.row-cols-5>*{flex:0 0 auto;width:20%}.row-cols-6>*{flex:0 0 auto;width:16.6666666667%}.col-auto{flex:0 0 auto;width:auto}.col-1{flex:0 0 auto;width:8.33333333%}.col-2{flex:0 0 auto;width:16.66666667%}.col-3{flex:0 0 auto;width:25%}.col-4{flex:0 0 auto;width:33.33333333%}.col-5{flex:0 0 auto;width:41.66666667%}.col-6{flex:0 0 auto;width:50%}.col-7{flex:0 0 auto;width:58.33333333%}.col-8{flex:0 0 auto;width:66.66666667%}.col-9{flex:0 0 auto;width:75%}.col-10{flex:0 0 auto;width:83.33333333%}.col-11{flex:0 0 auto;width:91.66666667%}.col-12{flex:0 0 auto;width:100%}.offset-1{margin-left:8.33333333%}.offset-2{margin-left:16.66666667%}.offset-3{margin-left:25%}.offset-4{margin-left:33.33333333%}.offset-5{margin-left:41.66666667%}.offset-6{margin-left:50%}.offset-7{margin-left:58.33333333%}.offset-8{margin-left:66.66666667%}.offset-9{margin-left:75%}.offset-10{margin-left:83.33333333%}.offset-11{margin-left:91.66666667%}.g-0,.gx-0{--bs-gutter-x: 0}.g-0,.gy-0{--bs-gutter-y: 0}.g-1,.gx-1{--bs-gutter-x: 0.25rem}.g-1,.gy-1{--bs-gutter-y: 0.25rem}.g-2,.gx-2{--bs-gutter-x: 0.5rem}.g-2,.gy-2{--bs-gutter-y: 0.5rem}.g-3,.gx-3{--bs-gutter-x: 1rem}.g-3,.gy-3{--bs-gutter-y: 1rem}.g-4,.gx-4{--bs-gutter-x: 1.5rem}.g-4,.gy-4{--bs-gutter-y: 1.5rem}.g-5,.gx-5{--bs-gutter-x: 3rem}.g-5,.gy-5{--bs-gutter-y: 3rem}@media(min-width: 576px){.col-sm{flex:1 0 0%}.row-cols-sm-auto>*{flex:0 0 auto;width:auto}.row-cols-sm-1>*{flex:0 0 auto;width:100%}.row-cols-sm-2>*{flex:0 0 auto;width:50%}.row-cols-sm-3>*{flex:0 0 auto;width:33.3333333333%}.row-cols-sm-4>*{flex:0 0 auto;width:25%}.row-cols-sm-5>*{flex:0 0 auto;width:20%}.row-cols-sm-6>*{flex:0 0 auto;width:16.6666666667%}.col-sm-auto{flex:0 0 auto;width:auto}.col-sm-1{flex:0 0 auto;width:8.33333333%}.col-sm-2{flex:0 0 auto;width:16.66666667%}.col-sm-3{flex:0 0 auto;width:25%}.col-sm-4{flex:0 0 auto;width:33.33333333%}.col-sm-5{flex:0 0 auto;width:41.66666667%}.col-sm-6{flex:0 0 auto;width:50%}.col-sm-7{flex:0 0 auto;width:58.33333333%}.col-sm-8{flex:0 0 auto;width:66.66666667%}.col-sm-9{flex:0 0 auto;width:75%}.col-sm-10{flex:0 0 auto;width:83.33333333%}.col-sm-11{flex:0 0 auto;width:91.66666667%}.col-sm-12{flex:0 0 auto;width:100%}.offset-sm-0{margin-left:0}.offset-sm-1{margin-left:8.33333333%}.offset-sm-2{margin-left:16.66666667%}.offset-sm-3{margin-left:25%}.offset-sm-4{margin-left:33.33333333%}.offset-sm-5{margin-left:41.66666667%}.offset-sm-6{margin-left:50%}.offset-sm-7{margin-left:58.33333333%}.offset-sm-8{margin-left:66.66666667%}.offset-sm-9{margin-left:75%}.offset-sm-10{margin-left:83.33333333%}.offset-sm-11{margin-left:91.66666667%}.g-sm-0,.gx-sm-0{--bs-gutter-x: 0}.g-sm-0,.gy-sm-0{--bs-gutter-y: 0}.g-sm-1,.gx-sm-1{--bs-gutter-x: 0.25rem}.g-sm-1,.gy-sm-1{--bs-gutter-y: 0.25rem}.g-sm-2,.gx-sm-2{--bs-gutter-x: 0.5rem}.g-sm-2,.gy-sm-2{--bs-gutter-y: 0.5rem}.g-sm-3,.gx-sm-3{--bs-gutter-x: 1rem}.g-sm-3,.gy-sm-3{--bs-gutter-y: 1rem}.g-sm-4,.gx-sm-4{--bs-gutter-x: 1.5rem}.g-sm-4,.gy-sm-4{--bs-gutter-y: 1.5rem}.g-sm-5,.gx-sm-5{--bs-gutter-x: 3rem}.g-sm-5,.gy-sm-5{--bs-gutter-y: 3rem}}@media(min-width: 768px){.col-md{flex:1 0 0%}.row-cols-md-auto>*{flex:0 0 auto;width:auto}.row-cols-md-1>*{flex:0 0 auto;width:100%}.row-cols-md-2>*{flex:0 0 auto;width:50%}.row-cols-md-3>*{flex:0 0 auto;width:33.3333333333%}.row-cols-md-4>*{flex:0 0 auto;width:25%}.row-cols-md-5>*{flex:0 0 auto;width:20%}.row-cols-md-6>*{flex:0 0 auto;width:16.6666666667%}.col-md-auto{flex:0 0 auto;width:auto}.col-md-1{flex:0 0 auto;width:8.33333333%}.col-md-2{flex:0 0 auto;width:16.66666667%}.col-md-3{flex:0 0 auto;width:25%}.col-md-4{flex:0 0 auto;width:33.33333333%}.col-md-5{flex:0 0 auto;width:41.66666667%}.col-md-6{flex:0 0 auto;width:50%}.col-md-7{flex:0 0 auto;width:58.33333333%}.col-md-8{flex:0 0 auto;width:66.66666667%}.col-md-9{flex:0 0 auto;width:75%}.col-md-10{flex:0 0 auto;width:83.33333333%}.col-md-11{flex:0 0 auto;width:91.66666667%}.col-md-12{flex:0 0 auto;width:100%}.offset-md-0{margin-left:0}.offset-md-1{margin-left:8.33333333%}.offset-md-2{margin-left:16.66666667%}.offset-md-3{margin-left:25%}.offset-md-4{margin-left:33.33333333%}.offset-md-5{margin-left:41.66666667%}.offset-md-6{margin-left:50%}.offset-md-7{margin-left:58.33333333%}.offset-md-8{margin-left:66.66666667%}.offset-md-9{margin-left:75%}.offset-md-10{margin-left:83.33333333%}.offset-md-11{margin-left:91.66666667%}.g-md-0,.gx-md-0{--bs-gutter-x: 0}.g-md-0,.gy-md-0{--bs-gutter-y: 0}.g-md-1,.gx-md-1{--bs-gutter-x: 0.25rem}.g-md-1,.gy-md-1{--bs-gutter-y: 0.25rem}.g-md-2,.gx-md-2{--bs-gutter-x: 0.5rem}.g-md-2,.gy-md-2{--bs-gutter-y: 0.5rem}.g-md-3,.gx-md-3{--bs-gutter-x: 1rem}.g-md-3,.gy-md-3{--bs-gutter-y: 1rem}.g-md-4,.gx-md-4{--bs-gutter-x: 1.5rem}.g-md-4,.gy-md-4{--bs-gutter-y: 1.5rem}.g-md-5,.gx-md-5{--bs-gutter-x: 3rem}.g-md-5,.gy-md-5{--bs-gutter-y: 3rem}}@media(min-width: 992px){.col-lg{flex:1 0 0%}.row-cols-lg-auto>*{flex:0 0 auto;width:auto}.row-cols-lg-1>*{flex:0 0 auto;width:100%}.row-cols-lg-2>*{flex:0 0 auto;width:50%}.row-cols-lg-3>*{flex:0 0 auto;width:33.3333333333%}.row-cols-lg-4>*{flex:0 0 auto;width:25%}.row-cols-lg-5>*{flex:0 0 auto;width:20%}.row-cols-lg-6>*{flex:0 0 auto;width:16.6666666667%}.col-lg-auto{flex:0 0 auto;width:auto}.col-lg-1{flex:0 0 auto;width:8.33333333%}.col-lg-2{flex:0 0 auto;width:16.66666667%}.col-lg-3{flex:0 0 auto;width:25%}.col-lg-4{flex:0 0 auto;width:33.33333333%}.col-lg-5{flex:0 0 auto;width:41.66666667%}.col-lg-6{flex:0 0 auto;width:50%}.col-lg-7{flex:0 0 auto;width:58.33333333%}.col-lg-8{flex:0 0 auto;width:66.66666667%}.col-lg-9{flex:0 0 auto;width:75%}.col-lg-10{flex:0 0 auto;width:83.33333333%}.col-lg-11{flex:0 0 auto;width:91.66666667%}.col-lg-12{flex:0 0 auto;width:100%}.offset-lg-0{margin-left:0}.offset-lg-1{margin-left:8.33333333%}.offset-lg-2{margin-left:16.66666667%}.offset-lg-3{margin-left:25%}.offset-lg-4{margin-left:33.33333333%}.offset-lg-5{margin-left:41.66666667%}.offset-lg-6{margin-left:50%}.offset-lg-7{margin-left:58.33333333%}.offset-lg-8{margin-left:66.66666667%}.offset-lg-9{margin-left:75%}.offset-lg-10{margin-left:83.33333333%}.offset-lg-11{margin-left:91.66666667%}.g-lg-0,.gx-lg-0{--bs-gutter-x: 0}.g-lg-0,.gy-lg-0{--bs-gutter-y: 0}.g-lg-1,.gx-lg-1{--bs-gutter-x: 0.25rem}.g-lg-1,.gy-lg-1{--bs-gutter-y: 0.25rem}.g-lg-2,.gx-lg-2{--bs-gutter-x: 0.5rem}.g-lg-2,.gy-lg-2{--bs-gutter-y: 0.5rem}.g-lg-3,.gx-lg-3{--bs-gutter-x: 1rem}.g-lg-3,.gy-lg-3{--bs-gutter-y: 1rem}.g-lg-4,.gx-lg-4{--bs-gutter-x: 1.5rem}.g-lg-4,.gy-lg-4{--bs-gutter-y: 1.5rem}.g-lg-5,.gx-lg-5{--bs-gutter-x: 3rem}.g-lg-5,.gy-lg-5{--bs-gutter-y: 3rem}}@media(min-width: 1200px){.col-xl{flex:1 0 0%}.row-cols-xl-auto>*{flex:0 0 auto;width:auto}.row-cols-xl-1>*{flex:0 0 auto;width:100%}.row-cols-xl-2>*{flex:0 0 auto;width:50%}.row-cols-xl-3>*{flex:0 0 auto;width:33.3333333333%}.row-cols-xl-4>*{flex:0 0 auto;width:25%}.row-cols-xl-5>*{flex:0 0 auto;width:20%}.row-cols-xl-6>*{flex:0 0 auto;width:16.6666666667%}.col-xl-auto{flex:0 0 auto;width:auto}.col-xl-1{flex:0 0 auto;width:8.33333333%}.col-xl-2{flex:0 0 auto;width:16.66666667%}.col-xl-3{flex:0 0 auto;width:25%}.col-xl-4{flex:0 0 auto;width:33.33333333%}.col-xl-5{flex:0 0 auto;width:41.66666667%}.col-xl-6{flex:0 0 auto;width:50%}.col-xl-7{flex:0 0 auto;width:58.33333333%}.col-xl-8{flex:0 0 auto;width:66.66666667%}.col-xl-9{flex:0 0 auto;width:75%}.col-xl-10{flex:0 0 auto;width:83.33333333%}.col-xl-11{flex:0 0 auto;width:91.66666667%}.col-xl-12{flex:0 0 auto;width:100%}.offset-xl-0{margin-left:0}.offset-xl-1{margin-left:8.33333333%}.offset-xl-2{margin-left:16.66666667%}.offset-xl-3{margin-left:25%}.offset-xl-4{margin-left:33.33333333%}.offset-xl-5{margin-left:41.66666667%}.offset-xl-6{margin-left:50%}.offset-xl-7{margin-left:58.33333333%}.offset-xl-8{margin-left:66.66666667%}.offset-xl-9{margin-left:75%}.offset-xl-10{margin-left:83.33333333%}.offset-xl-11{margin-left:91.66666667%}.g-xl-0,.gx-xl-0{--bs-gutter-x: 0}.g-xl-0,.gy-xl-0{--bs-gutter-y: 0}.g-xl-1,.gx-xl-1{--bs-gutter-x: 0.25rem}.g-xl-1,.gy-xl-1{--bs-gutter-y: 0.25rem}.g-xl-2,.gx-xl-2{--bs-gutter-x: 0.5rem}.g-xl-2,.gy-xl-2{--bs-gutter-y: 0.5rem}.g-xl-3,.gx-xl-3{--bs-gutter-x: 1rem}.g-xl-3,.gy-xl-3{--bs-gutter-y: 1rem}.g-xl-4,.gx-xl-4{--bs-gutter-x: 1.5rem}.g-xl-4,.gy-xl-4{--bs-gutter-y: 1.5rem}.g-xl-5,.gx-xl-5{--bs-gutter-x: 3rem}.g-xl-5,.gy-xl-5{--bs-gutter-y: 3rem}}@media(min-width: 1400px){.col-xxl{flex:1 0 0%}.row-cols-xxl-auto>*{flex:0 0 auto;width:auto}.row-cols-xxl-1>*{flex:0 0 auto;width:100%}.row-cols-xxl-2>*{flex:0 0 auto;width:50%}.row-cols-xxl-3>*{flex:0 0 auto;width:33.3333333333%}.row-cols-xxl-4>*{flex:0 0 auto;width:25%}.row-cols-xxl-5>*{flex:0 0 auto;width:20%}.row-cols-xxl-6>*{flex:0 0 auto;width:16.6666666667%}.col-xxl-auto{flex:0 0 auto;width:auto}.col-xxl-1{flex:0 0 auto;width:8.33333333%}.col-xxl-2{flex:0 0 auto;width:16.66666667%}.col-xxl-3{flex:0 0 auto;width:25%}.col-xxl-4{flex:0 0 auto;width:33.33333333%}.col-xxl-5{flex:0 0 auto;width:41.66666667%}.col-xxl-6{flex:0 0 auto;width:50%}.col-xxl-7{flex:0 0 auto;width:58.33333333%}.col-xxl-8{flex:0 0 auto;width:66.66666667%}.col-xxl-9{flex:0 0 auto;width:75%}.col-xxl-10{flex:0 0 auto;width:83.33333333%}.col-xxl-11{flex:0 0 auto;width:91.66666667%}.col-xxl-12{flex:0 0 auto;width:100%}.offset-xxl-0{margin-left:0}.offset-xxl-1{margin-left:8.33333333%}.offset-xxl-2{margin-left:16.66666667%}.offset-xxl-3{margin-left:25%}.offset-xxl-4{margin-left:33.33333333%}.offset-xxl-5{margin-left:41.66666667%}.offset-xxl-6{margin-left:50%}.offset-xxl-7{margin-left:58.33333333%}.offset-xxl-8{margin-left:66.66666667%}.offset-xxl-9{margin-left:75%}.offset-xxl-10{margin-left:83.33333333%}.offset-xxl-11{margin-left:91.66666667%}.g-xxl-0,.gx-xxl-0{--bs-gutter-x: 0}.g-xxl-0,.gy-xxl-0{--bs-gutter-y: 0}.g-xxl-1,.gx-xxl-1{--bs-gutter-x: 0.25rem}.g-xxl-1,.gy-xxl-1{--bs-gutter-y: 0.25rem}.g-xxl-2,.gx-xxl-2{--bs-gutter-x: 0.5rem}.g-xxl-2,.gy-xxl-2{--bs-gutter-y: 0.5rem}.g-xxl-3,.gx-xxl-3{--bs-gutter-x: 1rem}.g-xxl-3,.gy-xxl-3{--bs-gutter-y: 1rem}.g-xxl-4,.gx-xxl-4{--bs-gutter-x: 1.5rem}.g-xxl-4,.gy-xxl-4{--bs-gutter-y: 1.5rem}.g-xxl-5,.gx-xxl-5{--bs-gutter-x: 3rem}.g-xxl-5,.gy-xxl-5{--bs-gutter-y: 3rem}}.table{--bs-table-bg: transparent;--bs-table-accent-bg: transparent;--bs-table-striped-color: #212529;--bs-table-striped-bg: rgba(0, 0, 0, 0.05);--bs-table-active-color: #212529;--bs-table-active-bg: rgba(0, 0, 0, 0.1);--bs-table-hover-color: #212529;--bs-table-hover-bg: rgba(0, 0, 0, 0.075);width:100%;margin-bottom:1rem;color:#212529;vertical-align:top;border-color:#dee2e6}.table>:not(caption)>*>*{padding:.5rem .5rem;background-color:var(--bs-table-bg);border-bottom-width:1px;box-shadow:inset 0 0 0 9999px var(--bs-table-accent-bg)}.table>tbody{vertical-align:inherit}.table>thead{vertical-align:bottom}.table>:not(:first-child){border-top:2px solid currentColor}.caption-top{caption-side:top}.table-sm>:not(caption)>*>*{padding:.25rem .25rem}.table-bordered>:not(caption)>*{border-width:1px 0}.table-bordered>:not(caption)>*>*{border-width:0 1px}.table-borderless>:not(caption)>*>*{border-bottom-width:0}.table-borderless>:not(:first-child){border-top-width:0}.table-striped>tbody>tr:nth-of-type(odd)>*{--bs-table-accent-bg: var(--bs-table-striped-bg);color:var(--bs-table-striped-color)}.table-active{--bs-table-accent-bg: var(--bs-table-active-bg);color:var(--bs-table-active-color)}.table-hover>tbody>tr:hover>*{--bs-table-accent-bg: var(--bs-table-hover-bg);color:var(--bs-table-hover-color)}.table-primary{--bs-table-bg: #cfe2ff;--bs-table-striped-bg: #c5d7f2;--bs-table-striped-color: #000;--bs-table-active-bg: #bacbe6;--bs-table-active-color: #000;--bs-table-hover-bg: #bfd1ec;--bs-table-hover-color: #000;color:#000;border-color:#bacbe6}.table-secondary{--bs-table-bg: #e2e3e5;--bs-table-striped-bg: #d7d8da;--bs-table-striped-color: #000;--bs-table-active-bg: #cbccce;--bs-table-active-color: #000;--bs-table-hover-bg: #d1d2d4;--bs-table-hover-color: #000;color:#000;border-color:#cbccce}.table-success{--bs-table-bg: #d1e7dd;--bs-table-striped-bg: #c7dbd2;--bs-table-striped-color: #000;--bs-table-active-bg: #bcd0c7;--bs-table-active-color: #000;--bs-table-hover-bg: #c1d6cc;--bs-table-hover-color: #000;color:#000;border-color:#bcd0c7}.table-info{--bs-table-bg: #cff4fc;--bs-table-striped-bg: #c5e8ef;--bs-table-striped-color: #000;--bs-table-active-bg: #badce3;--bs-table-active-color: #000;--bs-table-hover-bg: #bfe2e9;--bs-table-hover-color: #000;color:#000;border-color:#badce3}.table-warning{--bs-table-bg: #fff3cd;--bs-table-striped-bg: #f2e7c3;--bs-table-striped-color: #000;--bs-table-active-bg: #e6dbb9;--bs-table-active-color: #000;--bs-table-hover-bg: #ece1be;--bs-table-hover-color: #000;color:#000;border-color:#e6dbb9}.table-danger{--bs-table-bg: #f8d7da;--bs-table-striped-bg: #eccccf;--bs-table-striped-color: #000;--bs-table-active-bg: #dfc2c4;--bs-table-active-color: #000;--bs-table-hover-bg: #e5c7ca;--bs-table-hover-color: #000;color:#000;border-color:#dfc2c4}.table-light{--bs-table-bg: #f8f9fa;--bs-table-striped-bg: #ecedee;--bs-table-striped-color: #000;--bs-table-active-bg: #dfe0e1;--bs-table-active-color: #000;--bs-table-hover-bg: #e5e6e7;--bs-table-hover-color: #000;color:#000;border-color:#dfe0e1}.table-dark{--bs-table-bg: #212529;--bs-table-striped-bg: #2c3034;--bs-table-striped-color: #fff;--bs-table-active-bg: #373b3e;--bs-table-active-color: #fff;--bs-table-hover-bg: #323539;--bs-table-hover-color: #fff;color:#fff;border-color:#373b3e}.table-responsive{overflow-x:auto;-webkit-overflow-scrolling:touch}@media(max-width: 575.98px){.table-responsive-sm{overflow-x:auto;-webkit-overflow-scrolling:touch}}@media(max-width: 767.98px){.table-responsive-md{overflow-x:auto;-webkit-overflow-scrolling:touch}}@media(max-width: 991.98px){.table-responsive-lg{overflow-x:auto;-webkit-overflow-scrolling:touch}}@media(max-width: 1199.98px){.table-responsive-xl{overflow-x:auto;-webkit-overflow-scrolling:touch}}@media(max-width: 1399.98px){.table-responsive-xxl{overflow-x:auto;-webkit-overflow-scrolling:touch}}.form-label{margin-bottom:.5rem}.col-form-label{padding-top:calc(0.375rem + 1px);padding-bottom:calc(0.375rem + 1px);margin-bottom:0;font-size:inherit;line-height:1.5}.col-form-label-lg{padding-top:calc(0.5rem + 1px);padding-bottom:calc(0.5rem + 1px);font-size:1.25rem}.col-form-label-sm{padding-top:calc(0.25rem + 1px);padding-bottom:calc(0.25rem + 1px);font-size:0.875rem}.form-text{margin-top:.25rem;font-size:0.875em;color:#6c757d}.form-control{display:block;width:100%;padding:.375rem .75rem;font-size:1rem;font-weight:400;line-height:1.5;color:#212529;background-color:#fff;background-clip:padding-box;border:1px solid #ced4da;appearance:none;border-radius:.25rem;transition:border-color .15s ease-in-out,box-shadow .15s ease-in-out}@media(prefers-reduced-motion: reduce){.form-control{transition:none}}.form-control[type=file]{overflow:hidden}.form-control[type=file]:not(:disabled):not([readonly]){cursor:pointer}.form-control:focus{color:#212529;background-color:#fff;border-color:#86b7fe;outline:0;box-shadow:0 0 0 .25rem rgba(13,110,253,.25)}.form-control::-webkit-date-and-time-value{height:1.5em}.form-control::placeholder{color:#6c757d;opacity:1}.form-control:disabled,.form-control[readonly]{background-color:#e9ecef;opacity:1}.form-control::file-selector-button{padding:.375rem .75rem;margin:-0.375rem -0.75rem;margin-inline-end:.75rem;color:#212529;background-color:#e9ecef;pointer-events:none;border-color:inherit;border-style:solid;border-width:0;border-inline-end-width:1px;border-radius:0;transition:color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out}@media(prefers-reduced-motion: reduce){.form-control::file-selector-button{transition:none}}.form-control:hover:not(:disabled):not([readonly])::file-selector-button{background-color:#dde0e3}.form-control::-webkit-file-upload-button{padding:.375rem .75rem;margin:-0.375rem -0.75rem;margin-inline-end:.75rem;color:#212529;background-color:#e9ecef;pointer-events:none;border-color:inherit;border-style:solid;border-width:0;border-inline-end-width:1px;border-radius:0;transition:color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out}@media(prefers-reduced-motion: reduce){.form-control::-webkit-file-upload-button{transition:none}}.form-control:hover:not(:disabled):not([readonly])::-webkit-file-upload-button{background-color:#dde0e3}.form-control-plaintext{display:block;width:100%;padding:.375rem 0;margin-bottom:0;line-height:1.5;color:#212529;background-color:transparent;border:solid transparent;border-width:1px 0}.form-control-plaintext.form-control-sm,.form-control-plaintext.form-control-lg{padding-right:0;padding-left:0}.form-control-sm{min-height:calc(1.5em + 0.5rem + 2px);padding:.25rem .5rem;font-size:0.875rem;border-radius:.2rem}.form-control-sm::file-selector-button{padding:.25rem .5rem;margin:-0.25rem -0.5rem;margin-inline-end:.5rem}.form-control-sm::-webkit-file-upload-button{padding:.25rem .5rem;margin:-0.25rem -0.5rem;margin-inline-end:.5rem}.form-control-lg{min-height:calc(1.5em + 1rem + 2px);padding:.5rem 1rem;font-size:1.25rem;border-radius:.3rem}.form-control-lg::file-selector-button{padding:.5rem 1rem;margin:-0.5rem -1rem;margin-inline-end:1rem}.form-control-lg::-webkit-file-upload-button{padding:.5rem 1rem;margin:-0.5rem -1rem;margin-inline-end:1rem}textarea.form-control{min-height:calc(1.5em + 0.75rem + 2px)}textarea.form-control-sm{min-height:calc(1.5em + 0.5rem + 2px)}textarea.form-control-lg{min-height:calc(1.5em + 1rem + 2px)}.form-control-color{width:3rem;height:auto;padding:.375rem}.form-control-color:not(:disabled):not([readonly]){cursor:pointer}.form-control-color::-moz-color-swatch{height:1.5em;border-radius:.25rem}.form-control-color::-webkit-color-swatch{height:1.5em;border-radius:.25rem}.form-select{display:block;width:100%;padding:.375rem 2.25rem .375rem .75rem;-moz-padding-start:calc(0.75rem - 3px);font-size:1rem;font-weight:400;line-height:1.5;color:#212529;background-color:#fff;background-image:url('+k+');background-repeat:no-repeat;background-position:right .75rem center;background-size:16px 12px;border:1px solid #ced4da;border-radius:.25rem;transition:border-color .15s ease-in-out,box-shadow .15s ease-in-out;appearance:none}@media(prefers-reduced-motion: reduce){.form-select{transition:none}}.form-select:focus{border-color:#86b7fe;outline:0;box-shadow:0 0 0 .25rem rgba(13,110,253,.25)}.form-select[multiple],.form-select[size]:not([size="1"]){padding-right:.75rem;background-image:none}.form-select:disabled{background-color:#e9ecef}.form-select:-moz-focusring{color:transparent;text-shadow:0 0 0 #212529}.form-select-sm{padding-top:.25rem;padding-bottom:.25rem;padding-left:.5rem;font-size:0.875rem;border-radius:.2rem}.form-select-lg{padding-top:.5rem;padding-bottom:.5rem;padding-left:1rem;font-size:1.25rem;border-radius:.3rem}.form-check{display:block;min-height:1.5rem;padding-left:1.5em;margin-bottom:.125rem}.form-check .form-check-input{float:left;margin-left:-1.5em}.form-check-input{width:1em;height:1em;margin-top:.25em;vertical-align:top;background-color:#fff;background-repeat:no-repeat;background-position:center;background-size:contain;border:1px solid rgba(0,0,0,.25);appearance:none;color-adjust:exact}.form-check-input[type=checkbox]{border-radius:.25em}.form-check-input[type=radio]{border-radius:50%}.form-check-input:active{filter:brightness(90%)}.form-check-input:focus{border-color:#86b7fe;outline:0;box-shadow:0 0 0 .25rem rgba(13,110,253,.25)}.form-check-input:checked{background-color:#0d6efd;border-color:#0d6efd}.form-check-input:checked[type=checkbox]{background-image:url('+E+")}.form-check-input:checked[type=radio]{background-image:url("+I+")}.form-check-input[type=checkbox]:indeterminate{background-color:#0d6efd;border-color:#0d6efd;background-image:url("+_+")}.form-check-input:disabled{pointer-events:none;filter:none;opacity:.5}.form-check-input[disabled]~.form-check-label,.form-check-input:disabled~.form-check-label{opacity:.5}.form-switch{padding-left:2.5em}.form-switch .form-check-input{width:2em;margin-left:-2.5em;background-image:url("+O+");background-position:left center;border-radius:2em;transition:background-position .15s ease-in-out}@media(prefers-reduced-motion: reduce){.form-switch .form-check-input{transition:none}}.form-switch .form-check-input:focus{background-image:url("+J+")}.form-switch .form-check-input:checked{background-position:right center;background-image:url("+P+")}.form-check-inline{display:inline-block;margin-right:1rem}.btn-check{position:absolute;clip:rect(0, 0, 0, 0);pointer-events:none}.btn-check[disabled]+.btn,.btn-check:disabled+.btn{pointer-events:none;filter:none;opacity:.65}.form-range{width:100%;height:1.5rem;padding:0;background-color:transparent;appearance:none}.form-range:focus{outline:0}.form-range:focus::-webkit-slider-thumb{box-shadow:0 0 0 1px #fff,0 0 0 .25rem rgba(13,110,253,.25)}.form-range:focus::-moz-range-thumb{box-shadow:0 0 0 1px #fff,0 0 0 .25rem rgba(13,110,253,.25)}.form-range::-moz-focus-outer{border:0}.form-range::-webkit-slider-thumb{width:1rem;height:1rem;margin-top:-0.25rem;background-color:#0d6efd;border:0;border-radius:1rem;transition:background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;appearance:none}@media(prefers-reduced-motion: reduce){.form-range::-webkit-slider-thumb{transition:none}}.form-range::-webkit-slider-thumb:active{background-color:#b6d4fe}.form-range::-webkit-slider-runnable-track{width:100%;height:.5rem;color:transparent;cursor:pointer;background-color:#dee2e6;border-color:transparent;border-radius:1rem}.form-range::-moz-range-thumb{width:1rem;height:1rem;background-color:#0d6efd;border:0;border-radius:1rem;transition:background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;appearance:none}@media(prefers-reduced-motion: reduce){.form-range::-moz-range-thumb{transition:none}}.form-range::-moz-range-thumb:active{background-color:#b6d4fe}.form-range::-moz-range-track{width:100%;height:.5rem;color:transparent;cursor:pointer;background-color:#dee2e6;border-color:transparent;border-radius:1rem}.form-range:disabled{pointer-events:none}.form-range:disabled::-webkit-slider-thumb{background-color:#adb5bd}.form-range:disabled::-moz-range-thumb{background-color:#adb5bd}.form-floating{position:relative}.form-floating>.form-control,.form-floating>.form-select{height:calc(3.5rem + 2px);line-height:1.25}.form-floating>label{position:absolute;top:0;left:0;height:100%;padding:1rem .75rem;pointer-events:none;border:1px solid transparent;transform-origin:0 0;transition:opacity .1s ease-in-out,transform .1s ease-in-out}@media(prefers-reduced-motion: reduce){.form-floating>label{transition:none}}.form-floating>.form-control{padding:1rem .75rem}.form-floating>.form-control::placeholder{color:transparent}.form-floating>.form-control:focus,.form-floating>.form-control:not(:placeholder-shown){padding-top:1.625rem;padding-bottom:.625rem}.form-floating>.form-control:-webkit-autofill{padding-top:1.625rem;padding-bottom:.625rem}.form-floating>.form-select{padding-top:1.625rem;padding-bottom:.625rem}.form-floating>.form-control:focus~label,.form-floating>.form-control:not(:placeholder-shown)~label,.form-floating>.form-select~label{opacity:.65;transform:scale(0.85) translateY(-0.5rem) translateX(0.15rem)}.form-floating>.form-control:-webkit-autofill~label{opacity:.65;transform:scale(0.85) translateY(-0.5rem) translateX(0.15rem)}.input-group{position:relative;display:flex;flex-wrap:wrap;align-items:stretch;width:100%}.input-group>.form-control,.input-group>.form-select{position:relative;flex:1 1 auto;width:1%;min-width:0}.input-group>.form-control:focus,.input-group>.form-select:focus{z-index:3}.input-group .btn{position:relative;z-index:2}.input-group .btn:focus{z-index:3}.input-group-text{display:flex;align-items:center;padding:.375rem .75rem;font-size:1rem;font-weight:400;line-height:1.5;color:#212529;text-align:center;white-space:nowrap;background-color:#e9ecef;border:1px solid #ced4da;border-radius:.25rem}.input-group-lg>.form-control,.input-group-lg>.form-select,.input-group-lg>.input-group-text,.input-group-lg>.btn{padding:.5rem 1rem;font-size:1.25rem;border-radius:.3rem}.input-group-sm>.form-control,.input-group-sm>.form-select,.input-group-sm>.input-group-text,.input-group-sm>.btn{padding:.25rem .5rem;font-size:0.875rem;border-radius:.2rem}.input-group-lg>.form-select,.input-group-sm>.form-select{padding-right:3rem}.input-group:not(.has-validation)>:not(:last-child):not(.dropdown-toggle):not(.dropdown-menu),.input-group:not(.has-validation)>.dropdown-toggle:nth-last-child(n+3){border-top-right-radius:0;border-bottom-right-radius:0}.input-group.has-validation>:nth-last-child(n+3):not(.dropdown-toggle):not(.dropdown-menu),.input-group.has-validation>.dropdown-toggle:nth-last-child(n+4){border-top-right-radius:0;border-bottom-right-radius:0}.input-group>:not(:first-child):not(.dropdown-menu):not(.valid-tooltip):not(.valid-feedback):not(.invalid-tooltip):not(.invalid-feedback){margin-left:-1px;border-top-left-radius:0;border-bottom-left-radius:0}.valid-feedback{display:none;width:100%;margin-top:.25rem;font-size:0.875em;color:#198754}.valid-tooltip{position:absolute;top:100%;z-index:5;display:none;max-width:100%;padding:.25rem .5rem;margin-top:.1rem;font-size:0.875rem;color:#fff;background-color:rgba(25,135,84,.9);border-radius:.25rem}.was-validated :valid~.valid-feedback,.was-validated :valid~.valid-tooltip,.is-valid~.valid-feedback,.is-valid~.valid-tooltip{display:block}.was-validated .form-control:valid,.form-control.is-valid{border-color:#198754;padding-right:calc(1.5em + 0.75rem);background-image:url("+D+');background-repeat:no-repeat;background-position:right calc(0.375em + 0.1875rem) center;background-size:calc(0.75em + 0.375rem) calc(0.75em + 0.375rem)}.was-validated .form-control:valid:focus,.form-control.is-valid:focus{border-color:#198754;box-shadow:0 0 0 .25rem rgba(25,135,84,.25)}.was-validated textarea.form-control:valid,textarea.form-control.is-valid{padding-right:calc(1.5em + 0.75rem);background-position:top calc(0.375em + 0.1875rem) right calc(0.375em + 0.1875rem)}.was-validated .form-select:valid,.form-select.is-valid{border-color:#198754}.was-validated .form-select:valid:not([multiple]):not([size]),.was-validated .form-select:valid:not([multiple])[size="1"],.form-select.is-valid:not([multiple]):not([size]),.form-select.is-valid:not([multiple])[size="1"]{padding-right:4.125rem;background-image:url('+k+"),url("+D+");background-position:right .75rem center,center right 2.25rem;background-size:16px 12px,calc(0.75em + 0.375rem) calc(0.75em + 0.375rem)}.was-validated .form-select:valid:focus,.form-select.is-valid:focus{border-color:#198754;box-shadow:0 0 0 .25rem rgba(25,135,84,.25)}.was-validated .form-check-input:valid,.form-check-input.is-valid{border-color:#198754}.was-validated .form-check-input:valid:checked,.form-check-input.is-valid:checked{background-color:#198754}.was-validated .form-check-input:valid:focus,.form-check-input.is-valid:focus{box-shadow:0 0 0 .25rem rgba(25,135,84,.25)}.was-validated .form-check-input:valid~.form-check-label,.form-check-input.is-valid~.form-check-label{color:#198754}.form-check-inline .form-check-input~.valid-feedback{margin-left:.5em}.was-validated .input-group .form-control:valid,.input-group .form-control.is-valid,.was-validated .input-group .form-select:valid,.input-group .form-select.is-valid{z-index:1}.was-validated .input-group .form-control:valid:focus,.input-group .form-control.is-valid:focus,.was-validated .input-group .form-select:valid:focus,.input-group .form-select.is-valid:focus{z-index:3}.invalid-feedback{display:none;width:100%;margin-top:.25rem;font-size:0.875em;color:#dc3545}.invalid-tooltip{position:absolute;top:100%;z-index:5;display:none;max-width:100%;padding:.25rem .5rem;margin-top:.1rem;font-size:0.875rem;color:#fff;background-color:rgba(220,53,69,.9);border-radius:.25rem}.was-validated :invalid~.invalid-feedback,.was-validated :invalid~.invalid-tooltip,.is-invalid~.invalid-feedback,.is-invalid~.invalid-tooltip{display:block}.was-validated .form-control:invalid,.form-control.is-invalid{border-color:#dc3545;padding-right:calc(1.5em + 0.75rem);background-image:url("+z+');background-repeat:no-repeat;background-position:right calc(0.375em + 0.1875rem) center;background-size:calc(0.75em + 0.375rem) calc(0.75em + 0.375rem)}.was-validated .form-control:invalid:focus,.form-control.is-invalid:focus{border-color:#dc3545;box-shadow:0 0 0 .25rem rgba(220,53,69,.25)}.was-validated textarea.form-control:invalid,textarea.form-control.is-invalid{padding-right:calc(1.5em + 0.75rem);background-position:top calc(0.375em + 0.1875rem) right calc(0.375em + 0.1875rem)}.was-validated .form-select:invalid,.form-select.is-invalid{border-color:#dc3545}.was-validated .form-select:invalid:not([multiple]):not([size]),.was-validated .form-select:invalid:not([multiple])[size="1"],.form-select.is-invalid:not([multiple]):not([size]),.form-select.is-invalid:not([multiple])[size="1"]{padding-right:4.125rem;background-image:url('+k+"),url("+z+');background-position:right .75rem center,center right 2.25rem;background-size:16px 12px,calc(0.75em + 0.375rem) calc(0.75em + 0.375rem)}.was-validated .form-select:invalid:focus,.form-select.is-invalid:focus{border-color:#dc3545;box-shadow:0 0 0 .25rem rgba(220,53,69,.25)}.was-validated .form-check-input:invalid,.form-check-input.is-invalid{border-color:#dc3545}.was-validated .form-check-input:invalid:checked,.form-check-input.is-invalid:checked{background-color:#dc3545}.was-validated .form-check-input:invalid:focus,.form-check-input.is-invalid:focus{box-shadow:0 0 0 .25rem rgba(220,53,69,.25)}.was-validated .form-check-input:invalid~.form-check-label,.form-check-input.is-invalid~.form-check-label{color:#dc3545}.form-check-inline .form-check-input~.invalid-feedback{margin-left:.5em}.was-validated .input-group .form-control:invalid,.input-group .form-control.is-invalid,.was-validated .input-group .form-select:invalid,.input-group .form-select.is-invalid{z-index:2}.was-validated .input-group .form-control:invalid:focus,.input-group .form-control.is-invalid:focus,.was-validated .input-group .form-select:invalid:focus,.input-group .form-select.is-invalid:focus{z-index:3}.btn{display:inline-block;font-weight:400;line-height:1.5;color:#212529;text-align:center;text-decoration:none;vertical-align:middle;cursor:pointer;user-select:none;background-color:transparent;border:1px solid transparent;padding:.375rem .75rem;font-size:1rem;border-radius:.25rem;transition:color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out}@media(prefers-reduced-motion: reduce){.btn{transition:none}}.btn:hover{color:#212529}.btn-check:focus+.btn,.btn:focus{outline:0;box-shadow:0 0 0 .25rem rgba(13,110,253,.25)}.btn:disabled,.btn.disabled,fieldset:disabled .btn{pointer-events:none;opacity:.65}.btn-primary{color:#fff;background-color:#0d6efd;border-color:#0d6efd}.btn-primary:hover{color:#fff;background-color:#0b5ed7;border-color:#0a58ca}.btn-check:focus+.btn-primary,.btn-primary:focus{color:#fff;background-color:#0b5ed7;border-color:#0a58ca;box-shadow:0 0 0 .25rem rgba(49,132,253,.5)}.btn-check:checked+.btn-primary,.btn-check:active+.btn-primary,.btn-primary:active,.btn-primary.active,.show>.btn-primary.dropdown-toggle{color:#fff;background-color:#0a58ca;border-color:#0a53be}.btn-check:checked+.btn-primary:focus,.btn-check:active+.btn-primary:focus,.btn-primary:active:focus,.btn-primary.active:focus,.show>.btn-primary.dropdown-toggle:focus{box-shadow:0 0 0 .25rem rgba(49,132,253,.5)}.btn-primary:disabled,.btn-primary.disabled{color:#fff;background-color:#0d6efd;border-color:#0d6efd}.btn-secondary{color:#fff;background-color:#6c757d;border-color:#6c757d}.btn-secondary:hover{color:#fff;background-color:#5c636a;border-color:#565e64}.btn-check:focus+.btn-secondary,.btn-secondary:focus{color:#fff;background-color:#5c636a;border-color:#565e64;box-shadow:0 0 0 .25rem rgba(130,138,145,.5)}.btn-check:checked+.btn-secondary,.btn-check:active+.btn-secondary,.btn-secondary:active,.btn-secondary.active,.show>.btn-secondary.dropdown-toggle{color:#fff;background-color:#565e64;border-color:#51585e}.btn-check:checked+.btn-secondary:focus,.btn-check:active+.btn-secondary:focus,.btn-secondary:active:focus,.btn-secondary.active:focus,.show>.btn-secondary.dropdown-toggle:focus{box-shadow:0 0 0 .25rem rgba(130,138,145,.5)}.btn-secondary:disabled,.btn-secondary.disabled{color:#fff;background-color:#6c757d;border-color:#6c757d}.btn-success{color:#fff;background-color:#198754;border-color:#198754}.btn-success:hover{color:#fff;background-color:#157347;border-color:#146c43}.btn-check:focus+.btn-success,.btn-success:focus{color:#fff;background-color:#157347;border-color:#146c43;box-shadow:0 0 0 .25rem rgba(60,153,110,.5)}.btn-check:checked+.btn-success,.btn-check:active+.btn-success,.btn-success:active,.btn-success.active,.show>.btn-success.dropdown-toggle{color:#fff;background-color:#146c43;border-color:#13653f}.btn-check:checked+.btn-success:focus,.btn-check:active+.btn-success:focus,.btn-success:active:focus,.btn-success.active:focus,.show>.btn-success.dropdown-toggle:focus{box-shadow:0 0 0 .25rem rgba(60,153,110,.5)}.btn-success:disabled,.btn-success.disabled{color:#fff;background-color:#198754;border-color:#198754}.btn-info{color:#000;background-color:#0dcaf0;border-color:#0dcaf0}.btn-info:hover{color:#000;background-color:#31d2f2;border-color:#25cff2}.btn-check:focus+.btn-info,.btn-info:focus{color:#000;background-color:#31d2f2;border-color:#25cff2;box-shadow:0 0 0 .25rem rgba(11,172,204,.5)}.btn-check:checked+.btn-info,.btn-check:active+.btn-info,.btn-info:active,.btn-info.active,.show>.btn-info.dropdown-toggle{color:#000;background-color:#3dd5f3;border-color:#25cff2}.btn-check:checked+.btn-info:focus,.btn-check:active+.btn-info:focus,.btn-info:active:focus,.btn-info.active:focus,.show>.btn-info.dropdown-toggle:focus{box-shadow:0 0 0 .25rem rgba(11,172,204,.5)}.btn-info:disabled,.btn-info.disabled{color:#000;background-color:#0dcaf0;border-color:#0dcaf0}.btn-warning{color:#000;background-color:#ffc107;border-color:#ffc107}.btn-warning:hover{color:#000;background-color:#ffca2c;border-color:#ffc720}.btn-check:focus+.btn-warning,.btn-warning:focus{color:#000;background-color:#ffca2c;border-color:#ffc720;box-shadow:0 0 0 .25rem rgba(217,164,6,.5)}.btn-check:checked+.btn-warning,.btn-check:active+.btn-warning,.btn-warning:active,.btn-warning.active,.show>.btn-warning.dropdown-toggle{color:#000;background-color:#ffcd39;border-color:#ffc720}.btn-check:checked+.btn-warning:focus,.btn-check:active+.btn-warning:focus,.btn-warning:active:focus,.btn-warning.active:focus,.show>.btn-warning.dropdown-toggle:focus{box-shadow:0 0 0 .25rem rgba(217,164,6,.5)}.btn-warning:disabled,.btn-warning.disabled{color:#000;background-color:#ffc107;border-color:#ffc107}.btn-danger{color:#fff;background-color:#dc3545;border-color:#dc3545}.btn-danger:hover{color:#fff;background-color:#bb2d3b;border-color:#b02a37}.btn-check:focus+.btn-danger,.btn-danger:focus{color:#fff;background-color:#bb2d3b;border-color:#b02a37;box-shadow:0 0 0 .25rem rgba(225,83,97,.5)}.btn-check:checked+.btn-danger,.btn-check:active+.btn-danger,.btn-danger:active,.btn-danger.active,.show>.btn-danger.dropdown-toggle{color:#fff;background-color:#b02a37;border-color:#a52834}.btn-check:checked+.btn-danger:focus,.btn-check:active+.btn-danger:focus,.btn-danger:active:focus,.btn-danger.active:focus,.show>.btn-danger.dropdown-toggle:focus{box-shadow:0 0 0 .25rem rgba(225,83,97,.5)}.btn-danger:disabled,.btn-danger.disabled{color:#fff;background-color:#dc3545;border-color:#dc3545}.btn-light{color:#000;background-color:#f8f9fa;border-color:#f8f9fa}.btn-light:hover{color:#000;background-color:#f9fafb;border-color:#f9fafb}.btn-check:focus+.btn-light,.btn-light:focus{color:#000;background-color:#f9fafb;border-color:#f9fafb;box-shadow:0 0 0 .25rem rgba(211,212,213,.5)}.btn-check:checked+.btn-light,.btn-check:active+.btn-light,.btn-light:active,.btn-light.active,.show>.btn-light.dropdown-toggle{color:#000;background-color:#f9fafb;border-color:#f9fafb}.btn-check:checked+.btn-light:focus,.btn-check:active+.btn-light:focus,.btn-light:active:focus,.btn-light.active:focus,.show>.btn-light.dropdown-toggle:focus{box-shadow:0 0 0 .25rem rgba(211,212,213,.5)}.btn-light:disabled,.btn-light.disabled{color:#000;background-color:#f8f9fa;border-color:#f8f9fa}.btn-dark{color:#fff;background-color:#212529;border-color:#212529}.btn-dark:hover{color:#fff;background-color:#1c1f23;border-color:#1a1e21}.btn-check:focus+.btn-dark,.btn-dark:focus{color:#fff;background-color:#1c1f23;border-color:#1a1e21;box-shadow:0 0 0 .25rem rgba(66,70,73,.5)}.btn-check:checked+.btn-dark,.btn-check:active+.btn-dark,.btn-dark:active,.btn-dark.active,.show>.btn-dark.dropdown-toggle{color:#fff;background-color:#1a1e21;border-color:#191c1f}.btn-check:checked+.btn-dark:focus,.btn-check:active+.btn-dark:focus,.btn-dark:active:focus,.btn-dark.active:focus,.show>.btn-dark.dropdown-toggle:focus{box-shadow:0 0 0 .25rem rgba(66,70,73,.5)}.btn-dark:disabled,.btn-dark.disabled{color:#fff;background-color:#212529;border-color:#212529}.btn-outline-primary{color:#0d6efd;border-color:#0d6efd}.btn-outline-primary:hover{color:#fff;background-color:#0d6efd;border-color:#0d6efd}.btn-check:focus+.btn-outline-primary,.btn-outline-primary:focus{box-shadow:0 0 0 .25rem rgba(13,110,253,.5)}.btn-check:checked+.btn-outline-primary,.btn-check:active+.btn-outline-primary,.btn-outline-primary:active,.btn-outline-primary.active,.btn-outline-primary.dropdown-toggle.show{color:#fff;background-color:#0d6efd;border-color:#0d6efd}.btn-check:checked+.btn-outline-primary:focus,.btn-check:active+.btn-outline-primary:focus,.btn-outline-primary:active:focus,.btn-outline-primary.active:focus,.btn-outline-primary.dropdown-toggle.show:focus{box-shadow:0 0 0 .25rem rgba(13,110,253,.5)}.btn-outline-primary:disabled,.btn-outline-primary.disabled{color:#0d6efd;background-color:transparent}.btn-outline-secondary{color:#6c757d;border-color:#6c757d}.btn-outline-secondary:hover{color:#fff;background-color:#6c757d;border-color:#6c757d}.btn-check:focus+.btn-outline-secondary,.btn-outline-secondary:focus{box-shadow:0 0 0 .25rem rgba(108,117,125,.5)}.btn-check:checked+.btn-outline-secondary,.btn-check:active+.btn-outline-secondary,.btn-outline-secondary:active,.btn-outline-secondary.active,.btn-outline-secondary.dropdown-toggle.show{color:#fff;background-color:#6c757d;border-color:#6c757d}.btn-check:checked+.btn-outline-secondary:focus,.btn-check:active+.btn-outline-secondary:focus,.btn-outline-secondary:active:focus,.btn-outline-secondary.active:focus,.btn-outline-secondary.dropdown-toggle.show:focus{box-shadow:0 0 0 .25rem rgba(108,117,125,.5)}.btn-outline-secondary:disabled,.btn-outline-secondary.disabled{color:#6c757d;background-color:transparent}.btn-outline-success{color:#198754;border-color:#198754}.btn-outline-success:hover{color:#fff;background-color:#198754;border-color:#198754}.btn-check:focus+.btn-outline-success,.btn-outline-success:focus{box-shadow:0 0 0 .25rem rgba(25,135,84,.5)}.btn-check:checked+.btn-outline-success,.btn-check:active+.btn-outline-success,.btn-outline-success:active,.btn-outline-success.active,.btn-outline-success.dropdown-toggle.show{color:#fff;background-color:#198754;border-color:#198754}.btn-check:checked+.btn-outline-success:focus,.btn-check:active+.btn-outline-success:focus,.btn-outline-success:active:focus,.btn-outline-success.active:focus,.btn-outline-success.dropdown-toggle.show:focus{box-shadow:0 0 0 .25rem rgba(25,135,84,.5)}.btn-outline-success:disabled,.btn-outline-success.disabled{color:#198754;background-color:transparent}.btn-outline-info{color:#0dcaf0;border-color:#0dcaf0}.btn-outline-info:hover{color:#000;background-color:#0dcaf0;border-color:#0dcaf0}.btn-check:focus+.btn-outline-info,.btn-outline-info:focus{box-shadow:0 0 0 .25rem rgba(13,202,240,.5)}.btn-check:checked+.btn-outline-info,.btn-check:active+.btn-outline-info,.btn-outline-info:active,.btn-outline-info.active,.btn-outline-info.dropdown-toggle.show{color:#000;background-color:#0dcaf0;border-color:#0dcaf0}.btn-check:checked+.btn-outline-info:focus,.btn-check:active+.btn-outline-info:focus,.btn-outline-info:active:focus,.btn-outline-info.active:focus,.btn-outline-info.dropdown-toggle.show:focus{box-shadow:0 0 0 .25rem rgba(13,202,240,.5)}.btn-outline-info:disabled,.btn-outline-info.disabled{color:#0dcaf0;background-color:transparent}.btn-outline-warning{color:#ffc107;border-color:#ffc107}.btn-outline-warning:hover{color:#000;background-color:#ffc107;border-color:#ffc107}.btn-check:focus+.btn-outline-warning,.btn-outline-warning:focus{box-shadow:0 0 0 .25rem rgba(255,193,7,.5)}.btn-check:checked+.btn-outline-warning,.btn-check:active+.btn-outline-warning,.btn-outline-warning:active,.btn-outline-warning.active,.btn-outline-warning.dropdown-toggle.show{color:#000;background-color:#ffc107;border-color:#ffc107}.btn-check:checked+.btn-outline-warning:focus,.btn-check:active+.btn-outline-warning:focus,.btn-outline-warning:active:focus,.btn-outline-warning.active:focus,.btn-outline-warning.dropdown-toggle.show:focus{box-shadow:0 0 0 .25rem rgba(255,193,7,.5)}.btn-outline-warning:disabled,.btn-outline-warning.disabled{color:#ffc107;background-color:transparent}.btn-outline-danger{color:#dc3545;border-color:#dc3545}.btn-outline-danger:hover{color:#fff;background-color:#dc3545;border-color:#dc3545}.btn-check:focus+.btn-outline-danger,.btn-outline-danger:focus{box-shadow:0 0 0 .25rem rgba(220,53,69,.5)}.btn-check:checked+.btn-outline-danger,.btn-check:active+.btn-outline-danger,.btn-outline-danger:active,.btn-outline-danger.active,.btn-outline-danger.dropdown-toggle.show{color:#fff;background-color:#dc3545;border-color:#dc3545}.btn-check:checked+.btn-outline-danger:focus,.btn-check:active+.btn-outline-danger:focus,.btn-outline-danger:active:focus,.btn-outline-danger.active:focus,.btn-outline-danger.dropdown-toggle.show:focus{box-shadow:0 0 0 .25rem rgba(220,53,69,.5)}.btn-outline-danger:disabled,.btn-outline-danger.disabled{color:#dc3545;background-color:transparent}.btn-outline-light{color:#f8f9fa;border-color:#f8f9fa}.btn-outline-light:hover{color:#000;background-color:#f8f9fa;border-color:#f8f9fa}.btn-check:focus+.btn-outline-light,.btn-outline-light:focus{box-shadow:0 0 0 .25rem rgba(248,249,250,.5)}.btn-check:checked+.btn-outline-light,.btn-check:active+.btn-outline-light,.btn-outline-light:active,.btn-outline-light.active,.btn-outline-light.dropdown-toggle.show{color:#000;background-color:#f8f9fa;border-color:#f8f9fa}.btn-check:checked+.btn-outline-light:focus,.btn-check:active+.btn-outline-light:focus,.btn-outline-light:active:focus,.btn-outline-light.active:focus,.btn-outline-light.dropdown-toggle.show:focus{box-shadow:0 0 0 .25rem rgba(248,249,250,.5)}.btn-outline-light:disabled,.btn-outline-light.disabled{color:#f8f9fa;background-color:transparent}.btn-outline-dark{color:#212529;border-color:#212529}.btn-outline-dark:hover{color:#fff;background-color:#212529;border-color:#212529}.btn-check:focus+.btn-outline-dark,.btn-outline-dark:focus{box-shadow:0 0 0 .25rem rgba(33,37,41,.5)}.btn-check:checked+.btn-outline-dark,.btn-check:active+.btn-outline-dark,.btn-outline-dark:active,.btn-outline-dark.active,.btn-outline-dark.dropdown-toggle.show{color:#fff;background-color:#212529;border-color:#212529}.btn-check:checked+.btn-outline-dark:focus,.btn-check:active+.btn-outline-dark:focus,.btn-outline-dark:active:focus,.btn-outline-dark.active:focus,.btn-outline-dark.dropdown-toggle.show:focus{box-shadow:0 0 0 .25rem rgba(33,37,41,.5)}.btn-outline-dark:disabled,.btn-outline-dark.disabled{color:#212529;background-color:transparent}.btn-link{font-weight:400;color:#0d6efd;text-decoration:underline}.btn-link:hover{color:#0a58ca}.btn-link:disabled,.btn-link.disabled{color:#6c757d}.btn-lg,.btn-group-lg>.btn{padding:.5rem 1rem;font-size:1.25rem;border-radius:.3rem}.btn-sm,.btn-group-sm>.btn{padding:.25rem .5rem;font-size:0.875rem;border-radius:.2rem}.fade{transition:opacity .15s linear}@media(prefers-reduced-motion: reduce){.fade{transition:none}}.fade:not(.show){opacity:0}.collapse:not(.show){display:none}.collapsing{height:0;overflow:hidden;transition:height .35s ease}@media(prefers-reduced-motion: reduce){.collapsing{transition:none}}.collapsing.collapse-horizontal{width:0;height:auto;transition:width .35s ease}@media(prefers-reduced-motion: reduce){.collapsing.collapse-horizontal{transition:none}}.dropup,.dropend,.dropdown,.dropstart{position:relative}.dropdown-toggle{white-space:nowrap}.dropdown-toggle::after{display:inline-block;margin-left:.255em;vertical-align:.255em;content:"";border-top:.3em solid;border-right:.3em solid transparent;border-bottom:0;border-left:.3em solid transparent}.dropdown-toggle:empty::after{margin-left:0}.dropdown-menu{position:absolute;z-index:1000;display:none;min-width:10rem;padding:.5rem 0;margin:0;font-size:1rem;color:#212529;text-align:left;list-style:none;background-color:#fff;background-clip:padding-box;border:1px solid rgba(0,0,0,.15);border-radius:.25rem}.dropdown-menu[data-bs-popper]{top:100%;left:0;margin-top:.125rem}.dropdown-menu-start{--bs-position: start}.dropdown-menu-start[data-bs-popper]{right:auto;left:0}.dropdown-menu-end{--bs-position: end}.dropdown-menu-end[data-bs-popper]{right:0;left:auto}@media(min-width: 576px){.dropdown-menu-sm-start{--bs-position: start}.dropdown-menu-sm-start[data-bs-popper]{right:auto;left:0}.dropdown-menu-sm-end{--bs-position: end}.dropdown-menu-sm-end[data-bs-popper]{right:0;left:auto}}@media(min-width: 768px){.dropdown-menu-md-start{--bs-position: start}.dropdown-menu-md-start[data-bs-popper]{right:auto;left:0}.dropdown-menu-md-end{--bs-position: end}.dropdown-menu-md-end[data-bs-popper]{right:0;left:auto}}@media(min-width: 992px){.dropdown-menu-lg-start{--bs-position: start}.dropdown-menu-lg-start[data-bs-popper]{right:auto;left:0}.dropdown-menu-lg-end{--bs-position: end}.dropdown-menu-lg-end[data-bs-popper]{right:0;left:auto}}@media(min-width: 1200px){.dropdown-menu-xl-start{--bs-position: start}.dropdown-menu-xl-start[data-bs-popper]{right:auto;left:0}.dropdown-menu-xl-end{--bs-position: end}.dropdown-menu-xl-end[data-bs-popper]{right:0;left:auto}}@media(min-width: 1400px){.dropdown-menu-xxl-start{--bs-position: start}.dropdown-menu-xxl-start[data-bs-popper]{right:auto;left:0}.dropdown-menu-xxl-end{--bs-position: end}.dropdown-menu-xxl-end[data-bs-popper]{right:0;left:auto}}.dropup .dropdown-menu[data-bs-popper]{top:auto;bottom:100%;margin-top:0;margin-bottom:.125rem}.dropup .dropdown-toggle::after{display:inline-block;margin-left:.255em;vertical-align:.255em;content:"";border-top:0;border-right:.3em solid transparent;border-bottom:.3em solid;border-left:.3em solid transparent}.dropup .dropdown-toggle:empty::after{margin-left:0}.dropend .dropdown-menu[data-bs-popper]{top:0;right:auto;left:100%;margin-top:0;margin-left:.125rem}.dropend .dropdown-toggle::after{display:inline-block;margin-left:.255em;vertical-align:.255em;content:"";border-top:.3em solid transparent;border-right:0;border-bottom:.3em solid transparent;border-left:.3em solid}.dropend .dropdown-toggle:empty::after{margin-left:0}.dropend .dropdown-toggle::after{vertical-align:0}.dropstart .dropdown-menu[data-bs-popper]{top:0;right:100%;left:auto;margin-top:0;margin-right:.125rem}.dropstart .dropdown-toggle::after{display:inline-block;margin-left:.255em;vertical-align:.255em;content:""}.dropstart .dropdown-toggle::after{display:none}.dropstart .dropdown-toggle::before{display:inline-block;margin-right:.255em;vertical-align:.255em;content:"";border-top:.3em solid transparent;border-right:.3em solid;border-bottom:.3em solid transparent}.dropstart .dropdown-toggle:empty::after{margin-left:0}.dropstart .dropdown-toggle::before{vertical-align:0}.dropdown-divider{height:0;margin:.5rem 0;overflow:hidden;border-top:1px solid rgba(0,0,0,.15)}.dropdown-item{display:block;width:100%;padding:.25rem 1rem;clear:both;font-weight:400;color:#212529;text-align:inherit;text-decoration:none;white-space:nowrap;background-color:transparent;border:0}.dropdown-item:hover,.dropdown-item:focus{color:#1e2125;background-color:#e9ecef}.dropdown-item.active,.dropdown-item:active{color:#fff;text-decoration:none;background-color:#0d6efd}.dropdown-item.disabled,.dropdown-item:disabled{color:#adb5bd;pointer-events:none;background-color:transparent}.dropdown-menu.show{display:block}.dropdown-header{display:block;padding:.5rem 1rem;margin-bottom:0;font-size:0.875rem;color:#6c757d;white-space:nowrap}.dropdown-item-text{display:block;padding:.25rem 1rem;color:#212529}.dropdown-menu-dark{color:#dee2e6;background-color:#343a40;border-color:rgba(0,0,0,.15)}.dropdown-menu-dark .dropdown-item{color:#dee2e6}.dropdown-menu-dark .dropdown-item:hover,.dropdown-menu-dark .dropdown-item:focus{color:#fff;background-color:rgba(255,255,255,.15)}.dropdown-menu-dark .dropdown-item.active,.dropdown-menu-dark .dropdown-item:active{color:#fff;background-color:#0d6efd}.dropdown-menu-dark .dropdown-item.disabled,.dropdown-menu-dark .dropdown-item:disabled{color:#adb5bd}.dropdown-menu-dark .dropdown-divider{border-color:rgba(0,0,0,.15)}.dropdown-menu-dark .dropdown-item-text{color:#dee2e6}.dropdown-menu-dark .dropdown-header{color:#adb5bd}.btn-group,.btn-group-vertical{position:relative;display:inline-flex;vertical-align:middle}.btn-group>.btn,.btn-group-vertical>.btn{position:relative;flex:1 1 auto}.btn-group>.btn-check:checked+.btn,.btn-group>.btn-check:focus+.btn,.btn-group>.btn:hover,.btn-group>.btn:focus,.btn-group>.btn:active,.btn-group>.btn.active,.btn-group-vertical>.btn-check:checked+.btn,.btn-group-vertical>.btn-check:focus+.btn,.btn-group-vertical>.btn:hover,.btn-group-vertical>.btn:focus,.btn-group-vertical>.btn:active,.btn-group-vertical>.btn.active{z-index:1}.btn-toolbar{display:flex;flex-wrap:wrap;justify-content:flex-start}.btn-toolbar .input-group{width:auto}.btn-group>.btn:not(:first-child),.btn-group>.btn-group:not(:first-child){margin-left:-1px}.btn-group>.btn:not(:last-child):not(.dropdown-toggle),.btn-group>.btn-group:not(:last-child)>.btn{border-top-right-radius:0;border-bottom-right-radius:0}.btn-group>.btn:nth-child(n+3),.btn-group>:not(.btn-check)+.btn,.btn-group>.btn-group:not(:first-child)>.btn{border-top-left-radius:0;border-bottom-left-radius:0}.dropdown-toggle-split{padding-right:.5625rem;padding-left:.5625rem}.dropdown-toggle-split::after,.dropup .dropdown-toggle-split::after,.dropend .dropdown-toggle-split::after{margin-left:0}.dropstart .dropdown-toggle-split::before{margin-right:0}.btn-sm+.dropdown-toggle-split,.btn-group-sm>.btn+.dropdown-toggle-split{padding-right:.375rem;padding-left:.375rem}.btn-lg+.dropdown-toggle-split,.btn-group-lg>.btn+.dropdown-toggle-split{padding-right:.75rem;padding-left:.75rem}.btn-group-vertical{flex-direction:column;align-items:flex-start;justify-content:center}.btn-group-vertical>.btn,.btn-group-vertical>.btn-group{width:100%}.btn-group-vertical>.btn:not(:first-child),.btn-group-vertical>.btn-group:not(:first-child){margin-top:-1px}.btn-group-vertical>.btn:not(:last-child):not(.dropdown-toggle),.btn-group-vertical>.btn-group:not(:last-child)>.btn{border-bottom-right-radius:0;border-bottom-left-radius:0}.btn-group-vertical>.btn~.btn,.btn-group-vertical>.btn-group:not(:first-child)>.btn{border-top-left-radius:0;border-top-right-radius:0}.nav{display:flex;flex-wrap:wrap;padding-left:0;margin-bottom:0;list-style:none}.nav-link{display:block;padding:.5rem 1rem;color:#0d6efd;text-decoration:none;transition:color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out}@media(prefers-reduced-motion: reduce){.nav-link{transition:none}}.nav-link:hover,.nav-link:focus{color:#0a58ca}.nav-link.disabled{color:#6c757d;pointer-events:none;cursor:default}.nav-tabs{border-bottom:1px solid #dee2e6}.nav-tabs .nav-link{margin-bottom:-1px;background:none;border:1px solid transparent;border-top-left-radius:.25rem;border-top-right-radius:.25rem}.nav-tabs .nav-link:hover,.nav-tabs .nav-link:focus{border-color:#e9ecef #e9ecef #dee2e6;isolation:isolate}.nav-tabs .nav-link.disabled{color:#6c757d;background-color:transparent;border-color:transparent}.nav-tabs .nav-link.active,.nav-tabs .nav-item.show .nav-link{color:#495057;background-color:#fff;border-color:#dee2e6 #dee2e6 #fff}.nav-tabs .dropdown-menu{margin-top:-1px;border-top-left-radius:0;border-top-right-radius:0}.nav-pills .nav-link{background:none;border:0;border-radius:.25rem}.nav-pills .nav-link.active,.nav-pills .show>.nav-link{color:#fff;background-color:#0d6efd}.nav-fill>.nav-link,.nav-fill .nav-item{flex:1 1 auto;text-align:center}.nav-justified>.nav-link,.nav-justified .nav-item{flex-basis:0;flex-grow:1;text-align:center}.nav-fill .nav-item .nav-link,.nav-justified .nav-item .nav-link{width:100%}.tab-content>.tab-pane{display:none}.tab-content>.active{display:block}.navbar{position:relative;display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;padding-top:.5rem;padding-bottom:.5rem}.navbar>.container,.navbar>.container-fluid,.navbar>.container-sm,.navbar>.container-md,.navbar>.container-lg,.navbar>.container-xl,.navbar>.container-xxl{display:flex;flex-wrap:inherit;align-items:center;justify-content:space-between}.navbar-brand{padding-top:.3125rem;padding-bottom:.3125rem;margin-right:1rem;font-size:1.25rem;text-decoration:none;white-space:nowrap}.navbar-nav{display:flex;flex-direction:column;padding-left:0;margin-bottom:0;list-style:none}.navbar-nav .nav-link{padding-right:0;padding-left:0}.navbar-nav .dropdown-menu{position:static}.navbar-text{padding-top:.5rem;padding-bottom:.5rem}.navbar-collapse{flex-basis:100%;flex-grow:1;align-items:center}.navbar-toggler{padding:.25rem .75rem;font-size:1.25rem;line-height:1;background-color:transparent;border:1px solid transparent;border-radius:.25rem;transition:box-shadow .15s ease-in-out}@media(prefers-reduced-motion: reduce){.navbar-toggler{transition:none}}.navbar-toggler:hover{text-decoration:none}.navbar-toggler:focus{text-decoration:none;outline:0;box-shadow:0 0 0 .25rem}.navbar-toggler-icon{display:inline-block;width:1.5em;height:1.5em;vertical-align:middle;background-repeat:no-repeat;background-position:center;background-size:100%}.navbar-nav-scroll{max-height:var(--bs-scroll-height, 75vh);overflow-y:auto}@media(min-width: 576px){.navbar-expand-sm{flex-wrap:nowrap;justify-content:flex-start}.navbar-expand-sm .navbar-nav{flex-direction:row}.navbar-expand-sm .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-sm .navbar-nav .nav-link{padding-right:.5rem;padding-left:.5rem}.navbar-expand-sm .navbar-nav-scroll{overflow:visible}.navbar-expand-sm .navbar-collapse{display:flex !important;flex-basis:auto}.navbar-expand-sm .navbar-toggler{display:none}.navbar-expand-sm .offcanvas-header{display:none}.navbar-expand-sm .offcanvas{position:inherit;bottom:0;z-index:1000;flex-grow:1;visibility:visible !important;background-color:transparent;border-right:0;border-left:0;transition:none;transform:none}.navbar-expand-sm .offcanvas-top,.navbar-expand-sm .offcanvas-bottom{height:auto;border-top:0;border-bottom:0}.navbar-expand-sm .offcanvas-body{display:flex;flex-grow:0;padding:0;overflow-y:visible}}@media(min-width: 768px){.navbar-expand-md{flex-wrap:nowrap;justify-content:flex-start}.navbar-expand-md .navbar-nav{flex-direction:row}.navbar-expand-md .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-md .navbar-nav .nav-link{padding-right:.5rem;padding-left:.5rem}.navbar-expand-md .navbar-nav-scroll{overflow:visible}.navbar-expand-md .navbar-collapse{display:flex !important;flex-basis:auto}.navbar-expand-md .navbar-toggler{display:none}.navbar-expand-md .offcanvas-header{display:none}.navbar-expand-md .offcanvas{position:inherit;bottom:0;z-index:1000;flex-grow:1;visibility:visible !important;background-color:transparent;border-right:0;border-left:0;transition:none;transform:none}.navbar-expand-md .offcanvas-top,.navbar-expand-md .offcanvas-bottom{height:auto;border-top:0;border-bottom:0}.navbar-expand-md .offcanvas-body{display:flex;flex-grow:0;padding:0;overflow-y:visible}}@media(min-width: 992px){.navbar-expand-lg{flex-wrap:nowrap;justify-content:flex-start}.navbar-expand-lg .navbar-nav{flex-direction:row}.navbar-expand-lg .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-lg .navbar-nav .nav-link{padding-right:.5rem;padding-left:.5rem}.navbar-expand-lg .navbar-nav-scroll{overflow:visible}.navbar-expand-lg .navbar-collapse{display:flex !important;flex-basis:auto}.navbar-expand-lg .navbar-toggler{display:none}.navbar-expand-lg .offcanvas-header{display:none}.navbar-expand-lg .offcanvas{position:inherit;bottom:0;z-index:1000;flex-grow:1;visibility:visible !important;background-color:transparent;border-right:0;border-left:0;transition:none;transform:none}.navbar-expand-lg .offcanvas-top,.navbar-expand-lg .offcanvas-bottom{height:auto;border-top:0;border-bottom:0}.navbar-expand-lg .offcanvas-body{display:flex;flex-grow:0;padding:0;overflow-y:visible}}@media(min-width: 1200px){.navbar-expand-xl{flex-wrap:nowrap;justify-content:flex-start}.navbar-expand-xl .navbar-nav{flex-direction:row}.navbar-expand-xl .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-xl .navbar-nav .nav-link{padding-right:.5rem;padding-left:.5rem}.navbar-expand-xl .navbar-nav-scroll{overflow:visible}.navbar-expand-xl .navbar-collapse{display:flex !important;flex-basis:auto}.navbar-expand-xl .navbar-toggler{display:none}.navbar-expand-xl .offcanvas-header{display:none}.navbar-expand-xl .offcanvas{position:inherit;bottom:0;z-index:1000;flex-grow:1;visibility:visible !important;background-color:transparent;border-right:0;border-left:0;transition:none;transform:none}.navbar-expand-xl .offcanvas-top,.navbar-expand-xl .offcanvas-bottom{height:auto;border-top:0;border-bottom:0}.navbar-expand-xl .offcanvas-body{display:flex;flex-grow:0;padding:0;overflow-y:visible}}@media(min-width: 1400px){.navbar-expand-xxl{flex-wrap:nowrap;justify-content:flex-start}.navbar-expand-xxl .navbar-nav{flex-direction:row}.navbar-expand-xxl .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-xxl .navbar-nav .nav-link{padding-right:.5rem;padding-left:.5rem}.navbar-expand-xxl .navbar-nav-scroll{overflow:visible}.navbar-expand-xxl .navbar-collapse{display:flex !important;flex-basis:auto}.navbar-expand-xxl .navbar-toggler{display:none}.navbar-expand-xxl .offcanvas-header{display:none}.navbar-expand-xxl .offcanvas{position:inherit;bottom:0;z-index:1000;flex-grow:1;visibility:visible !important;background-color:transparent;border-right:0;border-left:0;transition:none;transform:none}.navbar-expand-xxl .offcanvas-top,.navbar-expand-xxl .offcanvas-bottom{height:auto;border-top:0;border-bottom:0}.navbar-expand-xxl .offcanvas-body{display:flex;flex-grow:0;padding:0;overflow-y:visible}}.navbar-expand{flex-wrap:nowrap;justify-content:flex-start}.navbar-expand .navbar-nav{flex-direction:row}.navbar-expand .navbar-nav .dropdown-menu{position:absolute}.navbar-expand .navbar-nav .nav-link{padding-right:.5rem;padding-left:.5rem}.navbar-expand .navbar-nav-scroll{overflow:visible}.navbar-expand .navbar-collapse{display:flex !important;flex-basis:auto}.navbar-expand .navbar-toggler{display:none}.navbar-expand .offcanvas-header{display:none}.navbar-expand .offcanvas{position:inherit;bottom:0;z-index:1000;flex-grow:1;visibility:visible !important;background-color:transparent;border-right:0;border-left:0;transition:none;transform:none}.navbar-expand .offcanvas-top,.navbar-expand .offcanvas-bottom{height:auto;border-top:0;border-bottom:0}.navbar-expand .offcanvas-body{display:flex;flex-grow:0;padding:0;overflow-y:visible}.navbar-light .navbar-brand{color:rgba(0,0,0,.9)}.navbar-light .navbar-brand:hover,.navbar-light .navbar-brand:focus{color:rgba(0,0,0,.9)}.navbar-light .navbar-nav .nav-link{color:rgba(0,0,0,.55)}.navbar-light .navbar-nav .nav-link:hover,.navbar-light .navbar-nav .nav-link:focus{color:rgba(0,0,0,.7)}.navbar-light .navbar-nav .nav-link.disabled{color:rgba(0,0,0,.3)}.navbar-light .navbar-nav .show>.nav-link,.navbar-light .navbar-nav .nav-link.active{color:rgba(0,0,0,.9)}.navbar-light .navbar-toggler{color:rgba(0,0,0,.55);border-color:rgba(0,0,0,.1)}.navbar-light .navbar-toggler-icon{background-image:url('+S+")}.navbar-light .navbar-text{color:rgba(0,0,0,.55)}.navbar-light .navbar-text a,.navbar-light .navbar-text a:hover,.navbar-light .navbar-text a:focus{color:rgba(0,0,0,.9)}.navbar-dark .navbar-brand{color:#fff}.navbar-dark .navbar-brand:hover,.navbar-dark .navbar-brand:focus{color:#fff}.navbar-dark .navbar-nav .nav-link{color:rgba(255,255,255,.55)}.navbar-dark .navbar-nav .nav-link:hover,.navbar-dark .navbar-nav .nav-link:focus{color:rgba(255,255,255,.75)}.navbar-dark .navbar-nav .nav-link.disabled{color:rgba(255,255,255,.25)}.navbar-dark .navbar-nav .show>.nav-link,.navbar-dark .navbar-nav .nav-link.active{color:#fff}.navbar-dark .navbar-toggler{color:rgba(255,255,255,.55);border-color:rgba(255,255,255,.1)}.navbar-dark .navbar-toggler-icon{background-image:url("+F+")}.navbar-dark .navbar-text{color:rgba(255,255,255,.55)}.navbar-dark .navbar-text a,.navbar-dark .navbar-text a:hover,.navbar-dark .navbar-text a:focus{color:#fff}.card{position:relative;display:flex;flex-direction:column;min-width:0;word-wrap:break-word;background-color:#fff;background-clip:border-box;border:1px solid rgba(0,0,0,.125);border-radius:.25rem}.card>hr{margin-right:0;margin-left:0}.card>.list-group{border-top:inherit;border-bottom:inherit}.card>.list-group:first-child{border-top-width:0;border-top-left-radius:calc(0.25rem - 1px);border-top-right-radius:calc(0.25rem - 1px)}.card>.list-group:last-child{border-bottom-width:0;border-bottom-right-radius:calc(0.25rem - 1px);border-bottom-left-radius:calc(0.25rem - 1px)}.card>.card-header+.list-group,.card>.list-group+.card-footer{border-top:0}.card-body{flex:1 1 auto;padding:1rem 1rem}.card-title{margin-bottom:.5rem}.card-subtitle{margin-top:-0.25rem;margin-bottom:0}.card-text:last-child{margin-bottom:0}.card-link+.card-link{margin-left:1rem}.card-header{padding:.5rem 1rem;margin-bottom:0;background-color:rgba(0,0,0,.03);border-bottom:1px solid rgba(0,0,0,.125)}.card-header:first-child{border-radius:calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0}.card-footer{padding:.5rem 1rem;background-color:rgba(0,0,0,.03);border-top:1px solid rgba(0,0,0,.125)}.card-footer:last-child{border-radius:0 0 calc(0.25rem - 1px) calc(0.25rem - 1px)}.card-header-tabs{margin-right:-0.5rem;margin-bottom:-0.5rem;margin-left:-0.5rem;border-bottom:0}.card-header-pills{margin-right:-0.5rem;margin-left:-0.5rem}.card-img-overlay{position:absolute;top:0;right:0;bottom:0;left:0;padding:1rem;border-radius:calc(0.25rem - 1px)}.card-img,.card-img-top,.card-img-bottom{width:100%}.card-img,.card-img-top{border-top-left-radius:calc(0.25rem - 1px);border-top-right-radius:calc(0.25rem - 1px)}.card-img,.card-img-bottom{border-bottom-right-radius:calc(0.25rem - 1px);border-bottom-left-radius:calc(0.25rem - 1px)}.card-group>.card{margin-bottom:.75rem}@media(min-width: 576px){.card-group{display:flex;flex-flow:row wrap}.card-group>.card{flex:1 0 0%;margin-bottom:0}.card-group>.card+.card{margin-left:0;border-left:0}.card-group>.card:not(:last-child){border-top-right-radius:0;border-bottom-right-radius:0}.card-group>.card:not(:last-child) .card-img-top,.card-group>.card:not(:last-child) .card-header{border-top-right-radius:0}.card-group>.card:not(:last-child) .card-img-bottom,.card-group>.card:not(:last-child) .card-footer{border-bottom-right-radius:0}.card-group>.card:not(:first-child){border-top-left-radius:0;border-bottom-left-radius:0}.card-group>.card:not(:first-child) .card-img-top,.card-group>.card:not(:first-child) .card-header{border-top-left-radius:0}.card-group>.card:not(:first-child) .card-img-bottom,.card-group>.card:not(:first-child) .card-footer{border-bottom-left-radius:0}}.accordion-button{position:relative;display:flex;align-items:center;width:100%;padding:1rem 1.25rem;font-size:1rem;color:#212529;text-align:left;background-color:#fff;border:0;border-radius:0;overflow-anchor:none;transition:color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out,border-radius .15s ease}@media(prefers-reduced-motion: reduce){.accordion-button{transition:none}}.accordion-button:not(.collapsed){color:#0c63e4;background-color:#e7f1ff;box-shadow:inset 0 -1px 0 rgba(0,0,0,.125)}.accordion-button:not(.collapsed)::after{background-image:url("+U+');transform:rotate(-180deg)}.accordion-button::after{flex-shrink:0;width:1.25rem;height:1.25rem;margin-left:auto;content:"";background-image:url('+M+');background-repeat:no-repeat;background-size:1.25rem;transition:transform .2s ease-in-out}@media(prefers-reduced-motion: reduce){.accordion-button::after{transition:none}}.accordion-button:hover{z-index:2}.accordion-button:focus{z-index:3;border-color:#86b7fe;outline:0;box-shadow:0 0 0 .25rem rgba(13,110,253,.25)}.accordion-header{margin-bottom:0}.accordion-item{background-color:#fff;border:1px solid rgba(0,0,0,.125)}.accordion-item:first-of-type{border-top-left-radius:.25rem;border-top-right-radius:.25rem}.accordion-item:first-of-type .accordion-button{border-top-left-radius:calc(0.25rem - 1px);border-top-right-radius:calc(0.25rem - 1px)}.accordion-item:not(:first-of-type){border-top:0}.accordion-item:last-of-type{border-bottom-right-radius:.25rem;border-bottom-left-radius:.25rem}.accordion-item:last-of-type .accordion-button.collapsed{border-bottom-right-radius:calc(0.25rem - 1px);border-bottom-left-radius:calc(0.25rem - 1px)}.accordion-item:last-of-type .accordion-collapse{border-bottom-right-radius:.25rem;border-bottom-left-radius:.25rem}.accordion-body{padding:1rem 1.25rem}.accordion-flush .accordion-collapse{border-width:0}.accordion-flush .accordion-item{border-right:0;border-left:0;border-radius:0}.accordion-flush .accordion-item:first-child{border-top:0}.accordion-flush .accordion-item:last-child{border-bottom:0}.accordion-flush .accordion-item .accordion-button{border-radius:0}.breadcrumb{display:flex;flex-wrap:wrap;padding:0 0;margin-bottom:1rem;list-style:none}.breadcrumb-item+.breadcrumb-item{padding-left:.5rem}.breadcrumb-item+.breadcrumb-item::before{float:left;padding-right:.5rem;color:#6c757d;content:var(--bs-breadcrumb-divider, "/") /* rtl: var(--bs-breadcrumb-divider, "/") */}.breadcrumb-item.active{color:#6c757d}.pagination{display:flex;padding-left:0;list-style:none}.page-link{position:relative;display:block;color:#0d6efd;text-decoration:none;background-color:#fff;border:1px solid #dee2e6;transition:color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out}@media(prefers-reduced-motion: reduce){.page-link{transition:none}}.page-link:hover{z-index:2;color:#0a58ca;background-color:#e9ecef;border-color:#dee2e6}.page-link:focus{z-index:3;color:#0a58ca;background-color:#e9ecef;outline:0;box-shadow:0 0 0 .25rem rgba(13,110,253,.25)}.page-item:not(:first-child) .page-link{margin-left:-1px}.page-item.active .page-link{z-index:3;color:#fff;background-color:#0d6efd;border-color:#0d6efd}.page-item.disabled .page-link{color:#6c757d;pointer-events:none;background-color:#fff;border-color:#dee2e6}.page-link{padding:.375rem .75rem}.page-item:first-child .page-link{border-top-left-radius:.25rem;border-bottom-left-radius:.25rem}.page-item:last-child .page-link{border-top-right-radius:.25rem;border-bottom-right-radius:.25rem}.pagination-lg .page-link{padding:.75rem 1.5rem;font-size:1.25rem}.pagination-lg .page-item:first-child .page-link{border-top-left-radius:.3rem;border-bottom-left-radius:.3rem}.pagination-lg .page-item:last-child .page-link{border-top-right-radius:.3rem;border-bottom-right-radius:.3rem}.pagination-sm .page-link{padding:.25rem .5rem;font-size:0.875rem}.pagination-sm .page-item:first-child .page-link{border-top-left-radius:.2rem;border-bottom-left-radius:.2rem}.pagination-sm .page-item:last-child .page-link{border-top-right-radius:.2rem;border-bottom-right-radius:.2rem}.badge{display:inline-block;padding:.35em .65em;font-size:0.75em;font-weight:700;line-height:1;color:#fff;text-align:center;white-space:nowrap;vertical-align:baseline;border-radius:.25rem}.badge:empty{display:none}.btn .badge{position:relative;top:-1px}.alert{position:relative;padding:1rem 1rem;margin-bottom:1rem;border:1px solid transparent;border-radius:.25rem}.alert-heading{color:inherit}.alert-link{font-weight:700}.alert-dismissible{padding-right:3rem}.alert-dismissible .btn-close{position:absolute;top:0;right:0;z-index:2;padding:1.25rem 1rem}.alert-primary{color:#084298;background-color:#cfe2ff;border-color:#b6d4fe}.alert-primary .alert-link{color:#06357a}.alert-secondary{color:#41464b;background-color:#e2e3e5;border-color:#d3d6d8}.alert-secondary .alert-link{color:#34383c}.alert-success{color:#0f5132;background-color:#d1e7dd;border-color:#badbcc}.alert-success .alert-link{color:#0c4128}.alert-info{color:#055160;background-color:#cff4fc;border-color:#b6effb}.alert-info .alert-link{color:#04414d}.alert-warning{color:#664d03;background-color:#fff3cd;border-color:#ffecb5}.alert-warning .alert-link{color:#523e02}.alert-danger{color:#842029;background-color:#f8d7da;border-color:#f5c2c7}.alert-danger .alert-link{color:#6a1a21}.alert-light{color:#636464;background-color:#fefefe;border-color:#fdfdfe}.alert-light .alert-link{color:#4f5050}.alert-dark{color:#141619;background-color:#d3d3d4;border-color:#bcbebf}.alert-dark .alert-link{color:#101214}@keyframes progress-bar-stripes{0%{background-position-x:1rem}}.progress{display:flex;height:1rem;overflow:hidden;font-size:0.75rem;background-color:#e9ecef;border-radius:.25rem}.progress-bar{display:flex;flex-direction:column;justify-content:center;overflow:hidden;color:#fff;text-align:center;white-space:nowrap;background-color:#0d6efd;transition:width .6s ease}@media(prefers-reduced-motion: reduce){.progress-bar{transition:none}}.progress-bar-striped{background-image:linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);background-size:1rem 1rem}.progress-bar-animated{animation:1s linear infinite progress-bar-stripes}@media(prefers-reduced-motion: reduce){.progress-bar-animated{animation:none}}.list-group{display:flex;flex-direction:column;padding-left:0;margin-bottom:0;border-radius:.25rem}.list-group-numbered{list-style-type:none;counter-reset:section}.list-group-numbered>li::before{content:counters(section, ".") ". ";counter-increment:section}.list-group-item-action{width:100%;color:#495057;text-align:inherit}.list-group-item-action:hover,.list-group-item-action:focus{z-index:1;color:#495057;text-decoration:none;background-color:#f8f9fa}.list-group-item-action:active{color:#212529;background-color:#e9ecef}.list-group-item{position:relative;display:block;padding:.5rem 1rem;color:#212529;text-decoration:none;background-color:#fff;border:1px solid rgba(0,0,0,.125)}.list-group-item:first-child{border-top-left-radius:inherit;border-top-right-radius:inherit}.list-group-item:last-child{border-bottom-right-radius:inherit;border-bottom-left-radius:inherit}.list-group-item.disabled,.list-group-item:disabled{color:#6c757d;pointer-events:none;background-color:#fff}.list-group-item.active{z-index:2;color:#fff;background-color:#0d6efd;border-color:#0d6efd}.list-group-item+.list-group-item{border-top-width:0}.list-group-item+.list-group-item.active{margin-top:-1px;border-top-width:1px}.list-group-horizontal{flex-direction:row}.list-group-horizontal>.list-group-item:first-child{border-bottom-left-radius:.25rem;border-top-right-radius:0}.list-group-horizontal>.list-group-item:last-child{border-top-right-radius:.25rem;border-bottom-left-radius:0}.list-group-horizontal>.list-group-item.active{margin-top:0}.list-group-horizontal>.list-group-item+.list-group-item{border-top-width:1px;border-left-width:0}.list-group-horizontal>.list-group-item+.list-group-item.active{margin-left:-1px;border-left-width:1px}@media(min-width: 576px){.list-group-horizontal-sm{flex-direction:row}.list-group-horizontal-sm>.list-group-item:first-child{border-bottom-left-radius:.25rem;border-top-right-radius:0}.list-group-horizontal-sm>.list-group-item:last-child{border-top-right-radius:.25rem;border-bottom-left-radius:0}.list-group-horizontal-sm>.list-group-item.active{margin-top:0}.list-group-horizontal-sm>.list-group-item+.list-group-item{border-top-width:1px;border-left-width:0}.list-group-horizontal-sm>.list-group-item+.list-group-item.active{margin-left:-1px;border-left-width:1px}}@media(min-width: 768px){.list-group-horizontal-md{flex-direction:row}.list-group-horizontal-md>.list-group-item:first-child{border-bottom-left-radius:.25rem;border-top-right-radius:0}.list-group-horizontal-md>.list-group-item:last-child{border-top-right-radius:.25rem;border-bottom-left-radius:0}.list-group-horizontal-md>.list-group-item.active{margin-top:0}.list-group-horizontal-md>.list-group-item+.list-group-item{border-top-width:1px;border-left-width:0}.list-group-horizontal-md>.list-group-item+.list-group-item.active{margin-left:-1px;border-left-width:1px}}@media(min-width: 992px){.list-group-horizontal-lg{flex-direction:row}.list-group-horizontal-lg>.list-group-item:first-child{border-bottom-left-radius:.25rem;border-top-right-radius:0}.list-group-horizontal-lg>.list-group-item:last-child{border-top-right-radius:.25rem;border-bottom-left-radius:0}.list-group-horizontal-lg>.list-group-item.active{margin-top:0}.list-group-horizontal-lg>.list-group-item+.list-group-item{border-top-width:1px;border-left-width:0}.list-group-horizontal-lg>.list-group-item+.list-group-item.active{margin-left:-1px;border-left-width:1px}}@media(min-width: 1200px){.list-group-horizontal-xl{flex-direction:row}.list-group-horizontal-xl>.list-group-item:first-child{border-bottom-left-radius:.25rem;border-top-right-radius:0}.list-group-horizontal-xl>.list-group-item:last-child{border-top-right-radius:.25rem;border-bottom-left-radius:0}.list-group-horizontal-xl>.list-group-item.active{margin-top:0}.list-group-horizontal-xl>.list-group-item+.list-group-item{border-top-width:1px;border-left-width:0}.list-group-horizontal-xl>.list-group-item+.list-group-item.active{margin-left:-1px;border-left-width:1px}}@media(min-width: 1400px){.list-group-horizontal-xxl{flex-direction:row}.list-group-horizontal-xxl>.list-group-item:first-child{border-bottom-left-radius:.25rem;border-top-right-radius:0}.list-group-horizontal-xxl>.list-group-item:last-child{border-top-right-radius:.25rem;border-bottom-left-radius:0}.list-group-horizontal-xxl>.list-group-item.active{margin-top:0}.list-group-horizontal-xxl>.list-group-item+.list-group-item{border-top-width:1px;border-left-width:0}.list-group-horizontal-xxl>.list-group-item+.list-group-item.active{margin-left:-1px;border-left-width:1px}}.list-group-flush{border-radius:0}.list-group-flush>.list-group-item{border-width:0 0 1px}.list-group-flush>.list-group-item:last-child{border-bottom-width:0}.list-group-item-primary{color:#084298;background-color:#cfe2ff}.list-group-item-primary.list-group-item-action:hover,.list-group-item-primary.list-group-item-action:focus{color:#084298;background-color:#bacbe6}.list-group-item-primary.list-group-item-action.active{color:#fff;background-color:#084298;border-color:#084298}.list-group-item-secondary{color:#41464b;background-color:#e2e3e5}.list-group-item-secondary.list-group-item-action:hover,.list-group-item-secondary.list-group-item-action:focus{color:#41464b;background-color:#cbccce}.list-group-item-secondary.list-group-item-action.active{color:#fff;background-color:#41464b;border-color:#41464b}.list-group-item-success{color:#0f5132;background-color:#d1e7dd}.list-group-item-success.list-group-item-action:hover,.list-group-item-success.list-group-item-action:focus{color:#0f5132;background-color:#bcd0c7}.list-group-item-success.list-group-item-action.active{color:#fff;background-color:#0f5132;border-color:#0f5132}.list-group-item-info{color:#055160;background-color:#cff4fc}.list-group-item-info.list-group-item-action:hover,.list-group-item-info.list-group-item-action:focus{color:#055160;background-color:#badce3}.list-group-item-info.list-group-item-action.active{color:#fff;background-color:#055160;border-color:#055160}.list-group-item-warning{color:#664d03;background-color:#fff3cd}.list-group-item-warning.list-group-item-action:hover,.list-group-item-warning.list-group-item-action:focus{color:#664d03;background-color:#e6dbb9}.list-group-item-warning.list-group-item-action.active{color:#fff;background-color:#664d03;border-color:#664d03}.list-group-item-danger{color:#842029;background-color:#f8d7da}.list-group-item-danger.list-group-item-action:hover,.list-group-item-danger.list-group-item-action:focus{color:#842029;background-color:#dfc2c4}.list-group-item-danger.list-group-item-action.active{color:#fff;background-color:#842029;border-color:#842029}.list-group-item-light{color:#636464;background-color:#fefefe}.list-group-item-light.list-group-item-action:hover,.list-group-item-light.list-group-item-action:focus{color:#636464;background-color:#e5e5e5}.list-group-item-light.list-group-item-action.active{color:#fff;background-color:#636464;border-color:#636464}.list-group-item-dark{color:#141619;background-color:#d3d3d4}.list-group-item-dark.list-group-item-action:hover,.list-group-item-dark.list-group-item-action:focus{color:#141619;background-color:#bebebf}.list-group-item-dark.list-group-item-action.active{color:#fff;background-color:#141619;border-color:#141619}.btn-close{box-sizing:content-box;width:1em;height:1em;padding:.25em .25em;color:#000;background:transparent url('+q+') center/1em auto no-repeat;border:0;border-radius:.25rem;opacity:.5}.btn-close:hover{color:#000;text-decoration:none;opacity:.75}.btn-close:focus{outline:0;box-shadow:0 0 0 .25rem rgba(13,110,253,.25);opacity:1}.btn-close:disabled,.btn-close.disabled{pointer-events:none;user-select:none;opacity:.25}.btn-close-white{filter:invert(1) grayscale(100%) brightness(200%)}.toast{width:350px;max-width:100%;font-size:0.875rem;pointer-events:auto;background-color:rgba(255,255,255,.85);background-clip:padding-box;border:1px solid rgba(0,0,0,.1);box-shadow:0 .5rem 1rem rgba(0,0,0,.15);border-radius:.25rem}.toast.showing{opacity:0}.toast:not(.show){display:none}.toast-container{width:max-content;max-width:100%;pointer-events:none}.toast-container>:not(:last-child){margin-bottom:.75rem}.toast-header{display:flex;align-items:center;padding:.5rem .75rem;color:#6c757d;background-color:rgba(255,255,255,.85);background-clip:padding-box;border-bottom:1px solid rgba(0,0,0,.05);border-top-left-radius:calc(0.25rem - 1px);border-top-right-radius:calc(0.25rem - 1px)}.toast-header .btn-close{margin-right:-0.375rem;margin-left:.75rem}.toast-body{padding:.75rem;word-wrap:break-word}.modal{position:fixed;top:0;left:0;z-index:1055;display:none;width:100%;height:100%;overflow-x:hidden;overflow-y:auto;outline:0}.modal-dialog{position:relative;width:auto;margin:.5rem;pointer-events:none}.modal.fade .modal-dialog{transition:transform .3s ease-out;transform:translate(0, -50px)}@media(prefers-reduced-motion: reduce){.modal.fade .modal-dialog{transition:none}}.modal.show .modal-dialog{transform:none}.modal.modal-static .modal-dialog{transform:scale(1.02)}.modal-dialog-scrollable{height:calc(100% - 1rem)}.modal-dialog-scrollable .modal-content{max-height:100%;overflow:hidden}.modal-dialog-scrollable .modal-body{overflow-y:auto}.modal-dialog-centered{display:flex;align-items:center;min-height:calc(100% - 1rem)}.modal-content{position:relative;display:flex;flex-direction:column;width:100%;pointer-events:auto;background-color:#fff;background-clip:padding-box;border:1px solid rgba(0,0,0,.2);border-radius:.3rem;outline:0}.modal-backdrop{position:fixed;top:0;left:0;z-index:1050;width:100vw;height:100vh;background-color:#000}.modal-backdrop.fade{opacity:0}.modal-backdrop.show{opacity:.5}.modal-header{display:flex;flex-shrink:0;align-items:center;justify-content:space-between;padding:1rem 1rem;border-bottom:1px solid #dee2e6;border-top-left-radius:calc(0.3rem - 1px);border-top-right-radius:calc(0.3rem - 1px)}.modal-header .btn-close{padding:.5rem .5rem;margin:-0.5rem -0.5rem -0.5rem auto}.modal-title{margin-bottom:0;line-height:1.5}.modal-body{position:relative;flex:1 1 auto;padding:1rem}.modal-footer{display:flex;flex-wrap:wrap;flex-shrink:0;align-items:center;justify-content:flex-end;padding:.75rem;border-top:1px solid #dee2e6;border-bottom-right-radius:calc(0.3rem - 1px);border-bottom-left-radius:calc(0.3rem - 1px)}.modal-footer>*{margin:.25rem}@media(min-width: 576px){.modal-dialog{max-width:500px;margin:1.75rem auto}.modal-dialog-scrollable{height:calc(100% - 3.5rem)}.modal-dialog-centered{min-height:calc(100% - 3.5rem)}.modal-sm{max-width:300px}}@media(min-width: 992px){.modal-lg,.modal-xl{max-width:800px}}@media(min-width: 1200px){.modal-xl{max-width:1140px}}.modal-fullscreen{width:100vw;max-width:none;height:100%;margin:0}.modal-fullscreen .modal-content{height:100%;border:0;border-radius:0}.modal-fullscreen .modal-header{border-radius:0}.modal-fullscreen .modal-body{overflow-y:auto}.modal-fullscreen .modal-footer{border-radius:0}@media(max-width: 575.98px){.modal-fullscreen-sm-down{width:100vw;max-width:none;height:100%;margin:0}.modal-fullscreen-sm-down .modal-content{height:100%;border:0;border-radius:0}.modal-fullscreen-sm-down .modal-header{border-radius:0}.modal-fullscreen-sm-down .modal-body{overflow-y:auto}.modal-fullscreen-sm-down .modal-footer{border-radius:0}}@media(max-width: 767.98px){.modal-fullscreen-md-down{width:100vw;max-width:none;height:100%;margin:0}.modal-fullscreen-md-down .modal-content{height:100%;border:0;border-radius:0}.modal-fullscreen-md-down .modal-header{border-radius:0}.modal-fullscreen-md-down .modal-body{overflow-y:auto}.modal-fullscreen-md-down .modal-footer{border-radius:0}}@media(max-width: 991.98px){.modal-fullscreen-lg-down{width:100vw;max-width:none;height:100%;margin:0}.modal-fullscreen-lg-down .modal-content{height:100%;border:0;border-radius:0}.modal-fullscreen-lg-down .modal-header{border-radius:0}.modal-fullscreen-lg-down .modal-body{overflow-y:auto}.modal-fullscreen-lg-down .modal-footer{border-radius:0}}@media(max-width: 1199.98px){.modal-fullscreen-xl-down{width:100vw;max-width:none;height:100%;margin:0}.modal-fullscreen-xl-down .modal-content{height:100%;border:0;border-radius:0}.modal-fullscreen-xl-down .modal-header{border-radius:0}.modal-fullscreen-xl-down .modal-body{overflow-y:auto}.modal-fullscreen-xl-down .modal-footer{border-radius:0}}@media(max-width: 1399.98px){.modal-fullscreen-xxl-down{width:100vw;max-width:none;height:100%;margin:0}.modal-fullscreen-xxl-down .modal-content{height:100%;border:0;border-radius:0}.modal-fullscreen-xxl-down .modal-header{border-radius:0}.modal-fullscreen-xxl-down .modal-body{overflow-y:auto}.modal-fullscreen-xxl-down .modal-footer{border-radius:0}}.tooltip{position:absolute;z-index:1080;display:block;margin:0;font-family:var(--bs-font-sans-serif);font-style:normal;font-weight:400;line-height:1.5;text-align:left;text-align:start;text-decoration:none;text-shadow:none;text-transform:none;letter-spacing:normal;word-break:normal;word-spacing:normal;white-space:normal;line-break:auto;font-size:0.875rem;word-wrap:break-word;opacity:0}.tooltip.show{opacity:.9}.tooltip .tooltip-arrow{position:absolute;display:block;width:.8rem;height:.4rem}.tooltip .tooltip-arrow::before{position:absolute;content:"";border-color:transparent;border-style:solid}.bs-tooltip-top,.bs-tooltip-auto[data-popper-placement^=top]{padding:.4rem 0}.bs-tooltip-top .tooltip-arrow,.bs-tooltip-auto[data-popper-placement^=top] .tooltip-arrow{bottom:0}.bs-tooltip-top .tooltip-arrow::before,.bs-tooltip-auto[data-popper-placement^=top] .tooltip-arrow::before{top:-1px;border-width:.4rem .4rem 0;border-top-color:#000}.bs-tooltip-end,.bs-tooltip-auto[data-popper-placement^=right]{padding:0 .4rem}.bs-tooltip-end .tooltip-arrow,.bs-tooltip-auto[data-popper-placement^=right] .tooltip-arrow{left:0;width:.4rem;height:.8rem}.bs-tooltip-end .tooltip-arrow::before,.bs-tooltip-auto[data-popper-placement^=right] .tooltip-arrow::before{right:-1px;border-width:.4rem .4rem .4rem 0;border-right-color:#000}.bs-tooltip-bottom,.bs-tooltip-auto[data-popper-placement^=bottom]{padding:.4rem 0}.bs-tooltip-bottom .tooltip-arrow,.bs-tooltip-auto[data-popper-placement^=bottom] .tooltip-arrow{top:0}.bs-tooltip-bottom .tooltip-arrow::before,.bs-tooltip-auto[data-popper-placement^=bottom] .tooltip-arrow::before{bottom:-1px;border-width:0 .4rem .4rem;border-bottom-color:#000}.bs-tooltip-start,.bs-tooltip-auto[data-popper-placement^=left]{padding:0 .4rem}.bs-tooltip-start .tooltip-arrow,.bs-tooltip-auto[data-popper-placement^=left] .tooltip-arrow{right:0;width:.4rem;height:.8rem}.bs-tooltip-start .tooltip-arrow::before,.bs-tooltip-auto[data-popper-placement^=left] .tooltip-arrow::before{left:-1px;border-width:.4rem 0 .4rem .4rem;border-left-color:#000}.tooltip-inner{max-width:200px;padding:.25rem .5rem;color:#fff;text-align:center;background-color:#000;border-radius:.25rem}.popover{position:absolute;top:0;left:0 /* rtl:ignore */;z-index:1070;display:block;max-width:276px;font-family:var(--bs-font-sans-serif);font-style:normal;font-weight:400;line-height:1.5;text-align:left;text-align:start;text-decoration:none;text-shadow:none;text-transform:none;letter-spacing:normal;word-break:normal;word-spacing:normal;white-space:normal;line-break:auto;font-size:0.875rem;word-wrap:break-word;background-color:#fff;background-clip:padding-box;border:1px solid rgba(0,0,0,.2);border-radius:.3rem}.popover .popover-arrow{position:absolute;display:block;width:1rem;height:.5rem}.popover .popover-arrow::before,.popover .popover-arrow::after{position:absolute;display:block;content:"";border-color:transparent;border-style:solid}.bs-popover-top>.popover-arrow,.bs-popover-auto[data-popper-placement^=top]>.popover-arrow{bottom:calc(-0.5rem - 1px)}.bs-popover-top>.popover-arrow::before,.bs-popover-auto[data-popper-placement^=top]>.popover-arrow::before{bottom:0;border-width:.5rem .5rem 0;border-top-color:rgba(0,0,0,.25)}.bs-popover-top>.popover-arrow::after,.bs-popover-auto[data-popper-placement^=top]>.popover-arrow::after{bottom:1px;border-width:.5rem .5rem 0;border-top-color:#fff}.bs-popover-end>.popover-arrow,.bs-popover-auto[data-popper-placement^=right]>.popover-arrow{left:calc(-0.5rem - 1px);width:.5rem;height:1rem}.bs-popover-end>.popover-arrow::before,.bs-popover-auto[data-popper-placement^=right]>.popover-arrow::before{left:0;border-width:.5rem .5rem .5rem 0;border-right-color:rgba(0,0,0,.25)}.bs-popover-end>.popover-arrow::after,.bs-popover-auto[data-popper-placement^=right]>.popover-arrow::after{left:1px;border-width:.5rem .5rem .5rem 0;border-right-color:#fff}.bs-popover-bottom>.popover-arrow,.bs-popover-auto[data-popper-placement^=bottom]>.popover-arrow{top:calc(-0.5rem - 1px)}.bs-popover-bottom>.popover-arrow::before,.bs-popover-auto[data-popper-placement^=bottom]>.popover-arrow::before{top:0;border-width:0 .5rem .5rem .5rem;border-bottom-color:rgba(0,0,0,.25)}.bs-popover-bottom>.popover-arrow::after,.bs-popover-auto[data-popper-placement^=bottom]>.popover-arrow::after{top:1px;border-width:0 .5rem .5rem .5rem;border-bottom-color:#fff}.bs-popover-bottom .popover-header::before,.bs-popover-auto[data-popper-placement^=bottom] .popover-header::before{position:absolute;top:0;left:50%;display:block;width:1rem;margin-left:-0.5rem;content:"";border-bottom:1px solid #f0f0f0}.bs-popover-start>.popover-arrow,.bs-popover-auto[data-popper-placement^=left]>.popover-arrow{right:calc(-0.5rem - 1px);width:.5rem;height:1rem}.bs-popover-start>.popover-arrow::before,.bs-popover-auto[data-popper-placement^=left]>.popover-arrow::before{right:0;border-width:.5rem 0 .5rem .5rem;border-left-color:rgba(0,0,0,.25)}.bs-popover-start>.popover-arrow::after,.bs-popover-auto[data-popper-placement^=left]>.popover-arrow::after{right:1px;border-width:.5rem 0 .5rem .5rem;border-left-color:#fff}.popover-header{padding:.5rem 1rem;margin-bottom:0;font-size:1rem;background-color:#f0f0f0;border-bottom:1px solid rgba(0,0,0,.2);border-top-left-radius:calc(0.3rem - 1px);border-top-right-radius:calc(0.3rem - 1px)}.popover-header:empty{display:none}.popover-body{padding:1rem 1rem;color:#212529}.carousel{position:relative}.carousel.pointer-event{touch-action:pan-y}.carousel-inner{position:relative;width:100%;overflow:hidden}.carousel-inner::after{display:block;clear:both;content:""}.carousel-item{position:relative;display:none;float:left;width:100%;margin-right:-100%;backface-visibility:hidden;transition:transform .6s ease-in-out}@media(prefers-reduced-motion: reduce){.carousel-item{transition:none}}.carousel-item.active,.carousel-item-next,.carousel-item-prev{display:block}.carousel-item-next:not(.carousel-item-start),.active.carousel-item-end{transform:translateX(100%)}.carousel-item-prev:not(.carousel-item-end),.active.carousel-item-start{transform:translateX(-100%)}.carousel-fade .carousel-item{opacity:0;transition-property:opacity;transform:none}.carousel-fade .carousel-item.active,.carousel-fade .carousel-item-next.carousel-item-start,.carousel-fade .carousel-item-prev.carousel-item-end{z-index:1;opacity:1}.carousel-fade .active.carousel-item-start,.carousel-fade .active.carousel-item-end{z-index:0;opacity:0;transition:opacity 0s .6s}@media(prefers-reduced-motion: reduce){.carousel-fade .active.carousel-item-start,.carousel-fade .active.carousel-item-end{transition:none}}.carousel-control-prev,.carousel-control-next{position:absolute;top:0;bottom:0;z-index:1;display:flex;align-items:center;justify-content:center;width:15%;padding:0;color:#fff;text-align:center;background:none;border:0;opacity:.5;transition:opacity .15s ease}@media(prefers-reduced-motion: reduce){.carousel-control-prev,.carousel-control-next{transition:none}}.carousel-control-prev:hover,.carousel-control-prev:focus,.carousel-control-next:hover,.carousel-control-next:focus{color:#fff;text-decoration:none;outline:0;opacity:.9}.carousel-control-prev{left:0}.carousel-control-next{right:0}.carousel-control-prev-icon,.carousel-control-next-icon{display:inline-block;width:2rem;height:2rem;background-repeat:no-repeat;background-position:50%;background-size:100% 100%}.carousel-control-prev-icon{background-image:url('+j+")}.carousel-control-next-icon{background-image:url("+T+')}.carousel-indicators{position:absolute;right:0;bottom:0;left:0;z-index:2;display:flex;justify-content:center;padding:0;margin-right:15%;margin-bottom:1rem;margin-left:15%;list-style:none}.carousel-indicators [data-bs-target]{box-sizing:content-box;flex:0 1 auto;width:30px;height:3px;padding:0;margin-right:3px;margin-left:3px;text-indent:-999px;cursor:pointer;background-color:#fff;background-clip:padding-box;border:0;border-top:10px solid transparent;border-bottom:10px solid transparent;opacity:.5;transition:opacity .6s ease}@media(prefers-reduced-motion: reduce){.carousel-indicators [data-bs-target]{transition:none}}.carousel-indicators .active{opacity:1}.carousel-caption{position:absolute;right:15%;bottom:1.25rem;left:15%;padding-top:1.25rem;padding-bottom:1.25rem;color:#fff;text-align:center}.carousel-dark .carousel-control-prev-icon,.carousel-dark .carousel-control-next-icon{filter:invert(1) grayscale(100)}.carousel-dark .carousel-indicators [data-bs-target]{background-color:#000}.carousel-dark .carousel-caption{color:#000}@keyframes spinner-border{to{transform:rotate(360deg) /* rtl:ignore */}}.spinner-border{display:inline-block;width:2rem;height:2rem;vertical-align:-0.125em;border:.25em solid currentColor;border-right-color:transparent;border-radius:50%;animation:.75s linear infinite spinner-border}.spinner-border-sm{width:1rem;height:1rem;border-width:.2em}@keyframes spinner-grow{0%{transform:scale(0)}50%{opacity:1;transform:none}}.spinner-grow{display:inline-block;width:2rem;height:2rem;vertical-align:-0.125em;background-color:currentColor;border-radius:50%;opacity:0;animation:.75s linear infinite spinner-grow}.spinner-grow-sm{width:1rem;height:1rem}@media(prefers-reduced-motion: reduce){.spinner-border,.spinner-grow{animation-duration:1.5s}}.offcanvas{position:fixed;bottom:0;z-index:1045;display:flex;flex-direction:column;max-width:100%;visibility:hidden;background-color:#fff;background-clip:padding-box;outline:0;transition:transform .3s ease-in-out}@media(prefers-reduced-motion: reduce){.offcanvas{transition:none}}.offcanvas-backdrop{position:fixed;top:0;left:0;z-index:1040;width:100vw;height:100vh;background-color:#000}.offcanvas-backdrop.fade{opacity:0}.offcanvas-backdrop.show{opacity:.5}.offcanvas-header{display:flex;align-items:center;justify-content:space-between;padding:1rem 1rem}.offcanvas-header .btn-close{padding:.5rem .5rem;margin-top:-0.5rem;margin-right:-0.5rem;margin-bottom:-0.5rem}.offcanvas-title{margin-bottom:0;line-height:1.5}.offcanvas-body{flex-grow:1;padding:1rem 1rem;overflow-y:auto}.offcanvas-start{top:0;left:0;width:400px;border-right:1px solid rgba(0,0,0,.2);transform:translateX(-100%)}.offcanvas-end{top:0;right:0;width:400px;border-left:1px solid rgba(0,0,0,.2);transform:translateX(100%)}.offcanvas-top{top:0;right:0;left:0;height:30vh;max-height:100%;border-bottom:1px solid rgba(0,0,0,.2);transform:translateY(-100%)}.offcanvas-bottom{right:0;left:0;height:30vh;max-height:100%;border-top:1px solid rgba(0,0,0,.2);transform:translateY(100%)}.offcanvas.show{transform:none}.placeholder{display:inline-block;min-height:1em;vertical-align:middle;cursor:wait;background-color:currentColor;opacity:.5}.placeholder.btn::before{display:inline-block;content:""}.placeholder-xs{min-height:.6em}.placeholder-sm{min-height:.8em}.placeholder-lg{min-height:1.2em}.placeholder-glow .placeholder{animation:placeholder-glow 2s ease-in-out infinite}@keyframes placeholder-glow{50%{opacity:.2}}.placeholder-wave{mask-image:linear-gradient(130deg, #000 55%, rgba(0, 0, 0, 0.8) 75%, #000 95%);mask-size:200% 100%;animation:placeholder-wave 2s linear infinite}@keyframes placeholder-wave{100%{mask-position:-200% 0%}}.clearfix::after{display:block;clear:both;content:""}.link-primary{color:#0d6efd}.link-primary:hover,.link-primary:focus{color:#0a58ca}.link-secondary{color:#6c757d}.link-secondary:hover,.link-secondary:focus{color:#565e64}.link-success{color:#198754}.link-success:hover,.link-success:focus{color:#146c43}.link-info{color:#0dcaf0}.link-info:hover,.link-info:focus{color:#3dd5f3}.link-warning{color:#ffc107}.link-warning:hover,.link-warning:focus{color:#ffcd39}.link-danger{color:#dc3545}.link-danger:hover,.link-danger:focus{color:#b02a37}.link-light{color:#f8f9fa}.link-light:hover,.link-light:focus{color:#f9fafb}.link-dark{color:#212529}.link-dark:hover,.link-dark:focus{color:#1a1e21}.ratio{position:relative;width:100%}.ratio::before{display:block;padding-top:var(--bs-aspect-ratio);content:""}.ratio>*{position:absolute;top:0;left:0;width:100%;height:100%}.ratio-1x1{--bs-aspect-ratio: 100%}.ratio-4x3{--bs-aspect-ratio: 75%}.ratio-16x9{--bs-aspect-ratio: 56.25%}.ratio-21x9{--bs-aspect-ratio: 42.8571428571%}.fixed-top{position:fixed;top:0;right:0;left:0;z-index:1030}.fixed-bottom{position:fixed;right:0;bottom:0;left:0;z-index:1030}.sticky-top{position:sticky;top:0;z-index:1020}@media(min-width: 576px){.sticky-sm-top{position:sticky;top:0;z-index:1020}}@media(min-width: 768px){.sticky-md-top{position:sticky;top:0;z-index:1020}}@media(min-width: 992px){.sticky-lg-top{position:sticky;top:0;z-index:1020}}@media(min-width: 1200px){.sticky-xl-top{position:sticky;top:0;z-index:1020}}@media(min-width: 1400px){.sticky-xxl-top{position:sticky;top:0;z-index:1020}}.hstack{display:flex;flex-direction:row;align-items:center;align-self:stretch}.vstack{display:flex;flex:1 1 auto;flex-direction:column;align-self:stretch}.visually-hidden,.visually-hidden-focusable:not(:focus):not(:focus-within){position:absolute !important;width:1px !important;height:1px !important;padding:0 !important;margin:-1px !important;overflow:hidden !important;clip:rect(0, 0, 0, 0) !important;white-space:nowrap !important;border:0 !important}.stretched-link::after{position:absolute;top:0;right:0;bottom:0;left:0;z-index:1;content:""}.text-truncate{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.vr{display:inline-block;align-self:stretch;width:1px;min-height:1em;background-color:currentColor;opacity:.25}.align-baseline{vertical-align:baseline !important}.align-top{vertical-align:top !important}.align-middle{vertical-align:middle !important}.align-bottom{vertical-align:bottom !important}.align-text-bottom{vertical-align:text-bottom !important}.align-text-top{vertical-align:text-top !important}.float-start{float:left !important}.float-end{float:right !important}.float-none{float:none !important}.opacity-0{opacity:0 !important}.opacity-25{opacity:.25 !important}.opacity-50{opacity:.5 !important}.opacity-75{opacity:.75 !important}.opacity-100{opacity:1 !important}.overflow-auto{overflow:auto !important}.overflow-hidden{overflow:hidden !important}.overflow-visible{overflow:visible !important}.overflow-scroll{overflow:scroll !important}.d-inline{display:inline !important}.d-inline-block{display:inline-block !important}.d-block{display:block !important}.d-grid{display:grid !important}.d-table{display:table !important}.d-table-row{display:table-row !important}.d-table-cell{display:table-cell !important}.d-flex{display:flex !important}.d-inline-flex{display:inline-flex !important}.d-none{display:none !important}.shadow{box-shadow:0 .5rem 1rem rgba(0,0,0,.15) !important}.shadow-sm{box-shadow:0 .125rem .25rem rgba(0,0,0,.075) !important}.shadow-lg{box-shadow:0 1rem 3rem rgba(0,0,0,.175) !important}.shadow-none{box-shadow:none !important}.position-static{position:static !important}.position-relative{position:relative !important}.position-absolute{position:absolute !important}.position-fixed{position:fixed !important}.position-sticky{position:sticky !important}.top-0{top:0 !important}.top-50{top:50% !important}.top-100{top:100% !important}.bottom-0{bottom:0 !important}.bottom-50{bottom:50% !important}.bottom-100{bottom:100% !important}.start-0{left:0 !important}.start-50{left:50% !important}.start-100{left:100% !important}.end-0{right:0 !important}.end-50{right:50% !important}.end-100{right:100% !important}.translate-middle{transform:translate(-50%, -50%) !important}.translate-middle-x{transform:translateX(-50%) !important}.translate-middle-y{transform:translateY(-50%) !important}.border{border:1px solid #dee2e6 !important}.border-0{border:0 !important}.border-top{border-top:1px solid #dee2e6 !important}.border-top-0{border-top:0 !important}.border-end{border-right:1px solid #dee2e6 !important}.border-end-0{border-right:0 !important}.border-bottom{border-bottom:1px solid #dee2e6 !important}.border-bottom-0{border-bottom:0 !important}.border-start{border-left:1px solid #dee2e6 !important}.border-start-0{border-left:0 !important}.border-primary{border-color:#0d6efd !important}.border-secondary{border-color:#6c757d !important}.border-success{border-color:#198754 !important}.border-info{border-color:#0dcaf0 !important}.border-warning{border-color:#ffc107 !important}.border-danger{border-color:#dc3545 !important}.border-light{border-color:#f8f9fa !important}.border-dark{border-color:#212529 !important}.border-white{border-color:#fff !important}.border-1{border-width:1px !important}.border-2{border-width:2px !important}.border-3{border-width:3px !important}.border-4{border-width:4px !important}.border-5{border-width:5px !important}.w-25{width:25% !important}.w-50{width:50% !important}.w-75{width:75% !important}.w-100{width:100% !important}.w-auto{width:auto !important}.mw-100{max-width:100% !important}.vw-100{width:100vw !important}.min-vw-100{min-width:100vw !important}.h-25{height:25% !important}.h-50{height:50% !important}.h-75{height:75% !important}.h-100{height:100% !important}.h-auto{height:auto !important}.mh-100{max-height:100% !important}.vh-100{height:100vh !important}.min-vh-100{min-height:100vh !important}.flex-fill{flex:1 1 auto !important}.flex-row{flex-direction:row !important}.flex-column{flex-direction:column !important}.flex-row-reverse{flex-direction:row-reverse !important}.flex-column-reverse{flex-direction:column-reverse !important}.flex-grow-0{flex-grow:0 !important}.flex-grow-1{flex-grow:1 !important}.flex-shrink-0{flex-shrink:0 !important}.flex-shrink-1{flex-shrink:1 !important}.flex-wrap{flex-wrap:wrap !important}.flex-nowrap{flex-wrap:nowrap !important}.flex-wrap-reverse{flex-wrap:wrap-reverse !important}.gap-0{gap:0 !important}.gap-1{gap:.25rem !important}.gap-2{gap:.5rem !important}.gap-3{gap:1rem !important}.gap-4{gap:1.5rem !important}.gap-5{gap:3rem !important}.justify-content-start{justify-content:flex-start !important}.justify-content-end{justify-content:flex-end !important}.justify-content-center{justify-content:center !important}.justify-content-between{justify-content:space-between !important}.justify-content-around{justify-content:space-around !important}.justify-content-evenly{justify-content:space-evenly !important}.align-items-start{align-items:flex-start !important}.align-items-end{align-items:flex-end !important}.align-items-center{align-items:center !important}.align-items-baseline{align-items:baseline !important}.align-items-stretch{align-items:stretch !important}.align-content-start{align-content:flex-start !important}.align-content-end{align-content:flex-end !important}.align-content-center{align-content:center !important}.align-content-between{align-content:space-between !important}.align-content-around{align-content:space-around !important}.align-content-stretch{align-content:stretch !important}.align-self-auto{align-self:auto !important}.align-self-start{align-self:flex-start !important}.align-self-end{align-self:flex-end !important}.align-self-center{align-self:center !important}.align-self-baseline{align-self:baseline !important}.align-self-stretch{align-self:stretch !important}.order-first{order:-1 !important}.order-0{order:0 !important}.order-1{order:1 !important}.order-2{order:2 !important}.order-3{order:3 !important}.order-4{order:4 !important}.order-5{order:5 !important}.order-last{order:6 !important}.m-0{margin:0 !important}.m-1{margin:.25rem !important}.m-2{margin:.5rem !important}.m-3{margin:1rem !important}.m-4{margin:1.5rem !important}.m-5{margin:3rem !important}.m-auto{margin:auto !important}.mx-0{margin-right:0 !important;margin-left:0 !important}.mx-1{margin-right:.25rem !important;margin-left:.25rem !important}.mx-2{margin-right:.5rem !important;margin-left:.5rem !important}.mx-3{margin-right:1rem !important;margin-left:1rem !important}.mx-4{margin-right:1.5rem !important;margin-left:1.5rem !important}.mx-5{margin-right:3rem !important;margin-left:3rem !important}.mx-auto{margin-right:auto !important;margin-left:auto !important}.my-0{margin-top:0 !important;margin-bottom:0 !important}.my-1{margin-top:.25rem !important;margin-bottom:.25rem !important}.my-2{margin-top:.5rem !important;margin-bottom:.5rem !important}.my-3{margin-top:1rem !important;margin-bottom:1rem !important}.my-4{margin-top:1.5rem !important;margin-bottom:1.5rem !important}.my-5{margin-top:3rem !important;margin-bottom:3rem !important}.my-auto{margin-top:auto !important;margin-bottom:auto !important}.mt-0{margin-top:0 !important}.mt-1{margin-top:.25rem !important}.mt-2{margin-top:.5rem !important}.mt-3{margin-top:1rem !important}.mt-4{margin-top:1.5rem !important}.mt-5{margin-top:3rem !important}.mt-auto{margin-top:auto !important}.me-0{margin-right:0 !important}.me-1{margin-right:.25rem !important}.me-2{margin-right:.5rem !important}.me-3{margin-right:1rem !important}.me-4{margin-right:1.5rem !important}.me-5{margin-right:3rem !important}.me-auto{margin-right:auto !important}.mb-0{margin-bottom:0 !important}.mb-1{margin-bottom:.25rem !important}.mb-2{margin-bottom:.5rem !important}.mb-3{margin-bottom:1rem !important}.mb-4{margin-bottom:1.5rem !important}.mb-5{margin-bottom:3rem !important}.mb-auto{margin-bottom:auto !important}.ms-0{margin-left:0 !important}.ms-1{margin-left:.25rem !important}.ms-2{margin-left:.5rem !important}.ms-3{margin-left:1rem !important}.ms-4{margin-left:1.5rem !important}.ms-5{margin-left:3rem !important}.ms-auto{margin-left:auto !important}.p-0{padding:0 !important}.p-1{padding:.25rem !important}.p-2{padding:.5rem !important}.p-3{padding:1rem !important}.p-4{padding:1.5rem !important}.p-5{padding:3rem !important}.px-0{padding-right:0 !important;padding-left:0 !important}.px-1{padding-right:.25rem !important;padding-left:.25rem !important}.px-2{padding-right:.5rem !important;padding-left:.5rem !important}.px-3{padding-right:1rem !important;padding-left:1rem !important}.px-4{padding-right:1.5rem !important;padding-left:1.5rem !important}.px-5{padding-right:3rem !important;padding-left:3rem !important}.py-0{padding-top:0 !important;padding-bottom:0 !important}.py-1{padding-top:.25rem !important;padding-bottom:.25rem !important}.py-2{padding-top:.5rem !important;padding-bottom:.5rem !important}.py-3{padding-top:1rem !important;padding-bottom:1rem !important}.py-4{padding-top:1.5rem !important;padding-bottom:1.5rem !important}.py-5{padding-top:3rem !important;padding-bottom:3rem !important}.pt-0{padding-top:0 !important}.pt-1{padding-top:.25rem !important}.pt-2{padding-top:.5rem !important}.pt-3{padding-top:1rem !important}.pt-4{padding-top:1.5rem !important}.pt-5{padding-top:3rem !important}.pe-0{padding-right:0 !important}.pe-1{padding-right:.25rem !important}.pe-2{padding-right:.5rem !important}.pe-3{padding-right:1rem !important}.pe-4{padding-right:1.5rem !important}.pe-5{padding-right:3rem !important}.pb-0{padding-bottom:0 !important}.pb-1{padding-bottom:.25rem !important}.pb-2{padding-bottom:.5rem !important}.pb-3{padding-bottom:1rem !important}.pb-4{padding-bottom:1.5rem !important}.pb-5{padding-bottom:3rem !important}.ps-0{padding-left:0 !important}.ps-1{padding-left:.25rem !important}.ps-2{padding-left:.5rem !important}.ps-3{padding-left:1rem !important}.ps-4{padding-left:1.5rem !important}.ps-5{padding-left:3rem !important}.font-monospace{font-family:var(--bs-font-monospace) !important}.fs-1{font-size:calc(1.375rem + 1.5vw) !important}.fs-2{font-size:calc(1.325rem + 0.9vw) !important}.fs-3{font-size:calc(1.3rem + 0.6vw) !important}.fs-4{font-size:calc(1.275rem + 0.3vw) !important}.fs-5{font-size:1.25rem !important}.fs-6{font-size:1rem !important}.fst-italic{font-style:italic !important}.fst-normal{font-style:normal !important}.fw-light{font-weight:300 !important}.fw-lighter{font-weight:lighter !important}.fw-normal{font-weight:400 !important}.fw-bold{font-weight:700 !important}.fw-bolder{font-weight:bolder !important}.lh-1{line-height:1 !important}.lh-sm{line-height:1.25 !important}.lh-base{line-height:1.5 !important}.lh-lg{line-height:2 !important}.text-start{text-align:left !important}.text-end{text-align:right !important}.text-center{text-align:center !important}.text-decoration-none{text-decoration:none !important}.text-decoration-underline{text-decoration:underline !important}.text-decoration-line-through{text-decoration:line-through !important}.text-lowercase{text-transform:lowercase !important}.text-uppercase{text-transform:uppercase !important}.text-capitalize{text-transform:capitalize !important}.text-wrap{white-space:normal !important}.text-nowrap{white-space:nowrap !important}.text-break{word-wrap:break-word !important;word-break:break-word !important}.text-primary{--bs-text-opacity: 1;color:rgba(var(--bs-primary-rgb), var(--bs-text-opacity)) !important}.text-secondary{--bs-text-opacity: 1;color:rgba(var(--bs-secondary-rgb), var(--bs-text-opacity)) !important}.text-success{--bs-text-opacity: 1;color:rgba(var(--bs-success-rgb), var(--bs-text-opacity)) !important}.text-info{--bs-text-opacity: 1;color:rgba(var(--bs-info-rgb), var(--bs-text-opacity)) !important}.text-warning{--bs-text-opacity: 1;color:rgba(var(--bs-warning-rgb), var(--bs-text-opacity)) !important}.text-danger{--bs-text-opacity: 1;color:rgba(var(--bs-danger-rgb), var(--bs-text-opacity)) !important}.text-light{--bs-text-opacity: 1;color:rgba(var(--bs-light-rgb), var(--bs-text-opacity)) !important}.text-dark{--bs-text-opacity: 1;color:rgba(var(--bs-dark-rgb), var(--bs-text-opacity)) !important}.text-black{--bs-text-opacity: 1;color:rgba(var(--bs-black-rgb), var(--bs-text-opacity)) !important}.text-white{--bs-text-opacity: 1;color:rgba(var(--bs-white-rgb), var(--bs-text-opacity)) !important}.text-body{--bs-text-opacity: 1;color:rgba(var(--bs-body-color-rgb), var(--bs-text-opacity)) !important}.text-muted{--bs-text-opacity: 1;color:#6c757d !important}.text-black-50{--bs-text-opacity: 1;color:rgba(0,0,0,.5) !important}.text-white-50{--bs-text-opacity: 1;color:rgba(255,255,255,.5) !important}.text-reset{--bs-text-opacity: 1;color:inherit !important}.text-opacity-25{--bs-text-opacity: 0.25}.text-opacity-50{--bs-text-opacity: 0.5}.text-opacity-75{--bs-text-opacity: 0.75}.text-opacity-100{--bs-text-opacity: 1}.bg-primary{--bs-bg-opacity: 1;background-color:rgba(var(--bs-primary-rgb), var(--bs-bg-opacity)) !important}.bg-secondary{--bs-bg-opacity: 1;background-color:rgba(var(--bs-secondary-rgb), var(--bs-bg-opacity)) !important}.bg-success{--bs-bg-opacity: 1;background-color:rgba(var(--bs-success-rgb), var(--bs-bg-opacity)) !important}.bg-info{--bs-bg-opacity: 1;background-color:rgba(var(--bs-info-rgb), var(--bs-bg-opacity)) !important}.bg-warning{--bs-bg-opacity: 1;background-color:rgba(var(--bs-warning-rgb), var(--bs-bg-opacity)) !important}.bg-danger{--bs-bg-opacity: 1;background-color:rgba(var(--bs-danger-rgb), var(--bs-bg-opacity)) !important}.bg-light{--bs-bg-opacity: 1;background-color:rgba(var(--bs-light-rgb), var(--bs-bg-opacity)) !important}.bg-dark{--bs-bg-opacity: 1;background-color:rgba(var(--bs-dark-rgb), var(--bs-bg-opacity)) !important}.bg-black{--bs-bg-opacity: 1;background-color:rgba(var(--bs-black-rgb), var(--bs-bg-opacity)) !important}.bg-white{--bs-bg-opacity: 1;background-color:rgba(var(--bs-white-rgb), var(--bs-bg-opacity)) !important}.bg-body{--bs-bg-opacity: 1;background-color:rgba(var(--bs-body-bg-rgb), var(--bs-bg-opacity)) !important}.bg-transparent{--bs-bg-opacity: 1;background-color:transparent !important}.bg-opacity-10{--bs-bg-opacity: 0.1}.bg-opacity-25{--bs-bg-opacity: 0.25}.bg-opacity-50{--bs-bg-opacity: 0.5}.bg-opacity-75{--bs-bg-opacity: 0.75}.bg-opacity-100{--bs-bg-opacity: 1}.bg-gradient{background-image:var(--bs-gradient) !important}.user-select-all{user-select:all !important}.user-select-auto{user-select:auto !important}.user-select-none{user-select:none !important}.pe-none{pointer-events:none !important}.pe-auto{pointer-events:auto !important}.rounded{border-radius:.25rem !important}.rounded-0{border-radius:0 !important}.rounded-1{border-radius:.2rem !important}.rounded-2{border-radius:.25rem !important}.rounded-3{border-radius:.3rem !important}.rounded-circle{border-radius:50% !important}.rounded-pill{border-radius:50rem !important}.rounded-top{border-top-left-radius:.25rem !important;border-top-right-radius:.25rem !important}.rounded-end{border-top-right-radius:.25rem !important;border-bottom-right-radius:.25rem !important}.rounded-bottom{border-bottom-right-radius:.25rem !important;border-bottom-left-radius:.25rem !important}.rounded-start{border-bottom-left-radius:.25rem !important;border-top-left-radius:.25rem !important}.visible{visibility:visible !important}.invisible{visibility:hidden !important}@media(min-width: 576px){.float-sm-start{float:left !important}.float-sm-end{float:right !important}.float-sm-none{float:none !important}.d-sm-inline{display:inline !important}.d-sm-inline-block{display:inline-block !important}.d-sm-block{display:block !important}.d-sm-grid{display:grid !important}.d-sm-table{display:table !important}.d-sm-table-row{display:table-row !important}.d-sm-table-cell{display:table-cell !important}.d-sm-flex{display:flex !important}.d-sm-inline-flex{display:inline-flex !important}.d-sm-none{display:none !important}.flex-sm-fill{flex:1 1 auto !important}.flex-sm-row{flex-direction:row !important}.flex-sm-column{flex-direction:column !important}.flex-sm-row-reverse{flex-direction:row-reverse !important}.flex-sm-column-reverse{flex-direction:column-reverse !important}.flex-sm-grow-0{flex-grow:0 !important}.flex-sm-grow-1{flex-grow:1 !important}.flex-sm-shrink-0{flex-shrink:0 !important}.flex-sm-shrink-1{flex-shrink:1 !important}.flex-sm-wrap{flex-wrap:wrap !important}.flex-sm-nowrap{flex-wrap:nowrap !important}.flex-sm-wrap-reverse{flex-wrap:wrap-reverse !important}.gap-sm-0{gap:0 !important}.gap-sm-1{gap:.25rem !important}.gap-sm-2{gap:.5rem !important}.gap-sm-3{gap:1rem !important}.gap-sm-4{gap:1.5rem !important}.gap-sm-5{gap:3rem !important}.justify-content-sm-start{justify-content:flex-start !important}.justify-content-sm-end{justify-content:flex-end !important}.justify-content-sm-center{justify-content:center !important}.justify-content-sm-between{justify-content:space-between !important}.justify-content-sm-around{justify-content:space-around !important}.justify-content-sm-evenly{justify-content:space-evenly !important}.align-items-sm-start{align-items:flex-start !important}.align-items-sm-end{align-items:flex-end !important}.align-items-sm-center{align-items:center !important}.align-items-sm-baseline{align-items:baseline !important}.align-items-sm-stretch{align-items:stretch !important}.align-content-sm-start{align-content:flex-start !important}.align-content-sm-end{align-content:flex-end !important}.align-content-sm-center{align-content:center !important}.align-content-sm-between{align-content:space-between !important}.align-content-sm-around{align-content:space-around !important}.align-content-sm-stretch{align-content:stretch !important}.align-self-sm-auto{align-self:auto !important}.align-self-sm-start{align-self:flex-start !important}.align-self-sm-end{align-self:flex-end !important}.align-self-sm-center{align-self:center !important}.align-self-sm-baseline{align-self:baseline !important}.align-self-sm-stretch{align-self:stretch !important}.order-sm-first{order:-1 !important}.order-sm-0{order:0 !important}.order-sm-1{order:1 !important}.order-sm-2{order:2 !important}.order-sm-3{order:3 !important}.order-sm-4{order:4 !important}.order-sm-5{order:5 !important}.order-sm-last{order:6 !important}.m-sm-0{margin:0 !important}.m-sm-1{margin:.25rem !important}.m-sm-2{margin:.5rem !important}.m-sm-3{margin:1rem !important}.m-sm-4{margin:1.5rem !important}.m-sm-5{margin:3rem !important}.m-sm-auto{margin:auto !important}.mx-sm-0{margin-right:0 !important;margin-left:0 !important}.mx-sm-1{margin-right:.25rem !important;margin-left:.25rem !important}.mx-sm-2{margin-right:.5rem !important;margin-left:.5rem !important}.mx-sm-3{margin-right:1rem !important;margin-left:1rem !important}.mx-sm-4{margin-right:1.5rem !important;margin-left:1.5rem !important}.mx-sm-5{margin-right:3rem !important;margin-left:3rem !important}.mx-sm-auto{margin-right:auto !important;margin-left:auto !important}.my-sm-0{margin-top:0 !important;margin-bottom:0 !important}.my-sm-1{margin-top:.25rem !important;margin-bottom:.25rem !important}.my-sm-2{margin-top:.5rem !important;margin-bottom:.5rem !important}.my-sm-3{margin-top:1rem !important;margin-bottom:1rem !important}.my-sm-4{margin-top:1.5rem !important;margin-bottom:1.5rem !important}.my-sm-5{margin-top:3rem !important;margin-bottom:3rem !important}.my-sm-auto{margin-top:auto !important;margin-bottom:auto !important}.mt-sm-0{margin-top:0 !important}.mt-sm-1{margin-top:.25rem !important}.mt-sm-2{margin-top:.5rem !important}.mt-sm-3{margin-top:1rem !important}.mt-sm-4{margin-top:1.5rem !important}.mt-sm-5{margin-top:3rem !important}.mt-sm-auto{margin-top:auto !important}.me-sm-0{margin-right:0 !important}.me-sm-1{margin-right:.25rem !important}.me-sm-2{margin-right:.5rem !important}.me-sm-3{margin-right:1rem !important}.me-sm-4{margin-right:1.5rem !important}.me-sm-5{margin-right:3rem !important}.me-sm-auto{margin-right:auto !important}.mb-sm-0{margin-bottom:0 !important}.mb-sm-1{margin-bottom:.25rem !important}.mb-sm-2{margin-bottom:.5rem !important}.mb-sm-3{margin-bottom:1rem !important}.mb-sm-4{margin-bottom:1.5rem !important}.mb-sm-5{margin-bottom:3rem !important}.mb-sm-auto{margin-bottom:auto !important}.ms-sm-0{margin-left:0 !important}.ms-sm-1{margin-left:.25rem !important}.ms-sm-2{margin-left:.5rem !important}.ms-sm-3{margin-left:1rem !important}.ms-sm-4{margin-left:1.5rem !important}.ms-sm-5{margin-left:3rem !important}.ms-sm-auto{margin-left:auto !important}.p-sm-0{padding:0 !important}.p-sm-1{padding:.25rem !important}.p-sm-2{padding:.5rem !important}.p-sm-3{padding:1rem !important}.p-sm-4{padding:1.5rem !important}.p-sm-5{padding:3rem !important}.px-sm-0{padding-right:0 !important;padding-left:0 !important}.px-sm-1{padding-right:.25rem !important;padding-left:.25rem !important}.px-sm-2{padding-right:.5rem !important;padding-left:.5rem !important}.px-sm-3{padding-right:1rem !important;padding-left:1rem !important}.px-sm-4{padding-right:1.5rem !important;padding-left:1.5rem !important}.px-sm-5{padding-right:3rem !important;padding-left:3rem !important}.py-sm-0{padding-top:0 !important;padding-bottom:0 !important}.py-sm-1{padding-top:.25rem !important;padding-bottom:.25rem !important}.py-sm-2{padding-top:.5rem !important;padding-bottom:.5rem !important}.py-sm-3{padding-top:1rem !important;padding-bottom:1rem !important}.py-sm-4{padding-top:1.5rem !important;padding-bottom:1.5rem !important}.py-sm-5{padding-top:3rem !important;padding-bottom:3rem !important}.pt-sm-0{padding-top:0 !important}.pt-sm-1{padding-top:.25rem !important}.pt-sm-2{padding-top:.5rem !important}.pt-sm-3{padding-top:1rem !important}.pt-sm-4{padding-top:1.5rem !important}.pt-sm-5{padding-top:3rem !important}.pe-sm-0{padding-right:0 !important}.pe-sm-1{padding-right:.25rem !important}.pe-sm-2{padding-right:.5rem !important}.pe-sm-3{padding-right:1rem !important}.pe-sm-4{padding-right:1.5rem !important}.pe-sm-5{padding-right:3rem !important}.pb-sm-0{padding-bottom:0 !important}.pb-sm-1{padding-bottom:.25rem !important}.pb-sm-2{padding-bottom:.5rem !important}.pb-sm-3{padding-bottom:1rem !important}.pb-sm-4{padding-bottom:1.5rem !important}.pb-sm-5{padding-bottom:3rem !important}.ps-sm-0{padding-left:0 !important}.ps-sm-1{padding-left:.25rem !important}.ps-sm-2{padding-left:.5rem !important}.ps-sm-3{padding-left:1rem !important}.ps-sm-4{padding-left:1.5rem !important}.ps-sm-5{padding-left:3rem !important}.text-sm-start{text-align:left !important}.text-sm-end{text-align:right !important}.text-sm-center{text-align:center !important}}@media(min-width: 768px){.float-md-start{float:left !important}.float-md-end{float:right !important}.float-md-none{float:none !important}.d-md-inline{display:inline !important}.d-md-inline-block{display:inline-block !important}.d-md-block{display:block !important}.d-md-grid{display:grid !important}.d-md-table{display:table !important}.d-md-table-row{display:table-row !important}.d-md-table-cell{display:table-cell !important}.d-md-flex{display:flex !important}.d-md-inline-flex{display:inline-flex !important}.d-md-none{display:none !important}.flex-md-fill{flex:1 1 auto !important}.flex-md-row{flex-direction:row !important}.flex-md-column{flex-direction:column !important}.flex-md-row-reverse{flex-direction:row-reverse !important}.flex-md-column-reverse{flex-direction:column-reverse !important}.flex-md-grow-0{flex-grow:0 !important}.flex-md-grow-1{flex-grow:1 !important}.flex-md-shrink-0{flex-shrink:0 !important}.flex-md-shrink-1{flex-shrink:1 !important}.flex-md-wrap{flex-wrap:wrap !important}.flex-md-nowrap{flex-wrap:nowrap !important}.flex-md-wrap-reverse{flex-wrap:wrap-reverse !important}.gap-md-0{gap:0 !important}.gap-md-1{gap:.25rem !important}.gap-md-2{gap:.5rem !important}.gap-md-3{gap:1rem !important}.gap-md-4{gap:1.5rem !important}.gap-md-5{gap:3rem !important}.justify-content-md-start{justify-content:flex-start !important}.justify-content-md-end{justify-content:flex-end !important}.justify-content-md-center{justify-content:center !important}.justify-content-md-between{justify-content:space-between !important}.justify-content-md-around{justify-content:space-around !important}.justify-content-md-evenly{justify-content:space-evenly !important}.align-items-md-start{align-items:flex-start !important}.align-items-md-end{align-items:flex-end !important}.align-items-md-center{align-items:center !important}.align-items-md-baseline{align-items:baseline !important}.align-items-md-stretch{align-items:stretch !important}.align-content-md-start{align-content:flex-start !important}.align-content-md-end{align-content:flex-end !important}.align-content-md-center{align-content:center !important}.align-content-md-between{align-content:space-between !important}.align-content-md-around{align-content:space-around !important}.align-content-md-stretch{align-content:stretch !important}.align-self-md-auto{align-self:auto !important}.align-self-md-start{align-self:flex-start !important}.align-self-md-end{align-self:flex-end !important}.align-self-md-center{align-self:center !important}.align-self-md-baseline{align-self:baseline !important}.align-self-md-stretch{align-self:stretch !important}.order-md-first{order:-1 !important}.order-md-0{order:0 !important}.order-md-1{order:1 !important}.order-md-2{order:2 !important}.order-md-3{order:3 !important}.order-md-4{order:4 !important}.order-md-5{order:5 !important}.order-md-last{order:6 !important}.m-md-0{margin:0 !important}.m-md-1{margin:.25rem !important}.m-md-2{margin:.5rem !important}.m-md-3{margin:1rem !important}.m-md-4{margin:1.5rem !important}.m-md-5{margin:3rem !important}.m-md-auto{margin:auto !important}.mx-md-0{margin-right:0 !important;margin-left:0 !important}.mx-md-1{margin-right:.25rem !important;margin-left:.25rem !important}.mx-md-2{margin-right:.5rem !important;margin-left:.5rem !important}.mx-md-3{margin-right:1rem !important;margin-left:1rem !important}.mx-md-4{margin-right:1.5rem !important;margin-left:1.5rem !important}.mx-md-5{margin-right:3rem !important;margin-left:3rem !important}.mx-md-auto{margin-right:auto !important;margin-left:auto !important}.my-md-0{margin-top:0 !important;margin-bottom:0 !important}.my-md-1{margin-top:.25rem !important;margin-bottom:.25rem !important}.my-md-2{margin-top:.5rem !important;margin-bottom:.5rem !important}.my-md-3{margin-top:1rem !important;margin-bottom:1rem !important}.my-md-4{margin-top:1.5rem !important;margin-bottom:1.5rem !important}.my-md-5{margin-top:3rem !important;margin-bottom:3rem !important}.my-md-auto{margin-top:auto !important;margin-bottom:auto !important}.mt-md-0{margin-top:0 !important}.mt-md-1{margin-top:.25rem !important}.mt-md-2{margin-top:.5rem !important}.mt-md-3{margin-top:1rem !important}.mt-md-4{margin-top:1.5rem !important}.mt-md-5{margin-top:3rem !important}.mt-md-auto{margin-top:auto !important}.me-md-0{margin-right:0 !important}.me-md-1{margin-right:.25rem !important}.me-md-2{margin-right:.5rem !important}.me-md-3{margin-right:1rem !important}.me-md-4{margin-right:1.5rem !important}.me-md-5{margin-right:3rem !important}.me-md-auto{margin-right:auto !important}.mb-md-0{margin-bottom:0 !important}.mb-md-1{margin-bottom:.25rem !important}.mb-md-2{margin-bottom:.5rem !important}.mb-md-3{margin-bottom:1rem !important}.mb-md-4{margin-bottom:1.5rem !important}.mb-md-5{margin-bottom:3rem !important}.mb-md-auto{margin-bottom:auto !important}.ms-md-0{margin-left:0 !important}.ms-md-1{margin-left:.25rem !important}.ms-md-2{margin-left:.5rem !important}.ms-md-3{margin-left:1rem !important}.ms-md-4{margin-left:1.5rem !important}.ms-md-5{margin-left:3rem !important}.ms-md-auto{margin-left:auto !important}.p-md-0{padding:0 !important}.p-md-1{padding:.25rem !important}.p-md-2{padding:.5rem !important}.p-md-3{padding:1rem !important}.p-md-4{padding:1.5rem !important}.p-md-5{padding:3rem !important}.px-md-0{padding-right:0 !important;padding-left:0 !important}.px-md-1{padding-right:.25rem !important;padding-left:.25rem !important}.px-md-2{padding-right:.5rem !important;padding-left:.5rem !important}.px-md-3{padding-right:1rem !important;padding-left:1rem !important}.px-md-4{padding-right:1.5rem !important;padding-left:1.5rem !important}.px-md-5{padding-right:3rem !important;padding-left:3rem !important}.py-md-0{padding-top:0 !important;padding-bottom:0 !important}.py-md-1{padding-top:.25rem !important;padding-bottom:.25rem !important}.py-md-2{padding-top:.5rem !important;padding-bottom:.5rem !important}.py-md-3{padding-top:1rem !important;padding-bottom:1rem !important}.py-md-4{padding-top:1.5rem !important;padding-bottom:1.5rem !important}.py-md-5{padding-top:3rem !important;padding-bottom:3rem !important}.pt-md-0{padding-top:0 !important}.pt-md-1{padding-top:.25rem !important}.pt-md-2{padding-top:.5rem !important}.pt-md-3{padding-top:1rem !important}.pt-md-4{padding-top:1.5rem !important}.pt-md-5{padding-top:3rem !important}.pe-md-0{padding-right:0 !important}.pe-md-1{padding-right:.25rem !important}.pe-md-2{padding-right:.5rem !important}.pe-md-3{padding-right:1rem !important}.pe-md-4{padding-right:1.5rem !important}.pe-md-5{padding-right:3rem !important}.pb-md-0{padding-bottom:0 !important}.pb-md-1{padding-bottom:.25rem !important}.pb-md-2{padding-bottom:.5rem !important}.pb-md-3{padding-bottom:1rem !important}.pb-md-4{padding-bottom:1.5rem !important}.pb-md-5{padding-bottom:3rem !important}.ps-md-0{padding-left:0 !important}.ps-md-1{padding-left:.25rem !important}.ps-md-2{padding-left:.5rem !important}.ps-md-3{padding-left:1rem !important}.ps-md-4{padding-left:1.5rem !important}.ps-md-5{padding-left:3rem !important}.text-md-start{text-align:left !important}.text-md-end{text-align:right !important}.text-md-center{text-align:center !important}}@media(min-width: 992px){.float-lg-start{float:left !important}.float-lg-end{float:right !important}.float-lg-none{float:none !important}.d-lg-inline{display:inline !important}.d-lg-inline-block{display:inline-block !important}.d-lg-block{display:block !important}.d-lg-grid{display:grid !important}.d-lg-table{display:table !important}.d-lg-table-row{display:table-row !important}.d-lg-table-cell{display:table-cell !important}.d-lg-flex{display:flex !important}.d-lg-inline-flex{display:inline-flex !important}.d-lg-none{display:none !important}.flex-lg-fill{flex:1 1 auto !important}.flex-lg-row{flex-direction:row !important}.flex-lg-column{flex-direction:column !important}.flex-lg-row-reverse{flex-direction:row-reverse !important}.flex-lg-column-reverse{flex-direction:column-reverse !important}.flex-lg-grow-0{flex-grow:0 !important}.flex-lg-grow-1{flex-grow:1 !important}.flex-lg-shrink-0{flex-shrink:0 !important}.flex-lg-shrink-1{flex-shrink:1 !important}.flex-lg-wrap{flex-wrap:wrap !important}.flex-lg-nowrap{flex-wrap:nowrap !important}.flex-lg-wrap-reverse{flex-wrap:wrap-reverse !important}.gap-lg-0{gap:0 !important}.gap-lg-1{gap:.25rem !important}.gap-lg-2{gap:.5rem !important}.gap-lg-3{gap:1rem !important}.gap-lg-4{gap:1.5rem !important}.gap-lg-5{gap:3rem !important}.justify-content-lg-start{justify-content:flex-start !important}.justify-content-lg-end{justify-content:flex-end !important}.justify-content-lg-center{justify-content:center !important}.justify-content-lg-between{justify-content:space-between !important}.justify-content-lg-around{justify-content:space-around !important}.justify-content-lg-evenly{justify-content:space-evenly !important}.align-items-lg-start{align-items:flex-start !important}.align-items-lg-end{align-items:flex-end !important}.align-items-lg-center{align-items:center !important}.align-items-lg-baseline{align-items:baseline !important}.align-items-lg-stretch{align-items:stretch !important}.align-content-lg-start{align-content:flex-start !important}.align-content-lg-end{align-content:flex-end !important}.align-content-lg-center{align-content:center !important}.align-content-lg-between{align-content:space-between !important}.align-content-lg-around{align-content:space-around !important}.align-content-lg-stretch{align-content:stretch !important}.align-self-lg-auto{align-self:auto !important}.align-self-lg-start{align-self:flex-start !important}.align-self-lg-end{align-self:flex-end !important}.align-self-lg-center{align-self:center !important}.align-self-lg-baseline{align-self:baseline !important}.align-self-lg-stretch{align-self:stretch !important}.order-lg-first{order:-1 !important}.order-lg-0{order:0 !important}.order-lg-1{order:1 !important}.order-lg-2{order:2 !important}.order-lg-3{order:3 !important}.order-lg-4{order:4 !important}.order-lg-5{order:5 !important}.order-lg-last{order:6 !important}.m-lg-0{margin:0 !important}.m-lg-1{margin:.25rem !important}.m-lg-2{margin:.5rem !important}.m-lg-3{margin:1rem !important}.m-lg-4{margin:1.5rem !important}.m-lg-5{margin:3rem !important}.m-lg-auto{margin:auto !important}.mx-lg-0{margin-right:0 !important;margin-left:0 !important}.mx-lg-1{margin-right:.25rem !important;margin-left:.25rem !important}.mx-lg-2{margin-right:.5rem !important;margin-left:.5rem !important}.mx-lg-3{margin-right:1rem !important;margin-left:1rem !important}.mx-lg-4{margin-right:1.5rem !important;margin-left:1.5rem !important}.mx-lg-5{margin-right:3rem !important;margin-left:3rem !important}.mx-lg-auto{margin-right:auto !important;margin-left:auto !important}.my-lg-0{margin-top:0 !important;margin-bottom:0 !important}.my-lg-1{margin-top:.25rem !important;margin-bottom:.25rem !important}.my-lg-2{margin-top:.5rem !important;margin-bottom:.5rem !important}.my-lg-3{margin-top:1rem !important;margin-bottom:1rem !important}.my-lg-4{margin-top:1.5rem !important;margin-bottom:1.5rem !important}.my-lg-5{margin-top:3rem !important;margin-bottom:3rem !important}.my-lg-auto{margin-top:auto !important;margin-bottom:auto !important}.mt-lg-0{margin-top:0 !important}.mt-lg-1{margin-top:.25rem !important}.mt-lg-2{margin-top:.5rem !important}.mt-lg-3{margin-top:1rem !important}.mt-lg-4{margin-top:1.5rem !important}.mt-lg-5{margin-top:3rem !important}.mt-lg-auto{margin-top:auto !important}.me-lg-0{margin-right:0 !important}.me-lg-1{margin-right:.25rem !important}.me-lg-2{margin-right:.5rem !important}.me-lg-3{margin-right:1rem !important}.me-lg-4{margin-right:1.5rem !important}.me-lg-5{margin-right:3rem !important}.me-lg-auto{margin-right:auto !important}.mb-lg-0{margin-bottom:0 !important}.mb-lg-1{margin-bottom:.25rem !important}.mb-lg-2{margin-bottom:.5rem !important}.mb-lg-3{margin-bottom:1rem !important}.mb-lg-4{margin-bottom:1.5rem !important}.mb-lg-5{margin-bottom:3rem !important}.mb-lg-auto{margin-bottom:auto !important}.ms-lg-0{margin-left:0 !important}.ms-lg-1{margin-left:.25rem !important}.ms-lg-2{margin-left:.5rem !important}.ms-lg-3{margin-left:1rem !important}.ms-lg-4{margin-left:1.5rem !important}.ms-lg-5{margin-left:3rem !important}.ms-lg-auto{margin-left:auto !important}.p-lg-0{padding:0 !important}.p-lg-1{padding:.25rem !important}.p-lg-2{padding:.5rem !important}.p-lg-3{padding:1rem !important}.p-lg-4{padding:1.5rem !important}.p-lg-5{padding:3rem !important}.px-lg-0{padding-right:0 !important;padding-left:0 !important}.px-lg-1{padding-right:.25rem !important;padding-left:.25rem !important}.px-lg-2{padding-right:.5rem !important;padding-left:.5rem !important}.px-lg-3{padding-right:1rem !important;padding-left:1rem !important}.px-lg-4{padding-right:1.5rem !important;padding-left:1.5rem !important}.px-lg-5{padding-right:3rem !important;padding-left:3rem !important}.py-lg-0{padding-top:0 !important;padding-bottom:0 !important}.py-lg-1{padding-top:.25rem !important;padding-bottom:.25rem !important}.py-lg-2{padding-top:.5rem !important;padding-bottom:.5rem !important}.py-lg-3{padding-top:1rem !important;padding-bottom:1rem !important}.py-lg-4{padding-top:1.5rem !important;padding-bottom:1.5rem !important}.py-lg-5{padding-top:3rem !important;padding-bottom:3rem !important}.pt-lg-0{padding-top:0 !important}.pt-lg-1{padding-top:.25rem !important}.pt-lg-2{padding-top:.5rem !important}.pt-lg-3{padding-top:1rem !important}.pt-lg-4{padding-top:1.5rem !important}.pt-lg-5{padding-top:3rem !important}.pe-lg-0{padding-right:0 !important}.pe-lg-1{padding-right:.25rem !important}.pe-lg-2{padding-right:.5rem !important}.pe-lg-3{padding-right:1rem !important}.pe-lg-4{padding-right:1.5rem !important}.pe-lg-5{padding-right:3rem !important}.pb-lg-0{padding-bottom:0 !important}.pb-lg-1{padding-bottom:.25rem !important}.pb-lg-2{padding-bottom:.5rem !important}.pb-lg-3{padding-bottom:1rem !important}.pb-lg-4{padding-bottom:1.5rem !important}.pb-lg-5{padding-bottom:3rem !important}.ps-lg-0{padding-left:0 !important}.ps-lg-1{padding-left:.25rem !important}.ps-lg-2{padding-left:.5rem !important}.ps-lg-3{padding-left:1rem !important}.ps-lg-4{padding-left:1.5rem !important}.ps-lg-5{padding-left:3rem !important}.text-lg-start{text-align:left !important}.text-lg-end{text-align:right !important}.text-lg-center{text-align:center !important}}@media(min-width: 1200px){.float-xl-start{float:left !important}.float-xl-end{float:right !important}.float-xl-none{float:none !important}.d-xl-inline{display:inline !important}.d-xl-inline-block{display:inline-block !important}.d-xl-block{display:block !important}.d-xl-grid{display:grid !important}.d-xl-table{display:table !important}.d-xl-table-row{display:table-row !important}.d-xl-table-cell{display:table-cell !important}.d-xl-flex{display:flex !important}.d-xl-inline-flex{display:inline-flex !important}.d-xl-none{display:none !important}.flex-xl-fill{flex:1 1 auto !important}.flex-xl-row{flex-direction:row !important}.flex-xl-column{flex-direction:column !important}.flex-xl-row-reverse{flex-direction:row-reverse !important}.flex-xl-column-reverse{flex-direction:column-reverse !important}.flex-xl-grow-0{flex-grow:0 !important}.flex-xl-grow-1{flex-grow:1 !important}.flex-xl-shrink-0{flex-shrink:0 !important}.flex-xl-shrink-1{flex-shrink:1 !important}.flex-xl-wrap{flex-wrap:wrap !important}.flex-xl-nowrap{flex-wrap:nowrap !important}.flex-xl-wrap-reverse{flex-wrap:wrap-reverse !important}.gap-xl-0{gap:0 !important}.gap-xl-1{gap:.25rem !important}.gap-xl-2{gap:.5rem !important}.gap-xl-3{gap:1rem !important}.gap-xl-4{gap:1.5rem !important}.gap-xl-5{gap:3rem !important}.justify-content-xl-start{justify-content:flex-start !important}.justify-content-xl-end{justify-content:flex-end !important}.justify-content-xl-center{justify-content:center !important}.justify-content-xl-between{justify-content:space-between !important}.justify-content-xl-around{justify-content:space-around !important}.justify-content-xl-evenly{justify-content:space-evenly !important}.align-items-xl-start{align-items:flex-start !important}.align-items-xl-end{align-items:flex-end !important}.align-items-xl-center{align-items:center !important}.align-items-xl-baseline{align-items:baseline !important}.align-items-xl-stretch{align-items:stretch !important}.align-content-xl-start{align-content:flex-start !important}.align-content-xl-end{align-content:flex-end !important}.align-content-xl-center{align-content:center !important}.align-content-xl-between{align-content:space-between !important}.align-content-xl-around{align-content:space-around !important}.align-content-xl-stretch{align-content:stretch !important}.align-self-xl-auto{align-self:auto !important}.align-self-xl-start{align-self:flex-start !important}.align-self-xl-end{align-self:flex-end !important}.align-self-xl-center{align-self:center !important}.align-self-xl-baseline{align-self:baseline !important}.align-self-xl-stretch{align-self:stretch !important}.order-xl-first{order:-1 !important}.order-xl-0{order:0 !important}.order-xl-1{order:1 !important}.order-xl-2{order:2 !important}.order-xl-3{order:3 !important}.order-xl-4{order:4 !important}.order-xl-5{order:5 !important}.order-xl-last{order:6 !important}.m-xl-0{margin:0 !important}.m-xl-1{margin:.25rem !important}.m-xl-2{margin:.5rem !important}.m-xl-3{margin:1rem !important}.m-xl-4{margin:1.5rem !important}.m-xl-5{margin:3rem !important}.m-xl-auto{margin:auto !important}.mx-xl-0{margin-right:0 !important;margin-left:0 !important}.mx-xl-1{margin-right:.25rem !important;margin-left:.25rem !important}.mx-xl-2{margin-right:.5rem !important;margin-left:.5rem !important}.mx-xl-3{margin-right:1rem !important;margin-left:1rem !important}.mx-xl-4{margin-right:1.5rem !important;margin-left:1.5rem !important}.mx-xl-5{margin-right:3rem !important;margin-left:3rem !important}.mx-xl-auto{margin-right:auto !important;margin-left:auto !important}.my-xl-0{margin-top:0 !important;margin-bottom:0 !important}.my-xl-1{margin-top:.25rem !important;margin-bottom:.25rem !important}.my-xl-2{margin-top:.5rem !important;margin-bottom:.5rem !important}.my-xl-3{margin-top:1rem !important;margin-bottom:1rem !important}.my-xl-4{margin-top:1.5rem !important;margin-bottom:1.5rem !important}.my-xl-5{margin-top:3rem !important;margin-bottom:3rem !important}.my-xl-auto{margin-top:auto !important;margin-bottom:auto !important}.mt-xl-0{margin-top:0 !important}.mt-xl-1{margin-top:.25rem !important}.mt-xl-2{margin-top:.5rem !important}.mt-xl-3{margin-top:1rem !important}.mt-xl-4{margin-top:1.5rem !important}.mt-xl-5{margin-top:3rem !important}.mt-xl-auto{margin-top:auto !important}.me-xl-0{margin-right:0 !important}.me-xl-1{margin-right:.25rem !important}.me-xl-2{margin-right:.5rem !important}.me-xl-3{margin-right:1rem !important}.me-xl-4{margin-right:1.5rem !important}.me-xl-5{margin-right:3rem !important}.me-xl-auto{margin-right:auto !important}.mb-xl-0{margin-bottom:0 !important}.mb-xl-1{margin-bottom:.25rem !important}.mb-xl-2{margin-bottom:.5rem !important}.mb-xl-3{margin-bottom:1rem !important}.mb-xl-4{margin-bottom:1.5rem !important}.mb-xl-5{margin-bottom:3rem !important}.mb-xl-auto{margin-bottom:auto !important}.ms-xl-0{margin-left:0 !important}.ms-xl-1{margin-left:.25rem !important}.ms-xl-2{margin-left:.5rem !important}.ms-xl-3{margin-left:1rem !important}.ms-xl-4{margin-left:1.5rem !important}.ms-xl-5{margin-left:3rem !important}.ms-xl-auto{margin-left:auto !important}.p-xl-0{padding:0 !important}.p-xl-1{padding:.25rem !important}.p-xl-2{padding:.5rem !important}.p-xl-3{padding:1rem !important}.p-xl-4{padding:1.5rem !important}.p-xl-5{padding:3rem !important}.px-xl-0{padding-right:0 !important;padding-left:0 !important}.px-xl-1{padding-right:.25rem !important;padding-left:.25rem !important}.px-xl-2{padding-right:.5rem !important;padding-left:.5rem !important}.px-xl-3{padding-right:1rem !important;padding-left:1rem !important}.px-xl-4{padding-right:1.5rem !important;padding-left:1.5rem !important}.px-xl-5{padding-right:3rem !important;padding-left:3rem !important}.py-xl-0{padding-top:0 !important;padding-bottom:0 !important}.py-xl-1{padding-top:.25rem !important;padding-bottom:.25rem !important}.py-xl-2{padding-top:.5rem !important;padding-bottom:.5rem !important}.py-xl-3{padding-top:1rem !important;padding-bottom:1rem !important}.py-xl-4{padding-top:1.5rem !important;padding-bottom:1.5rem !important}.py-xl-5{padding-top:3rem !important;padding-bottom:3rem !important}.pt-xl-0{padding-top:0 !important}.pt-xl-1{padding-top:.25rem !important}.pt-xl-2{padding-top:.5rem !important}.pt-xl-3{padding-top:1rem !important}.pt-xl-4{padding-top:1.5rem !important}.pt-xl-5{padding-top:3rem !important}.pe-xl-0{padding-right:0 !important}.pe-xl-1{padding-right:.25rem !important}.pe-xl-2{padding-right:.5rem !important}.pe-xl-3{padding-right:1rem !important}.pe-xl-4{padding-right:1.5rem !important}.pe-xl-5{padding-right:3rem !important}.pb-xl-0{padding-bottom:0 !important}.pb-xl-1{padding-bottom:.25rem !important}.pb-xl-2{padding-bottom:.5rem !important}.pb-xl-3{padding-bottom:1rem !important}.pb-xl-4{padding-bottom:1.5rem !important}.pb-xl-5{padding-bottom:3rem !important}.ps-xl-0{padding-left:0 !important}.ps-xl-1{padding-left:.25rem !important}.ps-xl-2{padding-left:.5rem !important}.ps-xl-3{padding-left:1rem !important}.ps-xl-4{padding-left:1.5rem !important}.ps-xl-5{padding-left:3rem !important}.text-xl-start{text-align:left !important}.text-xl-end{text-align:right !important}.text-xl-center{text-align:center !important}}@media(min-width: 1400px){.float-xxl-start{float:left !important}.float-xxl-end{float:right !important}.float-xxl-none{float:none !important}.d-xxl-inline{display:inline !important}.d-xxl-inline-block{display:inline-block !important}.d-xxl-block{display:block !important}.d-xxl-grid{display:grid !important}.d-xxl-table{display:table !important}.d-xxl-table-row{display:table-row !important}.d-xxl-table-cell{display:table-cell !important}.d-xxl-flex{display:flex !important}.d-xxl-inline-flex{display:inline-flex !important}.d-xxl-none{display:none !important}.flex-xxl-fill{flex:1 1 auto !important}.flex-xxl-row{flex-direction:row !important}.flex-xxl-column{flex-direction:column !important}.flex-xxl-row-reverse{flex-direction:row-reverse !important}.flex-xxl-column-reverse{flex-direction:column-reverse !important}.flex-xxl-grow-0{flex-grow:0 !important}.flex-xxl-grow-1{flex-grow:1 !important}.flex-xxl-shrink-0{flex-shrink:0 !important}.flex-xxl-shrink-1{flex-shrink:1 !important}.flex-xxl-wrap{flex-wrap:wrap !important}.flex-xxl-nowrap{flex-wrap:nowrap !important}.flex-xxl-wrap-reverse{flex-wrap:wrap-reverse !important}.gap-xxl-0{gap:0 !important}.gap-xxl-1{gap:.25rem !important}.gap-xxl-2{gap:.5rem !important}.gap-xxl-3{gap:1rem !important}.gap-xxl-4{gap:1.5rem !important}.gap-xxl-5{gap:3rem !important}.justify-content-xxl-start{justify-content:flex-start !important}.justify-content-xxl-end{justify-content:flex-end !important}.justify-content-xxl-center{justify-content:center !important}.justify-content-xxl-between{justify-content:space-between !important}.justify-content-xxl-around{justify-content:space-around !important}.justify-content-xxl-evenly{justify-content:space-evenly !important}.align-items-xxl-start{align-items:flex-start !important}.align-items-xxl-end{align-items:flex-end !important}.align-items-xxl-center{align-items:center !important}.align-items-xxl-baseline{align-items:baseline !important}.align-items-xxl-stretch{align-items:stretch !important}.align-content-xxl-start{align-content:flex-start !important}.align-content-xxl-end{align-content:flex-end !important}.align-content-xxl-center{align-content:center !important}.align-content-xxl-between{align-content:space-between !important}.align-content-xxl-around{align-content:space-around !important}.align-content-xxl-stretch{align-content:stretch !important}.align-self-xxl-auto{align-self:auto !important}.align-self-xxl-start{align-self:flex-start !important}.align-self-xxl-end{align-self:flex-end !important}.align-self-xxl-center{align-self:center !important}.align-self-xxl-baseline{align-self:baseline !important}.align-self-xxl-stretch{align-self:stretch !important}.order-xxl-first{order:-1 !important}.order-xxl-0{order:0 !important}.order-xxl-1{order:1 !important}.order-xxl-2{order:2 !important}.order-xxl-3{order:3 !important}.order-xxl-4{order:4 !important}.order-xxl-5{order:5 !important}.order-xxl-last{order:6 !important}.m-xxl-0{margin:0 !important}.m-xxl-1{margin:.25rem !important}.m-xxl-2{margin:.5rem !important}.m-xxl-3{margin:1rem !important}.m-xxl-4{margin:1.5rem !important}.m-xxl-5{margin:3rem !important}.m-xxl-auto{margin:auto !important}.mx-xxl-0{margin-right:0 !important;margin-left:0 !important}.mx-xxl-1{margin-right:.25rem !important;margin-left:.25rem !important}.mx-xxl-2{margin-right:.5rem !important;margin-left:.5rem !important}.mx-xxl-3{margin-right:1rem !important;margin-left:1rem !important}.mx-xxl-4{margin-right:1.5rem !important;margin-left:1.5rem !important}.mx-xxl-5{margin-right:3rem !important;margin-left:3rem !important}.mx-xxl-auto{margin-right:auto !important;margin-left:auto !important}.my-xxl-0{margin-top:0 !important;margin-bottom:0 !important}.my-xxl-1{margin-top:.25rem !important;margin-bottom:.25rem !important}.my-xxl-2{margin-top:.5rem !important;margin-bottom:.5rem !important}.my-xxl-3{margin-top:1rem !important;margin-bottom:1rem !important}.my-xxl-4{margin-top:1.5rem !important;margin-bottom:1.5rem !important}.my-xxl-5{margin-top:3rem !important;margin-bottom:3rem !important}.my-xxl-auto{margin-top:auto !important;margin-bottom:auto !important}.mt-xxl-0{margin-top:0 !important}.mt-xxl-1{margin-top:.25rem !important}.mt-xxl-2{margin-top:.5rem !important}.mt-xxl-3{margin-top:1rem !important}.mt-xxl-4{margin-top:1.5rem !important}.mt-xxl-5{margin-top:3rem !important}.mt-xxl-auto{margin-top:auto !important}.me-xxl-0{margin-right:0 !important}.me-xxl-1{margin-right:.25rem !important}.me-xxl-2{margin-right:.5rem !important}.me-xxl-3{margin-right:1rem !important}.me-xxl-4{margin-right:1.5rem !important}.me-xxl-5{margin-right:3rem !important}.me-xxl-auto{margin-right:auto !important}.mb-xxl-0{margin-bottom:0 !important}.mb-xxl-1{margin-bottom:.25rem !important}.mb-xxl-2{margin-bottom:.5rem !important}.mb-xxl-3{margin-bottom:1rem !important}.mb-xxl-4{margin-bottom:1.5rem !important}.mb-xxl-5{margin-bottom:3rem !important}.mb-xxl-auto{margin-bottom:auto !important}.ms-xxl-0{margin-left:0 !important}.ms-xxl-1{margin-left:.25rem !important}.ms-xxl-2{margin-left:.5rem !important}.ms-xxl-3{margin-left:1rem !important}.ms-xxl-4{margin-left:1.5rem !important}.ms-xxl-5{margin-left:3rem !important}.ms-xxl-auto{margin-left:auto !important}.p-xxl-0{padding:0 !important}.p-xxl-1{padding:.25rem !important}.p-xxl-2{padding:.5rem !important}.p-xxl-3{padding:1rem !important}.p-xxl-4{padding:1.5rem !important}.p-xxl-5{padding:3rem !important}.px-xxl-0{padding-right:0 !important;padding-left:0 !important}.px-xxl-1{padding-right:.25rem !important;padding-left:.25rem !important}.px-xxl-2{padding-right:.5rem !important;padding-left:.5rem !important}.px-xxl-3{padding-right:1rem !important;padding-left:1rem !important}.px-xxl-4{padding-right:1.5rem !important;padding-left:1.5rem !important}.px-xxl-5{padding-right:3rem !important;padding-left:3rem !important}.py-xxl-0{padding-top:0 !important;padding-bottom:0 !important}.py-xxl-1{padding-top:.25rem !important;padding-bottom:.25rem !important}.py-xxl-2{padding-top:.5rem !important;padding-bottom:.5rem !important}.py-xxl-3{padding-top:1rem !important;padding-bottom:1rem !important}.py-xxl-4{padding-top:1.5rem !important;padding-bottom:1.5rem !important}.py-xxl-5{padding-top:3rem !important;padding-bottom:3rem !important}.pt-xxl-0{padding-top:0 !important}.pt-xxl-1{padding-top:.25rem !important}.pt-xxl-2{padding-top:.5rem !important}.pt-xxl-3{padding-top:1rem !important}.pt-xxl-4{padding-top:1.5rem !important}.pt-xxl-5{padding-top:3rem !important}.pe-xxl-0{padding-right:0 !important}.pe-xxl-1{padding-right:.25rem !important}.pe-xxl-2{padding-right:.5rem !important}.pe-xxl-3{padding-right:1rem !important}.pe-xxl-4{padding-right:1.5rem !important}.pe-xxl-5{padding-right:3rem !important}.pb-xxl-0{padding-bottom:0 !important}.pb-xxl-1{padding-bottom:.25rem !important}.pb-xxl-2{padding-bottom:.5rem !important}.pb-xxl-3{padding-bottom:1rem !important}.pb-xxl-4{padding-bottom:1.5rem !important}.pb-xxl-5{padding-bottom:3rem !important}.ps-xxl-0{padding-left:0 !important}.ps-xxl-1{padding-left:.25rem !important}.ps-xxl-2{padding-left:.5rem !important}.ps-xxl-3{padding-left:1rem !important}.ps-xxl-4{padding-left:1.5rem !important}.ps-xxl-5{padding-left:3rem !important}.text-xxl-start{text-align:left !important}.text-xxl-end{text-align:right !important}.text-xxl-center{text-align:center !important}}@media(min-width: 1200px){.fs-1{font-size:2.5rem !important}.fs-2{font-size:2rem !important}.fs-3{font-size:1.75rem !important}.fs-4{font-size:1.5rem !important}}@media print{.d-print-inline{display:inline !important}.d-print-inline-block{display:inline-block !important}.d-print-block{display:block !important}.d-print-grid{display:grid !important}.d-print-table{display:table !important}.d-print-table-row{display:table-row !important}.d-print-table-cell{display:table-cell !important}.d-print-flex{display:flex !important}.d-print-inline-flex{display:inline-flex !important}.d-print-none{display:none !important}}div{color:red}',"",{version:3,sources:["webpack://./src/style.scss","webpack://./node_modules/bootstrap/scss/bootstrap.scss","webpack://./node_modules/bootstrap/scss/_root.scss","webpack://./node_modules/bootstrap/scss/_reboot.scss","webpack://./node_modules/bootstrap/scss/vendor/_rfs.scss","webpack://./node_modules/bootstrap/scss/_variables.scss","webpack://./node_modules/bootstrap/scss/mixins/_border-radius.scss","webpack://./node_modules/bootstrap/scss/_type.scss","webpack://./node_modules/bootstrap/scss/mixins/_lists.scss","webpack://./node_modules/bootstrap/scss/_images.scss","webpack://./node_modules/bootstrap/scss/mixins/_image.scss","webpack://./node_modules/bootstrap/scss/_containers.scss","webpack://./node_modules/bootstrap/scss/mixins/_container.scss","webpack://./node_modules/bootstrap/scss/mixins/_breakpoints.scss","webpack://./node_modules/bootstrap/scss/_grid.scss","webpack://./node_modules/bootstrap/scss/mixins/_grid.scss","webpack://./node_modules/bootstrap/scss/_tables.scss","webpack://./node_modules/bootstrap/scss/mixins/_table-variants.scss","webpack://./node_modules/bootstrap/scss/forms/_labels.scss","webpack://./node_modules/bootstrap/scss/forms/_form-text.scss","webpack://./node_modules/bootstrap/scss/forms/_form-control.scss","webpack://./node_modules/bootstrap/scss/mixins/_transition.scss","webpack://./node_modules/bootstrap/scss/mixins/_gradients.scss","webpack://./node_modules/bootstrap/scss/forms/_form-select.scss","webpack://./node_modules/bootstrap/scss/forms/_form-check.scss","webpack://./node_modules/bootstrap/scss/forms/_form-range.scss","webpack://./node_modules/bootstrap/scss/forms/_floating-labels.scss","webpack://./node_modules/bootstrap/scss/forms/_input-group.scss","webpack://./node_modules/bootstrap/scss/mixins/_forms.scss","webpack://./node_modules/bootstrap/scss/_buttons.scss","webpack://./node_modules/bootstrap/scss/mixins/_buttons.scss","webpack://./node_modules/bootstrap/scss/_transitions.scss","webpack://./node_modules/bootstrap/scss/_dropdown.scss","webpack://./node_modules/bootstrap/scss/mixins/_caret.scss","webpack://./node_modules/bootstrap/scss/_button-group.scss","webpack://./node_modules/bootstrap/scss/_nav.scss","webpack://./node_modules/bootstrap/scss/_navbar.scss","webpack://./node_modules/bootstrap/scss/_card.scss","webpack://./node_modules/bootstrap/scss/_accordion.scss","webpack://./node_modules/bootstrap/scss/_breadcrumb.scss","webpack://./node_modules/bootstrap/scss/_pagination.scss","webpack://./node_modules/bootstrap/scss/mixins/_pagination.scss","webpack://./node_modules/bootstrap/scss/_badge.scss","webpack://./node_modules/bootstrap/scss/_alert.scss","webpack://./node_modules/bootstrap/scss/mixins/_alert.scss","webpack://./node_modules/bootstrap/scss/_progress.scss","webpack://./node_modules/bootstrap/scss/_list-group.scss","webpack://./node_modules/bootstrap/scss/mixins/_list-group.scss","webpack://./node_modules/bootstrap/scss/_close.scss","webpack://./node_modules/bootstrap/scss/_toasts.scss","webpack://./node_modules/bootstrap/scss/_modal.scss","webpack://./node_modules/bootstrap/scss/mixins/_backdrop.scss","webpack://./node_modules/bootstrap/scss/_tooltip.scss","webpack://./node_modules/bootstrap/scss/mixins/_reset-text.scss","webpack://./node_modules/bootstrap/scss/_popover.scss","webpack://./node_modules/bootstrap/scss/_carousel.scss","webpack://./node_modules/bootstrap/scss/mixins/_clearfix.scss","webpack://./node_modules/bootstrap/scss/_spinners.scss","webpack://./node_modules/bootstrap/scss/_offcanvas.scss","webpack://./node_modules/bootstrap/scss/_placeholders.scss","webpack://./node_modules/bootstrap/scss/helpers/_colored-links.scss","webpack://./node_modules/bootstrap/scss/helpers/_ratio.scss","webpack://./node_modules/bootstrap/scss/helpers/_position.scss","webpack://./node_modules/bootstrap/scss/helpers/_stacks.scss","webpack://./node_modules/bootstrap/scss/helpers/_visually-hidden.scss","webpack://./node_modules/bootstrap/scss/mixins/_visually-hidden.scss","webpack://./node_modules/bootstrap/scss/helpers/_stretched-link.scss","webpack://./node_modules/bootstrap/scss/helpers/_text-truncation.scss","webpack://./node_modules/bootstrap/scss/mixins/_text-truncate.scss","webpack://./node_modules/bootstrap/scss/helpers/_vr.scss","webpack://./node_modules/bootstrap/scss/mixins/_utilities.scss","webpack://./node_modules/bootstrap/scss/utilities/_api.scss"],names:[],mappings:"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CoBnxB9B,YACE,UAAA,CACA,aAAA,CACA,SAAA,CACA,4BAAA,CACA,eAAA,CAEA,kBACE,SAAA,CAIA,wCAAA,2DpB89BuC,CoB79BvC,oCAAA,2DpB69BuC,CoB19BzC,8BACE,QAAA,CAGF,kCACE,UpB+8BuC,CoB98BvC,WpB88BuC,CoB78BvC,mBAAA,CHzBF,wBjBkCQ,CoBPN,QpB88BuC,CC19BvC,kBAAA,CeHE,sGIkBF,CACA,eAAA,CJfE,uCIMJ,kCJLM,eAAA,CAAA,CIgBJ,yCHjCF,wBjB8+ByC,CoBx8BzC,2CACE,UpBw7B8B,CoBv7B9B,YpBw7B8B,CoBv7B9B,iBAAA,CACA,cpBu7B8B,CoBt7B9B,wBpBpCO,CoBqCP,wBAAA,CnB7BA,kBAAA,CmBkCF,8BACE,UpBo7BuC,CoBn7BvC,WpBm7BuC,CiBt+BzC,wBjBkCQ,CoBmBN,QpBo7BuC,CC19BvC,kBAAA,CeHE,sGI4CF,CACA,eAAA,CJzCE,uCIiCJ,8BJhCM,eAAA,CAAA,CI0CJ,qCH3DF,wBjB8+ByC,CoB96BzC,8BACE,UpB85B8B,CoB75B9B,YpB85B8B,CoB75B9B,iBAAA,CACA,cpB65B8B,CoB55B9B,wBpB9DO,CoB+DP,wBAAA,CnBvDA,kBAAA,CmB4DF,qBACE,mBAAA,CAEA,2CACE,wBpBtEK,CoByEP,uCACE,wBpB1EK,CqBbX,eACE,iBAAA,CAEA,yDAEE,yBrBy/B8B,CqBx/B9B,gBrBy/B8B,CqBt/BhC,qBACE,iBAAA,CACA,KAAA,CACA,MAAA,CACA,WAAA,CACA,mBAAA,CACA,mBAAA,CACA,4BAAA,CACA,oBAAA,CLDE,4DKEF,CLEE,uCKXJ,qBLYM,eAAA,CAAA,CKCN,6BACE,mBAAA,CAEA,0CACE,iBAAA,CAGF,wFAEE,oBrBm+B4B,CqBl+B5B,sBrBm+B4B,CqBh+B9B,8CACE,oBrB89B4B,CqB79B5B,sBrB89B4B,CqB19BhC,4BACE,oBrBw9B8B,CqBv9B9B,sBrBw9B8B,CqBl9B9B,sIACE,WrBk9B4B,CqBj9B5B,6DrBk9B4B,CqB78B9B,oDACE,WrB28B4B,CqB18B5B,6DrB28B4B,CsB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TW,CyBUX,oBzBVW,CyBab,2DAEE,2CAAA,CAGF,kKAKE,UArBa,CAsBb,wBzBxBW,CyByBX,oBzBzBW,CyB2BX,gMAKI,2CAAA,CAKN,sDAEE,azBvCW,CyBwCX,4BAAA,CDvDF,qBCmBA,azBJa,CyBKb,oBzBLa,CyBOb,2BACE,UATY,CAUZ,wBzBTW,CyBUX,oBzBVW,CyBab,iEAEE,0CAAA,CAGF,iLAKE,UArBa,CAsBb,wBzBxBW,CyByBX,oBzBzBW,CyB2BX,+MAKI,0CAAA,CAKN,4DAEE,azBvCW,CyBwCX,4BAAA,CDvDF,oBCmBA,azBJa,CyBKb,oBzBLa,CyBOb,0BACE,UATY,CAUZ,wBzBTW,CyBUX,oBzBVW,CyBab,+DAEE,0CAAA,CAGF,4KAKE,UArBa,CAsBb,wBzBxBW,CyByBX,oBzBzBW,CyB2BX,0MAKI,0CAAA,CAKN,0DAEE,azBvCW,CyBwCX,4BAAA,CDvDF,mBCmBA,azBJa,CyBKb,oBzBLa,CyBOb,yBACE,UATY,CAUZ,wBzBTW,CyBUX,oBzBVW,CyBab,6DAEE,4CAAA,CAGF,uKAKE,UArBa,CAsBb,wBzBxBW,CyByBX,oBzBzBW,CyB2BX,qMAKI,4CAAA,CAKN,wDAEE,azBvCW,CyBwCX,4BAAA,CDvDF,kBCmBA,azBJa,CyBKb,oBzBLa,CyBOb,wBACE,UATY,CAUZ,wBzBTW,CyBUX,oBzBVW,CyBab,2DAEE,yCAAA,CAGF,kKAKE,UArBa,CAsBb,wBzBxBW,CyByBX,oBzBzBW,CyB2BX,gMAKI,yCAAA,CAKN,sDAEE,azBvCW,CyBwCX,4BAAA,CD3CJ,UACE,exBigB4B,CwBhgB5B,axBzCQ,CwB0CR,yBxB6WwC,CwB3WxC,gBACE,axB4WsC,CwBpWxC,sCAEE,axB/EO,CwB0FX,2BCuBE,kBAAA,C1BsKI,iBALI,CE7QN,mBAAA,CuByFJ,2BCmBE,oBAAA,C1BsKI,kBALI,CE7QN,mBAAA,CyBnBJ,MVgBM,8BUfJ,CVmBI,uCUpBN,MVqBQ,eAAA,CAAA,CUlBN,iBACE,SAAA,CAMF,qBACE,YAAA,CAIJ,YACE,QAAA,CACA,eAAA,CVDI,2BUEJ,CVEI,uCULN,YVMQ,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F,0BACE,qBAAA,CrCgSE,iBALI,CqCpRF,iDnCqCJ,4BAAA,CACA,+BAAA,CmChCI,gDnCiBJ,6BAAA,CACA,gCAAA,CmChCF,0BACE,oBAAA,CrCgSE,kBALI,CqCpRF,iDnCqCJ,4BAAA,CACA,+BAAA,CmChCI,gDnCiBJ,6BAAA,CACA,gCAAA,CoC/BJ,OACE,oBAAA,CACA,mBAAA,CtC8RI,gBALI,CsCvRR,erCukB4B,CqCtkB5B,aAAA,CACA,UrCHS,CqCIT,iBAAA,CACA,kBAAA,CACA,uBAAA,CpCKE,oBAAA,CAAA,aoCCA,YAAA,CAKJ,YACE,iBAAA,CACA,QAAA,CCvBF,OACE,iBAAA,CACA,iBAAA,CACA,kBtCk6C8B,CsCj6C9B,4BAAA,CrCWE,oBAAA,CqCNJ,eAEE,aAAA,CAIF,YACE,etC4jB4B,CsCpjB9B,mBACE,kBtCm5C8B,CsCh5C9B,8BACE,iBAAA,CACA,KAAA,CACA,OAAA,CACA,SAAA,CACA,oBAAA,CAeF,eClDA,aD8Cc,CrB5Cd,wBqB0CmB,CC1CnB,oBD2Ce,CCzCf,2BACE,aAAA,CD6CF,iBClDA,aD8Cc,CrB5Cd,wBqB0CmB,CC1CnB,oBD2Ce,CCzCf,6BACE,aAAA,CD6CF,eClDA,aD8Cc,CrB5Cd,wBqB0CmB,CC1CnB,oBD2Ce,CCzCf,2BACE,aAAA,CD6CF,YClDA,aDgDgB,CrB9ChB,wBqB0CmB,CC1CnB,oBD2Ce,CCzCf,wBACE,aAAA,CD6CF,eClDA,aDgDgB,CrB9ChB,wBqB0CmB,CC1CnB,oBD2Ce,CCzCf,2BACE,aAAA,CD6CF,cClDA,aD8Cc,CrB5Cd,wBqB0CmB,CC1CnB,oBD2Ce,CCzCf,0BACE,aAAA,CD6CF,aClDA,aDgDgB,CrB9ChB,wBqB0CmB,CC1CnB,oBD2Ce,CCzCf,yBACE,aAAA,CD6CF,YClDA,aD8Cc,CrB5Cd,wBqB0CmB,CC1CnB,oBD2Ce,CCzCf,wBACE,aAAA,CCHF,gCACE,GAAA,0BxCk7CgC,CAAA,CwC76CpC,UACE,YAAA,CACA,WxC26CkC,CwC16ClC,eAAA,CzCwRI,iBALI,CyCjRR,wBxCLS,CCSP,oBAAA,CuCCJ,cA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",sourcesContent:['@import "custom";\r\n@import "~bootstrap/scss/bootstrap";\r\n\r\ndiv {\r\n    color: red;\r\n}\r\n','/*!\n * Bootstrap v5.1.3 (https://getbootstrap.com/)\n * Copyright 2011-2021 The Bootstrap Authors\n * Copyright 2011-2021 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n */\n\n// scss-docs-start import-stack\n// Configuration\n@import "functions";\n@import "variables";\n@import "mixins";\n@import "utilities";\n\n// Layout & components\n@import "root";\n@import "reboot";\n@import "type";\n@import "images";\n@import "containers";\n@import "grid";\n@import "tables";\n@import "forms";\n@import "buttons";\n@import "transitions";\n@import "dropdown";\n@import "button-group";\n@import "nav";\n@import "navbar";\n@import "card";\n@import "accordion";\n@import "breadcrumb";\n@import "pagination";\n@import "badge";\n@import "alert";\n@import "progress";\n@import "list-group";\n@import "close";\n@import "toasts";\n@import "modal";\n@import "tooltip";\n@import "popover";\n@import "carousel";\n@import "spinners";\n@import "offcanvas";\n@import "placeholders";\n\n// Helpers\n@import "helpers";\n\n// Utilities\n@import "utilities/api";\n// scss-docs-end import-stack\n',":root {\n  // Note: Custom variable values only support SassScript inside `#{}`.\n\n  // Colors\n  //\n  // Generate palettes for full colors, grays, and theme colors.\n\n  @each $color, $value in $colors {\n    --#{$variable-prefix}#{$color}: #{$value};\n  }\n\n  @each $color, $value in $grays {\n    --#{$variable-prefix}gray-#{$color}: #{$value};\n  }\n\n  @each $color, $value in $theme-colors {\n    --#{$variable-prefix}#{$color}: #{$value};\n  }\n\n  @each $color, $value in $theme-colors-rgb {\n    --#{$variable-prefix}#{$color}-rgb: #{$value};\n  }\n\n  --#{$variable-prefix}white-rgb: #{to-rgb($white)};\n  --#{$variable-prefix}black-rgb: #{to-rgb($black)};\n  --#{$variable-prefix}body-color-rgb: #{to-rgb($body-color)};\n  --#{$variable-prefix}body-bg-rgb: #{to-rgb($body-bg)};\n\n  // Fonts\n\n  // Note: Use `inspect` for lists so that quoted items keep the quotes.\n  // See https://github.com/sass/sass/issues/2383#issuecomment-336349172\n  --#{$variable-prefix}font-sans-serif: #{inspect($font-family-sans-serif)};\n  --#{$variable-prefix}font-monospace: #{inspect($font-family-monospace)};\n  --#{$variable-prefix}gradient: #{$gradient};\n\n  // Root and body\n  // stylelint-disable custom-property-empty-line-before\n  // scss-docs-start root-body-variables\n  @if $font-size-root != null {\n    --#{$variable-prefix}root-font-size: #{$font-size-root};\n  }\n  --#{$variable-prefix}body-font-family: #{$font-family-base};\n  --#{$variable-prefix}body-font-size: #{$font-size-base};\n  --#{$variable-prefix}body-font-weight: #{$font-weight-base};\n  --#{$variable-prefix}body-line-height: #{$line-height-base};\n  --#{$variable-prefix}body-color: #{$body-color};\n  @if $body-text-align != null {\n    --#{$variable-prefix}body-text-align: #{$body-text-align};\n  }\n  --#{$variable-prefix}body-bg: #{$body-bg};\n  // scss-docs-end root-body-variables\n  // stylelint-enable custom-property-empty-line-before\n}\n",'// stylelint-disable declaration-no-important, selector-no-qualifying-type, property-no-vendor-prefix\n\n\n// Reboot\n//\n// Normalization of HTML elements, manually forked from Normalize.css to remove\n// styles targeting irrelevant browsers while applying new styles.\n//\n// Normalize is licensed MIT. https://github.com/necolas/normalize.css\n\n\n// Document\n//\n// Change from `box-sizing: content-box` so that `width` is not affected by `padding` or `border`.\n\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n}\n\n\n// Root\n//\n// Ability to the value of the root font sizes, affecting the value of `rem`.\n// null by default, thus nothing is generated.\n\n:root {\n  @if $font-size-root != null {\n    font-size: var(--#{$variable-prefix}root-font-size);\n  }\n\n  @if $enable-smooth-scroll {\n    @media (prefers-reduced-motion: no-preference) {\n      scroll-behavior: smooth;\n    }\n  }\n}\n\n\n// Body\n//\n// 1. Remove the margin in all browsers.\n// 2. As a best practice, apply a default `background-color`.\n// 3. Prevent adjustments of font size after orientation changes in iOS.\n// 4. Change the default tap highlight to be completely transparent in iOS.\n\n// scss-docs-start reboot-body-rules\nbody {\n  margin: 0; // 1\n  font-family: var(--#{$variable-prefix}body-font-family);\n  @include font-size(var(--#{$variable-prefix}body-font-size));\n  font-weight: var(--#{$variable-prefix}body-font-weight);\n  line-height: var(--#{$variable-prefix}body-line-height);\n  color: var(--#{$variable-prefix}body-color);\n  text-align: var(--#{$variable-prefix}body-text-align);\n  background-color: var(--#{$variable-prefix}body-bg); // 2\n  -webkit-text-size-adjust: 100%; // 3\n  -webkit-tap-highlight-color: rgba($black, 0); // 4\n}\n// scss-docs-end reboot-body-rules\n\n\n// Content grouping\n//\n// 1. Reset Firefox\'s gray color\n// 2. Set correct height and prevent the `size` attribute to make the `hr` look like an input field\n\nhr {\n  margin: $hr-margin-y 0;\n  color: $hr-color; // 1\n  background-color: currentColor;\n  border: 0;\n  opacity: $hr-opacity;\n}\n\nhr:not([size]) {\n  height: $hr-height; // 2\n}\n\n\n// Typography\n//\n// 1. Remove top margins from headings\n//    By default, `<h1>`-`<h6>` all receive top and bottom margins. We nuke the top\n//    margin for easier control within type scales as it avoids margin collapsing.\n\n%heading {\n  margin-top: 0; // 1\n  margin-bottom: $headings-margin-bottom;\n  font-family: $headings-font-family;\n  font-style: $headings-font-style;\n  font-weight: $headings-font-weight;\n  line-height: $headings-line-height;\n  color: $headings-color;\n}\n\nh1 {\n  @extend %heading;\n  @include font-size($h1-font-size);\n}\n\nh2 {\n  @extend %heading;\n  @include font-size($h2-font-size);\n}\n\nh3 {\n  @extend %heading;\n  @include font-size($h3-font-size);\n}\n\nh4 {\n  @extend %heading;\n  @include font-size($h4-font-size);\n}\n\nh5 {\n  @extend %heading;\n  @include font-size($h5-font-size);\n}\n\nh6 {\n  @extend %heading;\n  @include font-size($h6-font-size);\n}\n\n\n// Reset margins on paragraphs\n//\n// Similarly, the top margin on `<p>`s get reset. However, we also reset the\n// bottom margin to use `rem` units instead of `em`.\n\np {\n  margin-top: 0;\n  margin-bottom: $paragraph-margin-bottom;\n}\n\n\n// Abbreviations\n//\n// 1. Duplicate behavior to the data-bs-* attribute for our tooltip plugin\n// 2. Add the correct text decoration in Chrome, Edge, Opera, and Safari.\n// 3. Add explicit cursor to indicate changed behavior.\n// 4. Prevent the text-decoration to be skipped.\n\nabbr[title],\nabbr[data-bs-original-title] { // 1\n  text-decoration: underline dotted; // 2\n  cursor: help; // 3\n  text-decoration-skip-ink: none; // 4\n}\n\n\n// Address\n\naddress {\n  margin-bottom: 1rem;\n  font-style: normal;\n  line-height: inherit;\n}\n\n\n// Lists\n\nol,\nul {\n  padding-left: 2rem;\n}\n\nol,\nul,\ndl {\n  margin-top: 0;\n  margin-bottom: 1rem;\n}\n\nol ol,\nul ul,\nol ul,\nul ol {\n  margin-bottom: 0;\n}\n\ndt {\n  font-weight: $dt-font-weight;\n}\n\n// 1. Undo browser default\n\ndd {\n  margin-bottom: .5rem;\n  margin-left: 0; // 1\n}\n\n\n// Blockquote\n\nblockquote {\n  margin: 0 0 1rem;\n}\n\n\n// Strong\n//\n// Add the correct font weight in Chrome, Edge, and Safari\n\nb,\nstrong {\n  font-weight: $font-weight-bolder;\n}\n\n\n// Small\n//\n// Add the correct font size in all browsers\n\nsmall {\n  @include font-size($small-font-size);\n}\n\n\n// Mark\n\nmark {\n  padding: $mark-padding;\n  background-color: $mark-bg;\n}\n\n\n// Sub and Sup\n//\n// Prevent `sub` and `sup` elements from affecting the line height in\n// all browsers.\n\nsub,\nsup {\n  position: relative;\n  @include font-size($sub-sup-font-size);\n  line-height: 0;\n  vertical-align: baseline;\n}\n\nsub { bottom: -.25em; }\nsup { top: -.5em; }\n\n\n// Links\n\na {\n  color: $link-color;\n  text-decoration: $link-decoration;\n\n  &:hover {\n    color: $link-hover-color;\n    text-decoration: $link-hover-decoration;\n  }\n}\n\n// And undo these styles for placeholder links/named anchors (without href).\n// It would be more straightforward to just use a[href] in previous block, but that\n// causes specificity issues in many other styles that are too complex to fix.\n// See https://github.com/twbs/bootstrap/issues/19402\n\na:not([href]):not([class]) {\n  &,\n  &:hover {\n    color: inherit;\n    text-decoration: none;\n  }\n}\n\n\n// Code\n\npre,\ncode,\nkbd,\nsamp {\n  font-family: $font-family-code;\n  @include font-size(1em); // Correct the odd `em` font sizing in all browsers.\n  direction: ltr #{"/* rtl:ignore */"};\n  unicode-bidi: bidi-override;\n}\n\n// 1. Remove browser default top margin\n// 2. Reset browser default of `1em` to use `rem`s\n// 3. Don\'t allow content to break outside\n\npre {\n  display: block;\n  margin-top: 0; // 1\n  margin-bottom: 1rem; // 2\n  overflow: auto; // 3\n  @include font-size($code-font-size);\n  color: $pre-color;\n\n  // Account for some code outputs that place code tags in pre tags\n  code {\n    @include font-size(inherit);\n    color: inherit;\n    word-break: normal;\n  }\n}\n\ncode {\n  @include font-size($code-font-size);\n  color: $code-color;\n  word-wrap: break-word;\n\n  // Streamline the style when inside anchors to avoid broken underline and more\n  a > & {\n    color: inherit;\n  }\n}\n\nkbd {\n  padding: $kbd-padding-y $kbd-padding-x;\n  @include font-size($kbd-font-size);\n  color: $kbd-color;\n  background-color: $kbd-bg;\n  @include border-radius($border-radius-sm);\n\n  kbd {\n    padding: 0;\n    @include font-size(1em);\n    font-weight: $nested-kbd-font-weight;\n  }\n}\n\n\n// Figures\n//\n// Apply a consistent margin strategy (matches our type styles).\n\nfigure {\n  margin: 0 0 1rem;\n}\n\n\n// Images and content\n\nimg,\nsvg {\n  vertical-align: middle;\n}\n\n\n// Tables\n//\n// Prevent double borders\n\ntable {\n  caption-side: bottom;\n  border-collapse: collapse;\n}\n\ncaption {\n  padding-top: $table-cell-padding-y;\n  padding-bottom: $table-cell-padding-y;\n  color: $table-caption-color;\n  text-align: left;\n}\n\n// 1. Removes font-weight bold by inheriting\n// 2. Matches default `<td>` alignment by inheriting `text-align`.\n// 3. Fix alignment for Safari\n\nth {\n  font-weight: $table-th-font-weight; // 1\n  text-align: inherit; // 2\n  text-align: -webkit-match-parent; // 3\n}\n\nthead,\ntbody,\ntfoot,\ntr,\ntd,\nth {\n  border-color: inherit;\n  border-style: solid;\n  border-width: 0;\n}\n\n\n// Forms\n//\n// 1. Allow labels to use `margin` for spacing.\n\nlabel {\n  display: inline-block; // 1\n}\n\n// Remove the default `border-radius` that macOS Chrome adds.\n// See https://github.com/twbs/bootstrap/issues/24093\n\nbutton {\n  // stylelint-disable-next-line property-disallowed-list\n  border-radius: 0;\n}\n\n// Explicitly remove focus outline in Chromium when it shouldn\'t be\n// visible (e.g. as result of mouse click or touch tap). It already\n// should be doing this automatically, but seems to currently be\n// confused and applies its very visible two-tone outline anyway.\n\nbutton:focus:not(:focus-visible) {\n  outline: 0;\n}\n\n// 1. Remove the margin in Firefox and Safari\n\ninput,\nbutton,\nselect,\noptgroup,\ntextarea {\n  margin: 0; // 1\n  font-family: inherit;\n  @include font-size(inherit);\n  line-height: inherit;\n}\n\n// Remove the inheritance of text transform in Firefox\nbutton,\nselect {\n  text-transform: none;\n}\n// Set the cursor for non-`<button>` buttons\n//\n// Details at https://github.com/twbs/bootstrap/pull/30562\n[role="button"] {\n  cursor: pointer;\n}\n\nselect {\n  // Remove the inheritance of word-wrap in Safari.\n  // See https://github.com/twbs/bootstrap/issues/24990\n  word-wrap: normal;\n\n  // Undo the opacity change from Chrome\n  &:disabled {\n    opacity: 1;\n  }\n}\n\n// Remove the dropdown arrow in Chrome from inputs built with datalists.\n// See https://stackoverflow.com/a/54997118\n\n[list]::-webkit-calendar-picker-indicator {\n  display: none;\n}\n\n// 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`\n//    controls in Android 4.\n// 2. Correct the inability to style clickable types in iOS and Safari.\n// 3. Opinionated: add "hand" cursor to non-disabled button elements.\n\nbutton,\n[type="button"], // 1\n[type="reset"],\n[type="submit"] {\n  -webkit-appearance: button; // 2\n\n  @if $enable-button-pointers {\n    &:not(:disabled) {\n      cursor: pointer; // 3\n    }\n  }\n}\n\n// Remove inner border and padding from Firefox, but don\'t restore the outline like Normalize.\n\n::-moz-focus-inner {\n  padding: 0;\n  border-style: none;\n}\n\n// 1. Textareas should really only resize vertically so they don\'t break their (horizontal) containers.\n\ntextarea {\n  resize: vertical; // 1\n}\n\n// 1. Browsers set a default `min-width: min-content;` on fieldsets,\n//    unlike e.g. `<div>`s, which have `min-width: 0;` by default.\n//    So we reset that to ensure fieldsets behave more like a standard block element.\n//    See https://github.com/twbs/bootstrap/issues/12359\n//    and https://html.spec.whatwg.org/multipage/#the-fieldset-and-legend-elements\n// 2. Reset the default outline behavior of fieldsets so they don\'t affect page layout.\n\nfieldset {\n  min-width: 0; // 1\n  padding: 0; // 2\n  margin: 0; // 2\n  border: 0; // 2\n}\n\n// 1. By using `float: left`, the legend will behave like a block element.\n//    This way the border of a fieldset wraps around the legend if present.\n// 2. Fix wrapping bug.\n//    See https://github.com/twbs/bootstrap/issues/29712\n\nlegend {\n  float: left; // 1\n  width: 100%;\n  padding: 0;\n  margin-bottom: $legend-margin-bottom;\n  @include font-size($legend-font-size);\n  font-weight: $legend-font-weight;\n  line-height: inherit;\n\n  + * {\n    clear: left; // 2\n  }\n}\n\n// Fix height of inputs with a type of datetime-local, date, month, week, or time\n// See https://github.com/twbs/bootstrap/issues/18842\n\n::-webkit-datetime-edit-fields-wrapper,\n::-webkit-datetime-edit-text,\n::-webkit-datetime-edit-minute,\n::-webkit-datetime-edit-hour-field,\n::-webkit-datetime-edit-day-field,\n::-webkit-datetime-edit-month-field,\n::-webkit-datetime-edit-year-field {\n  padding: 0;\n}\n\n::-webkit-inner-spin-button {\n  height: auto;\n}\n\n// 1. Correct the outline style in Safari.\n// 2. This overrides the extra rounded corners on search inputs in iOS so that our\n//    `.form-control` class can properly style them. Note that this cannot simply\n//    be added to `.form-control` as it\'s not specific enough. For details, see\n//    https://github.com/twbs/bootstrap/issues/11586.\n\n[type="search"] {\n  outline-offset: -2px; // 1\n  -webkit-appearance: textfield; // 2\n}\n\n// 1. A few input types should stay LTR\n// See https://rtlstyling.com/posts/rtl-styling#form-inputs\n// 2. RTL only output\n// See https://rtlcss.com/learn/usage-guide/control-directives/#raw\n\n/* rtl:raw:\n[type="tel"],\n[type="url"],\n[type="email"],\n[type="number"] {\n  direction: ltr;\n}\n*/\n\n// Remove the inner padding in Chrome and Safari on macOS.\n\n::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n// Remove padding around color pickers in webkit browsers\n\n::-webkit-color-swatch-wrapper {\n  padding: 0;\n}\n\n\n// Inherit font family and line height for file input buttons\n\n::file-selector-button {\n  font: inherit;\n}\n\n// 1. Change font properties to `inherit`\n// 2. Correct the inability to style clickable types in iOS and Safari.\n\n::-webkit-file-upload-button {\n  font: inherit; // 1\n  -webkit-appearance: button; // 2\n}\n\n// Correct element displays\n\noutput {\n  display: inline-block;\n}\n\n// Remove border from iframe\n\niframe {\n  border: 0;\n}\n\n// Summary\n//\n// 1. Add the correct display in all browsers\n\nsummary {\n  display: list-item; // 1\n  cursor: pointer;\n}\n\n\n// Progress\n//\n// Add the correct vertical alignment in Chrome, Firefox, and Opera.\n\nprogress {\n  vertical-align: baseline;\n}\n\n\n// Hidden attribute\n//\n// Always hide an element with the `hidden` HTML attribute.\n\n[hidden] {\n  display: none !important;\n}\n','// stylelint-disable property-blacklist, scss/dollar-variable-default\n\n// SCSS RFS mixin\n//\n// Automated responsive values for font sizes, paddings, margins and much more\n//\n// Licensed under MIT (https://github.com/twbs/rfs/blob/main/LICENSE)\n\n// Configuration\n\n// Base value\n$rfs-base-value: 1.25rem !default;\n$rfs-unit: rem !default;\n\n@if $rfs-unit != rem and $rfs-unit != px {\n  @error "`#{$rfs-unit}` is not a valid unit for $rfs-unit. Use `px` or `rem`.";\n}\n\n// Breakpoint at where values start decreasing if screen width is smaller\n$rfs-breakpoint: 1200px !default;\n$rfs-breakpoint-unit: px !default;\n\n@if $rfs-breakpoint-unit != px and $rfs-breakpoint-unit != em and $rfs-breakpoint-unit != rem {\n  @error "`#{$rfs-breakpoint-unit}` is not a valid unit for $rfs-breakpoint-unit. Use `px`, `em` or `rem`.";\n}\n\n// Resize values based on screen height and width\n$rfs-two-dimensional: false !default;\n\n// Factor of decrease\n$rfs-factor: 10 !default;\n\n@if type-of($rfs-factor) != number or $rfs-factor <= 1 {\n  @error "`#{$rfs-factor}` is not a valid  $rfs-factor, it must be greater than 1.";\n}\n\n// Mode. Possibilities: "min-media-query", "max-media-query"\n$rfs-mode: min-media-query !default;\n\n// Generate enable or disable classes. Possibilities: false, "enable" or "disable"\n$rfs-class: false !default;\n\n// 1 rem = $rfs-rem-value px\n$rfs-rem-value: 16 !default;\n\n// Safari iframe resize bug: https://github.com/twbs/rfs/issues/14\n$rfs-safari-iframe-resize-bug-fix: false !default;\n\n// Disable RFS by setting $enable-rfs to false\n$enable-rfs: true !default;\n\n// Cache $rfs-base-value unit\n$rfs-base-value-unit: unit($rfs-base-value);\n\n@function divide($dividend, $divisor, $precision: 10) {\n  $sign: if($dividend > 0 and $divisor > 0 or $dividend < 0 and $divisor < 0, 1, -1);\n  $dividend: abs($dividend);\n  $divisor: abs($divisor);\n  @if $dividend == 0 {\n    @return 0;\n  }\n  @if $divisor == 0 {\n    @error "Cannot divide by 0";\n  }\n  $remainder: $dividend;\n  $result: 0;\n  $factor: 10;\n  @while ($remainder > 0 and $precision >= 0) {\n    $quotient: 0;\n    @while ($remainder >= $divisor) {\n      $remainder: $remainder - $divisor;\n      $quotient: $quotient + 1;\n    }\n    $result: $result * 10 + $quotient;\n    $factor: $factor * .1;\n    $remainder: $remainder * 10;\n    $precision: $precision - 1;\n    @if ($precision < 0 and $remainder >= $divisor * 5) {\n      $result: $result + 1;\n    }\n  }\n  $result: $result * $factor * $sign;\n  $dividend-unit: unit($dividend);\n  $divisor-unit: unit($divisor);\n  $unit-map: (\n    "px": 1px,\n    "rem": 1rem,\n    "em": 1em,\n    "%": 1%\n  );\n  @if ($dividend-unit != $divisor-unit and map-has-key($unit-map, $dividend-unit)) {\n    $result: $result * map-get($unit-map, $dividend-unit);\n  }\n  @return $result;\n}\n\n// Remove px-unit from $rfs-base-value for calculations\n@if $rfs-base-value-unit == px {\n  $rfs-base-value: divide($rfs-base-value, $rfs-base-value * 0 + 1);\n}\n@else if $rfs-base-value-unit == rem {\n  $rfs-base-value: divide($rfs-base-value, divide($rfs-base-value * 0 + 1, $rfs-rem-value));\n}\n\n// Cache $rfs-breakpoint unit to prevent multiple calls\n$rfs-breakpoint-unit-cache: unit($rfs-breakpoint);\n\n// Remove unit from $rfs-breakpoint for calculations\n@if $rfs-breakpoint-unit-cache == px {\n  $rfs-breakpoint: divide($rfs-breakpoint, $rfs-breakpoint * 0 + 1);\n}\n@else if $rfs-breakpoint-unit-cache == rem or $rfs-breakpoint-unit-cache == "em" {\n  $rfs-breakpoint: divide($rfs-breakpoint, divide($rfs-breakpoint * 0 + 1, $rfs-rem-value));\n}\n\n// Calculate the media query value\n$rfs-mq-value: if($rfs-breakpoint-unit == px, #{$rfs-breakpoint}px, #{divide($rfs-breakpoint, $rfs-rem-value)}#{$rfs-breakpoint-unit});\n$rfs-mq-property-width: if($rfs-mode == max-media-query, max-width, min-width);\n$rfs-mq-property-height: if($rfs-mode == max-media-query, max-height, min-height);\n\n// Internal mixin used to determine which media query needs to be used\n@mixin _rfs-media-query {\n  @if $rfs-two-dimensional {\n    @if $rfs-mode == max-media-query {\n      @media (#{$rfs-mq-property-width}: #{$rfs-mq-value}), (#{$rfs-mq-property-height}: #{$rfs-mq-value}) {\n        @content;\n      }\n    }\n    @else {\n      @media (#{$rfs-mq-property-width}: #{$rfs-mq-value}) and (#{$rfs-mq-property-height}: #{$rfs-mq-value}) {\n        @content;\n      }\n    }\n  }\n  @else {\n    @media (#{$rfs-mq-property-width}: #{$rfs-mq-value}) {\n      @content;\n    }\n  }\n}\n\n// Internal mixin that adds disable classes to the selector if needed.\n@mixin _rfs-rule {\n  @if $rfs-class == disable and $rfs-mode == max-media-query {\n    // Adding an extra class increases specificity, which prevents the media query to override the property\n    &,\n    .disable-rfs &,\n    &.disable-rfs {\n      @content;\n    }\n  }\n  @else if $rfs-class == enable and $rfs-mode == min-media-query {\n    .enable-rfs &,\n    &.enable-rfs {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n\n// Internal mixin that adds enable classes to the selector if needed.\n@mixin _rfs-media-query-rule {\n\n  @if $rfs-class == enable {\n    @if $rfs-mode == min-media-query {\n      @content;\n    }\n\n    @include _rfs-media-query {\n      .enable-rfs &,\n      &.enable-rfs {\n        @content;\n      }\n    }\n  }\n  @else {\n    @if $rfs-class == disable and $rfs-mode == min-media-query {\n      .disable-rfs &,\n      &.disable-rfs {\n        @content;\n      }\n    }\n    @include _rfs-media-query {\n      @content;\n    }\n  }\n}\n\n// Helper function to get the formatted non-responsive value\n@function rfs-value($values) {\n  // Convert to list\n  $values: if(type-of($values) != list, ($values,), $values);\n\n  $val: \'\';\n\n  // Loop over each value and calculate value\n  @each $value in $values {\n    @if $value == 0 {\n      $val: $val + \' 0\';\n    }\n    @else {\n      // Cache $value unit\n      $unit: if(type-of($value) == "number", unit($value), false);\n\n      @if $unit == px {\n        // Convert to rem if needed\n        $val: $val + \' \' + if($rfs-unit == rem, #{divide($value, $value * 0 + $rfs-rem-value)}rem, $value);\n      }\n      @else if $unit == rem {\n        // Convert to px if needed\n        $val: $val + \' \' + if($rfs-unit == px, #{divide($value, $value * 0 + 1) * $rfs-rem-value}px, $value);\n      }\n      @else {\n        // If $value isn\'t a number (like inherit) or $value has a unit (not px or rem, like 1.5em) or $ is 0, just print the value\n        $val: $val + \' \' + $value;\n      }\n    }\n  }\n\n  // Remove first space\n  @return unquote(str-slice($val, 2));\n}\n\n// Helper function to get the responsive value calculated by RFS\n@function rfs-fluid-value($values) {\n  // Convert to list\n  $values: if(type-of($values) != list, ($values,), $values);\n\n  $val: \'\';\n\n  // Loop over each value and calculate value\n  @each $value in $values {\n    @if $value == 0 {\n      $val: $val + \' 0\';\n    }\n\n    @else {\n      // Cache $value unit\n      $unit: if(type-of($value) == "number", unit($value), false);\n\n      // If $value isn\'t a number (like inherit) or $value has a unit (not px or rem, like 1.5em) or $ is 0, just print the value\n      @if not $unit or $unit != px and $unit != rem {\n        $val: $val + \' \' + $value;\n      }\n\n      @else {\n        // Remove unit from $value for calculations\n        $value: divide($value, $value * 0 + if($unit == px, 1, divide(1, $rfs-rem-value)));\n\n        // Only add the media query if the value is greater than the minimum value\n        @if abs($value) <= $rfs-base-value or not $enable-rfs {\n          $val: $val + \' \' +  if($rfs-unit == rem, #{divide($value, $rfs-rem-value)}rem, #{$value}px);\n        }\n        @else {\n          // Calculate the minimum value\n          $value-min: $rfs-base-value + divide(abs($value) - $rfs-base-value, $rfs-factor);\n\n          // Calculate difference between $value and the minimum value\n          $value-diff: abs($value) - $value-min;\n\n          // Base value formatting\n          $min-width: if($rfs-unit == rem, #{divide($value-min, $rfs-rem-value)}rem, #{$value-min}px);\n\n          // Use negative value if needed\n          $min-width: if($value < 0, -$min-width, $min-width);\n\n          // Use `vmin` if two-dimensional is enabled\n          $variable-unit: if($rfs-two-dimensional, vmin, vw);\n\n          // Calculate the variable width between 0 and $rfs-breakpoint\n          $variable-width: #{divide($value-diff * 100, $rfs-breakpoint)}#{$variable-unit};\n\n          // Return the calculated value\n          $val: $val + \' calc(\' + $min-width + if($value < 0, \' - \', \' + \') + $variable-width + \')\';\n        }\n      }\n    }\n  }\n\n  // Remove first space\n  @return unquote(str-slice($val, 2));\n}\n\n// RFS mixin\n@mixin rfs($values, $property: font-size) {\n  @if $values != null {\n    $val: rfs-value($values);\n    $fluidVal: rfs-fluid-value($values);\n\n    // Do not print the media query if responsive & non-responsive values are the same\n    @if $val == $fluidVal {\n      #{$property}: $val;\n    }\n    @else {\n      @include _rfs-rule {\n        #{$property}: if($rfs-mode == max-media-query, $val, $fluidVal);\n\n        // Include safari iframe resize fix if needed\n        min-width: if($rfs-safari-iframe-resize-bug-fix, (0 * 1vw), null);\n      }\n\n      @include _rfs-media-query-rule {\n        #{$property}: if($rfs-mode == max-media-query, $fluidVal, $val);\n      }\n    }\n  }\n}\n\n// Shorthand helper mixins\n@mixin font-size($value) {\n  @include rfs($value);\n}\n\n@mixin padding($value) {\n  @include rfs($value, padding);\n}\n\n@mixin padding-top($value) {\n  @include rfs($value, padding-top);\n}\n\n@mixin padding-right($value) {\n  @include rfs($value, padding-right);\n}\n\n@mixin padding-bottom($value) {\n  @include rfs($value, padding-bottom);\n}\n\n@mixin padding-left($value) {\n  @include rfs($value, padding-left);\n}\n\n@mixin margin($value) {\n  @include rfs($value, margin);\n}\n\n@mixin margin-top($value) {\n  @include rfs($value, margin-top);\n}\n\n@mixin margin-right($value) {\n  @include rfs($value, margin-right);\n}\n\n@mixin margin-bottom($value) {\n  @include rfs($value, margin-bottom);\n}\n\n@mixin margin-left($value) {\n  @include rfs($value, margin-left);\n}\n','// Variables\n//\n// Variables should follow the `$component-state-property-size` formula for\n// consistent naming. Ex: $nav-link-disabled-color and $modal-content-box-shadow-xs.\n\n// Color system\n\n// scss-docs-start gray-color-variables\n$white:    #fff !default;\n$gray-100: #f8f9fa !default;\n$gray-200: #e9ecef !default;\n$gray-300: #dee2e6 !default;\n$gray-400: #ced4da !default;\n$gray-500: #adb5bd !default;\n$gray-600: #6c757d !default;\n$gray-700: #495057 !default;\n$gray-800: #343a40 !default;\n$gray-900: #212529 !default;\n$black:    #000 !default;\n// scss-docs-end gray-color-variables\n\n// fusv-disable\n// scss-docs-start gray-colors-map\n$grays: (\n  "100": $gray-100,\n  "200": $gray-200,\n  "300": $gray-300,\n  "400": $gray-400,\n  "500": $gray-500,\n  "600": $gray-600,\n  "700": $gray-700,\n  "800": $gray-800,\n  "900": $gray-900\n) !default;\n// scss-docs-end gray-colors-map\n// fusv-enable\n\n// scss-docs-start color-variables\n$blue:    #0d6efd !default;\n$indigo:  #6610f2 !default;\n$purple:  #6f42c1 !default;\n$pink:    #d63384 !default;\n$red:     #dc3545 !default;\n$orange:  #fd7e14 !default;\n$yellow:  #ffc107 !default;\n$green:   #198754 !default;\n$teal:    #20c997 !default;\n$cyan:    #0dcaf0 !default;\n// scss-docs-end color-variables\n\n// scss-docs-start colors-map\n$colors: (\n  "blue":       $blue,\n  "indigo":     $indigo,\n  "purple":     $purple,\n  "pink":       $pink,\n  "red":        $red,\n  "orange":     $orange,\n  "yellow":     $yellow,\n  "green":      $green,\n  "teal":       $teal,\n  "cyan":       $cyan,\n  "white":      $white,\n  "gray":       $gray-600,\n  "gray-dark":  $gray-800\n) !default;\n// scss-docs-end colors-map\n\n// scss-docs-start theme-color-variables\n$primary:       $blue !default;\n$secondary:     $gray-600 !default;\n$success:       $green !default;\n$info:          $cyan !default;\n$warning:       $yellow !default;\n$danger:        $red !default;\n$light:         $gray-100 !default;\n$dark:          $gray-900 !default;\n// scss-docs-end theme-color-variables\n\n// scss-docs-start theme-colors-map\n$theme-colors: (\n  "primary":    $primary,\n  "secondary":  $secondary,\n  "success":    $success,\n  "info":       $info,\n  "warning":    $warning,\n  "danger":     $danger,\n  "light":      $light,\n  "dark":       $dark\n) !default;\n// scss-docs-end theme-colors-map\n\n// scss-docs-start theme-colors-rgb\n$theme-colors-rgb: map-loop($theme-colors, to-rgb, "$value") !default;\n// scss-docs-end theme-colors-rgb\n\n// The contrast ratio to reach against white, to determine if color changes from "light" to "dark". Acceptable values for WCAG 2.0 are 3, 4.5 and 7.\n// See https://www.w3.org/TR/WCAG20/#visual-audio-contrast-contrast\n$min-contrast-ratio:   4.5 !default;\n\n// Customize the light and dark text colors for use in our color contrast function.\n$color-contrast-dark:      $black !default;\n$color-contrast-light:     $white !default;\n\n// fusv-disable\n$blue-100: tint-color($blue, 80%) !default;\n$blue-200: tint-color($blue, 60%) !default;\n$blue-300: tint-color($blue, 40%) !default;\n$blue-400: tint-color($blue, 20%) !default;\n$blue-500: $blue !default;\n$blue-600: shade-color($blue, 20%) !default;\n$blue-700: shade-color($blue, 40%) !default;\n$blue-800: shade-color($blue, 60%) !default;\n$blue-900: shade-color($blue, 80%) !default;\n\n$indigo-100: tint-color($indigo, 80%) !default;\n$indigo-200: tint-color($indigo, 60%) !default;\n$indigo-300: tint-color($indigo, 40%) !default;\n$indigo-400: tint-color($indigo, 20%) !default;\n$indigo-500: $indigo !default;\n$indigo-600: shade-color($indigo, 20%) !default;\n$indigo-700: shade-color($indigo, 40%) !default;\n$indigo-800: shade-color($indigo, 60%) !default;\n$indigo-900: shade-color($indigo, 80%) !default;\n\n$purple-100: tint-color($purple, 80%) !default;\n$purple-200: tint-color($purple, 60%) !default;\n$purple-300: tint-color($purple, 40%) !default;\n$purple-400: tint-color($purple, 20%) !default;\n$purple-500: $purple !default;\n$purple-600: shade-color($purple, 20%) !default;\n$purple-700: shade-color($purple, 40%) !default;\n$purple-800: shade-color($purple, 60%) !default;\n$purple-900: shade-color($purple, 80%) !default;\n\n$pink-100: tint-color($pink, 80%) !default;\n$pink-200: tint-color($pink, 60%) !default;\n$pink-300: tint-color($pink, 40%) !default;\n$pink-400: tint-color($pink, 20%) !default;\n$pink-500: $pink !default;\n$pink-600: shade-color($pink, 20%) !default;\n$pink-700: shade-color($pink, 40%) !default;\n$pink-800: shade-color($pink, 60%) !default;\n$pink-900: shade-color($pink, 80%) !default;\n\n$red-100: tint-color($red, 80%) !default;\n$red-200: tint-color($red, 60%) !default;\n$red-300: tint-color($red, 40%) !default;\n$red-400: tint-color($red, 20%) !default;\n$red-500: $red !default;\n$red-600: shade-color($red, 20%) !default;\n$red-700: shade-color($red, 40%) !default;\n$red-800: shade-color($red, 60%) !default;\n$red-900: shade-color($red, 80%) !default;\n\n$orange-100: tint-color($orange, 80%) !default;\n$orange-200: tint-color($orange, 60%) !default;\n$orange-300: tint-color($orange, 40%) !default;\n$orange-400: tint-color($orange, 20%) !default;\n$orange-500: $orange !default;\n$orange-600: shade-color($orange, 20%) !default;\n$orange-700: shade-color($orange, 40%) !default;\n$orange-800: shade-color($orange, 60%) !default;\n$orange-900: shade-color($orange, 80%) !default;\n\n$yellow-100: tint-color($yellow, 80%) !default;\n$yellow-200: tint-color($yellow, 60%) !default;\n$yellow-300: tint-color($yellow, 40%) !default;\n$yellow-400: tint-color($yellow, 20%) !default;\n$yellow-500: $yellow !default;\n$yellow-600: shade-color($yellow, 20%) !default;\n$yellow-700: shade-color($yellow, 40%) !default;\n$yellow-800: shade-color($yellow, 60%) !default;\n$yellow-900: shade-color($yellow, 80%) !default;\n\n$green-100: tint-color($green, 80%) !default;\n$green-200: tint-color($green, 60%) !default;\n$green-300: tint-color($green, 40%) !default;\n$green-400: tint-color($green, 20%) !default;\n$green-500: $green !default;\n$green-600: shade-color($green, 20%) !default;\n$green-700: shade-color($green, 40%) !default;\n$green-800: shade-color($green, 60%) !default;\n$green-900: shade-color($green, 80%) !default;\n\n$teal-100: tint-color($teal, 80%) !default;\n$teal-200: tint-color($teal, 60%) !default;\n$teal-300: tint-color($teal, 40%) !default;\n$teal-400: tint-color($teal, 20%) !default;\n$teal-500: $teal !default;\n$teal-600: shade-color($teal, 20%) !default;\n$teal-700: shade-color($teal, 40%) !default;\n$teal-800: shade-color($teal, 60%) !default;\n$teal-900: shade-color($teal, 80%) !default;\n\n$cyan-100: tint-color($cyan, 80%) !default;\n$cyan-200: tint-color($cyan, 60%) !default;\n$cyan-300: tint-color($cyan, 40%) !default;\n$cyan-400: tint-color($cyan, 20%) !default;\n$cyan-500: $cyan !default;\n$cyan-600: shade-color($cyan, 20%) !default;\n$cyan-700: shade-color($cyan, 40%) !default;\n$cyan-800: shade-color($cyan, 60%) !default;\n$cyan-900: shade-color($cyan, 80%) !default;\n\n$blues: (\n  "blue-100": $blue-100,\n  "blue-200": $blue-200,\n  "blue-300": $blue-300,\n  "blue-400": $blue-400,\n  "blue-500": $blue-500,\n  "blue-600": $blue-600,\n  "blue-700": $blue-700,\n  "blue-800": $blue-800,\n  "blue-900": $blue-900\n) !default;\n\n$indigos: (\n  "indigo-100": $indigo-100,\n  "indigo-200": $indigo-200,\n  "indigo-300": $indigo-300,\n  "indigo-400": $indigo-400,\n  "indigo-500": $indigo-500,\n  "indigo-600": $indigo-600,\n  "indigo-700": $indigo-700,\n  "indigo-800": $indigo-800,\n  "indigo-900": $indigo-900\n) !default;\n\n$purples: (\n  "purple-100": $purple-200,\n  "purple-200": $purple-100,\n  "purple-300": $purple-300,\n  "purple-400": $purple-400,\n  "purple-500": $purple-500,\n  "purple-600": $purple-600,\n  "purple-700": $purple-700,\n  "purple-800": $purple-800,\n  "purple-900": $purple-900\n) !default;\n\n$pinks: (\n  "pink-100": $pink-100,\n  "pink-200": $pink-200,\n  "pink-300": $pink-300,\n  "pink-400": $pink-400,\n  "pink-500": $pink-500,\n  "pink-600": $pink-600,\n  "pink-700": $pink-700,\n  "pink-800": $pink-800,\n  "pink-900": $pink-900\n) !default;\n\n$reds: (\n  "red-100": $red-100,\n  "red-200": $red-200,\n  "red-300": $red-300,\n  "red-400": $red-400,\n  "red-500": $red-500,\n  "red-600": $red-600,\n  "red-700": $red-700,\n  "red-800": $red-800,\n  "red-900": $red-900\n) !default;\n\n$oranges: (\n  "orange-100": $orange-100,\n  "orange-200": $orange-200,\n  "orange-300": $orange-300,\n  "orange-400": $orange-400,\n  "orange-500": $orange-500,\n  "orange-600": $orange-600,\n  "orange-700": $orange-700,\n  "orange-800": $orange-800,\n  "orange-900": $orange-900\n) !default;\n\n$yellows: (\n  "yellow-100": $yellow-100,\n  "yellow-200": $yellow-200,\n  "yellow-300": $yellow-300,\n  "yellow-400": $yellow-400,\n  "yellow-500": $yellow-500,\n  "yellow-600": $yellow-600,\n  "yellow-700": $yellow-700,\n  "yellow-800": $yellow-800,\n  "yellow-900": $yellow-900\n) !default;\n\n$greens: (\n  "green-100": $green-100,\n  "green-200": $green-200,\n  "green-300": $green-300,\n  "green-400": $green-400,\n  "green-500": $green-500,\n  "green-600": $green-600,\n  "green-700": $green-700,\n  "green-800": $green-800,\n  "green-900": $green-900\n) !default;\n\n$teals: (\n  "teal-100": $teal-100,\n  "teal-200": $teal-200,\n  "teal-300": $teal-300,\n  "teal-400": $teal-400,\n  "teal-500": $teal-500,\n  "teal-600": $teal-600,\n  "teal-700": $teal-700,\n  "teal-800": $teal-800,\n  "teal-900": $teal-900\n) !default;\n\n$cyans: (\n  "cyan-100": $cyan-100,\n  "cyan-200": $cyan-200,\n  "cyan-300": $cyan-300,\n  "cyan-400": $cyan-400,\n  "cyan-500": $cyan-500,\n  "cyan-600": $cyan-600,\n  "cyan-700": $cyan-700,\n  "cyan-800": $cyan-800,\n  "cyan-900": $cyan-900\n) !default;\n// fusv-enable\n\n// Characters which are escaped by the escape-svg function\n$escaped-characters: (\n  ("<", "%3c"),\n  (">", "%3e"),\n  ("#", "%23"),\n  ("(", "%28"),\n  (")", "%29"),\n) !default;\n\n// Options\n//\n// Quickly modify global styling by enabling or disabling optional features.\n\n$enable-caret:                true !default;\n$enable-rounded:              true !default;\n$enable-shadows:              false !default;\n$enable-gradients:            false !default;\n$enable-transitions:          true !default;\n$enable-reduced-motion:       true !default;\n$enable-smooth-scroll:        true !default;\n$enable-grid-classes:         true !default;\n$enable-cssgrid:              false !default;\n$enable-button-pointers:      true !default;\n$enable-rfs:                  true !default;\n$enable-validation-icons:     true !default;\n$enable-negative-margins:     false !default;\n$enable-deprecation-messages: true !default;\n$enable-important-utilities:  true !default;\n\n// Prefix for :root CSS variables\n\n$variable-prefix:             bs- !default;\n\n// Gradient\n//\n// The gradient which is added to components if `$enable-gradients` is `true`\n// This gradient is also added to elements with `.bg-gradient`\n// scss-docs-start variable-gradient\n$gradient: linear-gradient(180deg, rgba($white, .15), rgba($white, 0)) !default;\n// scss-docs-end variable-gradient\n\n// Spacing\n//\n// Control the default styling of most Bootstrap elements by modifying these\n// variables. Mostly focused on spacing.\n// You can add more entries to the $spacers map, should you need more variation.\n\n// scss-docs-start spacer-variables-maps\n$spacer: 1rem !default;\n$spacers: (\n  0: 0,\n  1: $spacer * .25,\n  2: $spacer * .5,\n  3: $spacer,\n  4: $spacer * 1.5,\n  5: $spacer * 3,\n) !default;\n\n$negative-spacers: if($enable-negative-margins, negativify-map($spacers), null) !default;\n// scss-docs-end spacer-variables-maps\n\n// Position\n//\n// Define the edge positioning anchors of the position utilities.\n\n// scss-docs-start position-map\n$position-values: (\n  0: 0,\n  50: 50%,\n  100: 100%\n) !default;\n// scss-docs-end position-map\n\n// Body\n//\n// Settings for the `<body>` element.\n\n$body-bg:                   $white !default;\n$body-color:                $gray-900 !default;\n$body-text-align:           null !default;\n\n// Utilities maps\n//\n// Extends the default `$theme-colors` maps to help create our utilities.\n\n// Come v6, we\'ll de-dupe these variables. Until then, for backward compatibility, we keep them to reassign.\n// scss-docs-start utilities-colors\n$utilities-colors: $theme-colors-rgb !default;\n// scss-docs-end utilities-colors\n\n// scss-docs-start utilities-text-colors\n$utilities-text: map-merge(\n  $utilities-colors,\n  (\n    "black": to-rgb($black),\n    "white": to-rgb($white),\n    "body": to-rgb($body-color)\n  )\n) !default;\n$utilities-text-colors: map-loop($utilities-text, rgba-css-var, "$key", "text") !default;\n// scss-docs-end utilities-text-colors\n\n// scss-docs-start utilities-bg-colors\n$utilities-bg: map-merge(\n  $utilities-colors,\n  (\n    "black": to-rgb($black),\n    "white": to-rgb($white),\n    "body": to-rgb($body-bg)\n  )\n) !default;\n$utilities-bg-colors: map-loop($utilities-bg, rgba-css-var, "$key", "bg") !default;\n// scss-docs-end utilities-bg-colors\n\n// Links\n//\n// Style anchor elements.\n\n$link-color:                              $primary !default;\n$link-decoration:                         underline !default;\n$link-shade-percentage:                   20% !default;\n$link-hover-color:                        shift-color($link-color, $link-shade-percentage) !default;\n$link-hover-decoration:                   null !default;\n\n$stretched-link-pseudo-element:           after !default;\n$stretched-link-z-index:                  1 !default;\n\n// Paragraphs\n//\n// Style p element.\n\n$paragraph-margin-bottom:   1rem !default;\n\n\n// Grid breakpoints\n//\n// Define the minimum dimensions at which your layout will change,\n// adapting to different screen sizes, for use in media queries.\n\n// scss-docs-start grid-breakpoints\n$grid-breakpoints: (\n  xs: 0,\n  sm: 576px,\n  md: 768px,\n  lg: 992px,\n  xl: 1200px,\n  xxl: 1400px\n) !default;\n// scss-docs-end grid-breakpoints\n\n@include _assert-ascending($grid-breakpoints, "$grid-breakpoints");\n@include _assert-starts-at-zero($grid-breakpoints, "$grid-breakpoints");\n\n\n// Grid containers\n//\n// Define the maximum width of `.container` for different screen sizes.\n\n// scss-docs-start container-max-widths\n$container-max-widths: (\n  sm: 540px,\n  md: 720px,\n  lg: 960px,\n  xl: 1140px,\n  xxl: 1320px\n) !default;\n// scss-docs-end container-max-widths\n\n@include _assert-ascending($container-max-widths, "$container-max-widths");\n\n\n// Grid columns\n//\n// Set the number of columns and specify the width of the gutters.\n\n$grid-columns:                12 !default;\n$grid-gutter-width:           1.5rem !default;\n$grid-row-columns:            6 !default;\n\n$gutters: $spacers !default;\n\n// Container padding\n\n$container-padding-x: $grid-gutter-width * .5 !default;\n\n\n// Components\n//\n// Define common padding and border radius sizes and more.\n\n// scss-docs-start border-variables\n$border-width:                1px !default;\n$border-widths: (\n  1: 1px,\n  2: 2px,\n  3: 3px,\n  4: 4px,\n  5: 5px\n) !default;\n\n$border-color:                $gray-300 !default;\n// scss-docs-end border-variables\n\n// scss-docs-start border-radius-variables\n$border-radius:               .25rem !default;\n$border-radius-sm:            .2rem !default;\n$border-radius-lg:            .3rem !default;\n$border-radius-pill:          50rem !default;\n// scss-docs-end border-radius-variables\n\n// scss-docs-start box-shadow-variables\n$box-shadow:                  0 .5rem 1rem rgba($black, .15) !default;\n$box-shadow-sm:               0 .125rem .25rem rgba($black, .075) !default;\n$box-shadow-lg:               0 1rem 3rem rgba($black, .175) !default;\n$box-shadow-inset:            inset 0 1px 2px rgba($black, .075) !default;\n// scss-docs-end box-shadow-variables\n\n$component-active-color:      $white !default;\n$component-active-bg:         $primary !default;\n\n// scss-docs-start caret-variables\n$caret-width:                 .3em !default;\n$caret-vertical-align:        $caret-width * .85 !default;\n$caret-spacing:               $caret-width * .85 !default;\n// scss-docs-end caret-variables\n\n$transition-base:             all .2s ease-in-out !default;\n$transition-fade:             opacity .15s linear !default;\n// scss-docs-start collapse-transition\n$transition-collapse:         height .35s ease !default;\n$transition-collapse-width:   width .35s ease !default;\n// scss-docs-end collapse-transition\n\n// stylelint-disable function-disallowed-list\n// scss-docs-start aspect-ratios\n$aspect-ratios: (\n  "1x1": 100%,\n  "4x3": calc(3 / 4 * 100%),\n  "16x9": calc(9 / 16 * 100%),\n  "21x9": calc(9 / 21 * 100%)\n) !default;\n// scss-docs-end aspect-ratios\n// stylelint-enable function-disallowed-list\n\n// Typography\n//\n// Font, line-height, and color for body text, headings, and more.\n\n// scss-docs-start font-variables\n// stylelint-disable value-keyword-case\n$font-family-sans-serif:      system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", "Liberation Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji" !default;\n$font-family-monospace:       SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace !default;\n// stylelint-enable value-keyword-case\n$font-family-base:            var(--#{$variable-prefix}font-sans-serif) !default;\n$font-family-code:            var(--#{$variable-prefix}font-monospace) !default;\n\n// $font-size-root affects the value of `rem`, which is used for as well font sizes, paddings, and margins\n// $font-size-base affects the font size of the body text\n$font-size-root:              null !default;\n$font-size-base:              1rem !default; // Assumes the browser default, typically `16px`\n$font-size-sm:                $font-size-base * .875 !default;\n$font-size-lg:                $font-size-base * 1.25 !default;\n\n$font-weight-lighter:         lighter !default;\n$font-weight-light:           300 !default;\n$font-weight-normal:          400 !default;\n$font-weight-bold:            700 !default;\n$font-weight-bolder:          bolder !default;\n\n$font-weight-base:            $font-weight-normal !default;\n\n$line-height-base:            1.5 !default;\n$line-height-sm:              1.25 !default;\n$line-height-lg:              2 !default;\n\n$h1-font-size:                $font-size-base * 2.5 !default;\n$h2-font-size:                $font-size-base * 2 !default;\n$h3-font-size:                $font-size-base * 1.75 !default;\n$h4-font-size:                $font-size-base * 1.5 !default;\n$h5-font-size:                $font-size-base * 1.25 !default;\n$h6-font-size:                $font-size-base !default;\n// scss-docs-end font-variables\n\n// scss-docs-start font-sizes\n$font-sizes: (\n  1: $h1-font-size,\n  2: $h2-font-size,\n  3: $h3-font-size,\n  4: $h4-font-size,\n  5: $h5-font-size,\n  6: $h6-font-size\n) !default;\n// scss-docs-end font-sizes\n\n// scss-docs-start headings-variables\n$headings-margin-bottom:      $spacer * .5 !default;\n$headings-font-family:        null !default;\n$headings-font-style:         null !default;\n$headings-font-weight:        500 !default;\n$headings-line-height:        1.2 !default;\n$headings-color:              null !default;\n// scss-docs-end headings-variables\n\n// scss-docs-start display-headings\n$display-font-sizes: (\n  1: 5rem,\n  2: 4.5rem,\n  3: 4rem,\n  4: 3.5rem,\n  5: 3rem,\n  6: 2.5rem\n) !default;\n\n$display-font-weight: 300 !default;\n$display-line-height: $headings-line-height !default;\n// scss-docs-end display-headings\n\n// scss-docs-start type-variables\n$lead-font-size:              $font-size-base * 1.25 !default;\n$lead-font-weight:            300 !default;\n\n$small-font-size:             .875em !default;\n\n$sub-sup-font-size:           .75em !default;\n\n$text-muted:                  $gray-600 !default;\n\n$initialism-font-size:        $small-font-size !default;\n\n$blockquote-margin-y:         $spacer !default;\n$blockquote-font-size:        $font-size-base * 1.25 !default;\n$blockquote-footer-color:     $gray-600 !default;\n$blockquote-footer-font-size: $small-font-size !default;\n\n$hr-margin-y:                 $spacer !default;\n$hr-color:                    inherit !default;\n$hr-height:                   $border-width !default;\n$hr-opacity:                  .25 !default;\n\n$legend-margin-bottom:        .5rem !default;\n$legend-font-size:            1.5rem !default;\n$legend-font-weight:          null !default;\n\n$mark-padding:                .2em !default;\n\n$dt-font-weight:              $font-weight-bold !default;\n\n$nested-kbd-font-weight:      $font-weight-bold !default;\n\n$list-inline-padding:         .5rem !default;\n\n$mark-bg:                     #fcf8e3 !default;\n// scss-docs-end type-variables\n\n\n// Tables\n//\n// Customizes the `.table` component with basic values, each used across all table variations.\n\n// scss-docs-start table-variables\n$table-cell-padding-y:        .5rem !default;\n$table-cell-padding-x:        .5rem !default;\n$table-cell-padding-y-sm:     .25rem !default;\n$table-cell-padding-x-sm:     .25rem !default;\n\n$table-cell-vertical-align:   top !default;\n\n$table-color:                 $body-color !default;\n$table-bg:                    transparent !default;\n$table-accent-bg:             transparent !default;\n\n$table-th-font-weight:        null !default;\n\n$table-striped-color:         $table-color !default;\n$table-striped-bg-factor:     .05 !default;\n$table-striped-bg:            rgba($black, $table-striped-bg-factor) !default;\n\n$table-active-color:          $table-color !default;\n$table-active-bg-factor:      .1 !default;\n$table-active-bg:             rgba($black, $table-active-bg-factor) !default;\n\n$table-hover-color:           $table-color !default;\n$table-hover-bg-factor:       .075 !default;\n$table-hover-bg:              rgba($black, $table-hover-bg-factor) !default;\n\n$table-border-factor:         .1 !default;\n$table-border-width:          $border-width !default;\n$table-border-color:          $border-color !default;\n\n$table-striped-order:         odd !default;\n\n$table-group-separator-color: currentColor !default;\n\n$table-caption-color:         $text-muted !default;\n\n$table-bg-scale:              -80% !default;\n// scss-docs-end table-variables\n\n// scss-docs-start table-loop\n$table-variants: (\n  "primary":    shift-color($primary, $table-bg-scale),\n  "secondary":  shift-color($secondary, $table-bg-scale),\n  "success":    shift-color($success, $table-bg-scale),\n  "info":       shift-color($info, $table-bg-scale),\n  "warning":    shift-color($warning, $table-bg-scale),\n  "danger":     shift-color($danger, $table-bg-scale),\n  "light":      $light,\n  "dark":       $dark,\n) !default;\n// scss-docs-end table-loop\n\n\n// Buttons + Forms\n//\n// Shared variables that are reassigned to `$input-` and `$btn-` specific variables.\n\n// scss-docs-start input-btn-variables\n$input-btn-padding-y:         .375rem !default;\n$input-btn-padding-x:         .75rem !default;\n$input-btn-font-family:       null !default;\n$input-btn-font-size:         $font-size-base !default;\n$input-btn-line-height:       $line-height-base !default;\n\n$input-btn-focus-width:         .25rem !default;\n$input-btn-focus-color-opacity: .25 !default;\n$input-btn-focus-color:         rgba($component-active-bg, $input-btn-focus-color-opacity) !default;\n$input-btn-focus-blur:          0 !default;\n$input-btn-focus-box-shadow:    0 0 $input-btn-focus-blur $input-btn-focus-width $input-btn-focus-color !default;\n\n$input-btn-padding-y-sm:      .25rem !default;\n$input-btn-padding-x-sm:      .5rem !default;\n$input-btn-font-size-sm:      $font-size-sm !default;\n\n$input-btn-padding-y-lg:      .5rem !default;\n$input-btn-padding-x-lg:      1rem !default;\n$input-btn-font-size-lg:      $font-size-lg !default;\n\n$input-btn-border-width:      $border-width !default;\n// scss-docs-end input-btn-variables\n\n\n// Buttons\n//\n// For each of Bootstrap\'s buttons, define text, background, and border color.\n\n// scss-docs-start btn-variables\n$btn-padding-y:               $input-btn-padding-y !default;\n$btn-padding-x:               $input-btn-padding-x !default;\n$btn-font-family:             $input-btn-font-family !default;\n$btn-font-size:               $input-btn-font-size !default;\n$btn-line-height:             $input-btn-line-height !default;\n$btn-white-space:             null !default; // Set to `nowrap` to prevent text wrapping\n\n$btn-padding-y-sm:            $input-btn-padding-y-sm !default;\n$btn-padding-x-sm:            $input-btn-padding-x-sm !default;\n$btn-font-size-sm:            $input-btn-font-size-sm !default;\n\n$btn-padding-y-lg:            $input-btn-padding-y-lg !default;\n$btn-padding-x-lg:            $input-btn-padding-x-lg !default;\n$btn-font-size-lg:            $input-btn-font-size-lg !default;\n\n$btn-border-width:            $input-btn-border-width !default;\n\n$btn-font-weight:             $font-weight-normal !default;\n$btn-box-shadow:              inset 0 1px 0 rgba($white, .15), 0 1px 1px rgba($black, .075) !default;\n$btn-focus-width:             $input-btn-focus-width !default;\n$btn-focus-box-shadow:        $input-btn-focus-box-shadow !default;\n$btn-disabled-opacity:        .65 !default;\n$btn-active-box-shadow:       inset 0 3px 5px rgba($black, .125) !default;\n\n$btn-link-color:              $link-color !default;\n$btn-link-hover-color:        $link-hover-color !default;\n$btn-link-disabled-color:     $gray-600 !default;\n\n// Allows for customizing button radius independently from global border radius\n$btn-border-radius:           $border-radius !default;\n$btn-border-radius-sm:        $border-radius-sm !default;\n$btn-border-radius-lg:        $border-radius-lg !default;\n\n$btn-transition:              color .15s ease-in-out, background-color .15s ease-in-out, border-color .15s ease-in-out, box-shadow .15s ease-in-out !default;\n\n$btn-hover-bg-shade-amount:       15% !default;\n$btn-hover-bg-tint-amount:        15% !default;\n$btn-hover-border-shade-amount:   20% !default;\n$btn-hover-border-tint-amount:    10% !default;\n$btn-active-bg-shade-amount:      20% !default;\n$btn-active-bg-tint-amount:       20% !default;\n$btn-active-border-shade-amount:  25% !default;\n$btn-active-border-tint-amount:   10% !default;\n// scss-docs-end btn-variables\n\n\n// Forms\n\n// scss-docs-start form-text-variables\n$form-text-margin-top:                  .25rem !default;\n$form-text-font-size:                   $small-font-size !default;\n$form-text-font-style:                  null !default;\n$form-text-font-weight:                 null !default;\n$form-text-color:                       $text-muted !default;\n// scss-docs-end form-text-variables\n\n// scss-docs-start form-label-variables\n$form-label-margin-bottom:              .5rem !default;\n$form-label-font-size:                  null !default;\n$form-label-font-style:                 null !default;\n$form-label-font-weight:                null !default;\n$form-label-color:                      null !default;\n// scss-docs-end form-label-variables\n\n// scss-docs-start form-input-variables\n$input-padding-y:                       $input-btn-padding-y !default;\n$input-padding-x:                       $input-btn-padding-x !default;\n$input-font-family:                     $input-btn-font-family !default;\n$input-font-size:                       $input-btn-font-size !default;\n$input-font-weight:                     $font-weight-base !default;\n$input-line-height:                     $input-btn-line-height !default;\n\n$input-padding-y-sm:                    $input-btn-padding-y-sm !default;\n$input-padding-x-sm:                    $input-btn-padding-x-sm !default;\n$input-font-size-sm:                    $input-btn-font-size-sm !default;\n\n$input-padding-y-lg:                    $input-btn-padding-y-lg !default;\n$input-padding-x-lg:                    $input-btn-padding-x-lg !default;\n$input-font-size-lg:                    $input-btn-font-size-lg !default;\n\n$input-bg:                              $body-bg !default;\n$input-disabled-bg:                     $gray-200 !default;\n$input-disabled-border-color:           null !default;\n\n$input-color:                           $body-color !default;\n$input-border-color:                    $gray-400 !default;\n$input-border-width:                    $input-btn-border-width !default;\n$input-box-shadow:                      $box-shadow-inset !default;\n\n$input-border-radius:                   $border-radius !default;\n$input-border-radius-sm:                $border-radius-sm !default;\n$input-border-radius-lg:                $border-radius-lg !default;\n\n$input-focus-bg:                        $input-bg !default;\n$input-focus-border-color:              tint-color($component-active-bg, 50%) !default;\n$input-focus-color:                     $input-color !default;\n$input-focus-width:                     $input-btn-focus-width !default;\n$input-focus-box-shadow:                $input-btn-focus-box-shadow !default;\n\n$input-placeholder-color:               $gray-600 !default;\n$input-plaintext-color:                 $body-color !default;\n\n$input-height-border:                   $input-border-width * 2 !default;\n\n$input-height-inner:                    add($input-line-height * 1em, $input-padding-y * 2) !default;\n$input-height-inner-half:               add($input-line-height * .5em, $input-padding-y) !default;\n$input-height-inner-quarter:            add($input-line-height * .25em, $input-padding-y * .5) !default;\n\n$input-height:                          add($input-line-height * 1em, add($input-padding-y * 2, $input-height-border, false)) !default;\n$input-height-sm:                       add($input-line-height * 1em, add($input-padding-y-sm * 2, $input-height-border, false)) !default;\n$input-height-lg:                       add($input-line-height * 1em, add($input-padding-y-lg * 2, $input-height-border, false)) !default;\n\n$input-transition:                      border-color .15s ease-in-out, box-shadow .15s ease-in-out !default;\n\n$form-color-width:                      3rem !default;\n// scss-docs-end form-input-variables\n\n// scss-docs-start form-check-variables\n$form-check-input-width:                  1em !default;\n$form-check-min-height:                   $font-size-base * $line-height-base !default;\n$form-check-padding-start:                $form-check-input-width + .5em !default;\n$form-check-margin-bottom:                .125rem !default;\n$form-check-label-color:                  null !default;\n$form-check-label-cursor:                 null !default;\n$form-check-transition:                   null !default;\n\n$form-check-input-active-filter:          brightness(90%) !default;\n\n$form-check-input-bg:                     $input-bg !default;\n$form-check-input-border:                 1px solid rgba($black, .25) !default;\n$form-check-input-border-radius:          .25em !default;\n$form-check-radio-border-radius:          50% !default;\n$form-check-input-focus-border:           $input-focus-border-color !default;\n$form-check-input-focus-box-shadow:       $input-btn-focus-box-shadow !default;\n\n$form-check-input-checked-color:          $component-active-color !default;\n$form-check-input-checked-bg-color:       $component-active-bg !default;\n$form-check-input-checked-border-color:   $form-check-input-checked-bg-color !default;\n$form-check-input-checked-bg-image:       url("data:image/svg+xml,<svg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 20 20\'><path fill=\'none\' stroke=\'#{$form-check-input-checked-color}\' stroke-linecap=\'round\' stroke-linejoin=\'round\' stroke-width=\'3\' d=\'M6 10l3 3l6-6\'/></svg>") !default;\n$form-check-radio-checked-bg-image:       url("data:image/svg+xml,<svg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'-4 -4 8 8\'><circle r=\'2\' fill=\'#{$form-check-input-checked-color}\'/></svg>") !default;\n\n$form-check-input-indeterminate-color:          $component-active-color !default;\n$form-check-input-indeterminate-bg-color:       $component-active-bg !default;\n$form-check-input-indeterminate-border-color:   $form-check-input-indeterminate-bg-color !default;\n$form-check-input-indeterminate-bg-image:       url("data:image/svg+xml,<svg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 20 20\'><path fill=\'none\' stroke=\'#{$form-check-input-indeterminate-color}\' stroke-linecap=\'round\' stroke-linejoin=\'round\' stroke-width=\'3\' d=\'M6 10h8\'/></svg>") !default;\n\n$form-check-input-disabled-opacity:        .5 !default;\n$form-check-label-disabled-opacity:        $form-check-input-disabled-opacity !default;\n$form-check-btn-check-disabled-opacity:    $btn-disabled-opacity !default;\n\n$form-check-inline-margin-end:    1rem !default;\n// scss-docs-end form-check-variables\n\n// scss-docs-start form-switch-variables\n$form-switch-color:               rgba($black, .25) !default;\n$form-switch-width:               2em !default;\n$form-switch-padding-start:       $form-switch-width + .5em !default;\n$form-switch-bg-image:            url("data:image/svg+xml,<svg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'-4 -4 8 8\'><circle r=\'3\' fill=\'#{$form-switch-color}\'/></svg>") !default;\n$form-switch-border-radius:       $form-switch-width !default;\n$form-switch-transition:          background-position .15s ease-in-out !default;\n\n$form-switch-focus-color:         $input-focus-border-color !default;\n$form-switch-focus-bg-image:      url("data:image/svg+xml,<svg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'-4 -4 8 8\'><circle r=\'3\' fill=\'#{$form-switch-focus-color}\'/></svg>") !default;\n\n$form-switch-checked-color:       $component-active-color !default;\n$form-switch-checked-bg-image:    url("data:image/svg+xml,<svg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'-4 -4 8 8\'><circle r=\'3\' fill=\'#{$form-switch-checked-color}\'/></svg>") !default;\n$form-switch-checked-bg-position: right center !default;\n// scss-docs-end form-switch-variables\n\n// scss-docs-start input-group-variables\n$input-group-addon-padding-y:           $input-padding-y !default;\n$input-group-addon-padding-x:           $input-padding-x !default;\n$input-group-addon-font-weight:         $input-font-weight !default;\n$input-group-addon-color:               $input-color !default;\n$input-group-addon-bg:                  $gray-200 !default;\n$input-group-addon-border-color:        $input-border-color !default;\n// scss-docs-end input-group-variables\n\n// scss-docs-start form-select-variables\n$form-select-padding-y:             $input-padding-y !default;\n$form-select-padding-x:             $input-padding-x !default;\n$form-select-font-family:           $input-font-family !default;\n$form-select-font-size:             $input-font-size !default;\n$form-select-indicator-padding:     $form-select-padding-x * 3 !default; // Extra padding for background-image\n$form-select-font-weight:           $input-font-weight !default;\n$form-select-line-height:           $input-line-height !default;\n$form-select-color:                 $input-color !default;\n$form-select-bg:                    $input-bg !default;\n$form-select-disabled-color:        null !default;\n$form-select-disabled-bg:           $gray-200 !default;\n$form-select-disabled-border-color: $input-disabled-border-color !default;\n$form-select-bg-position:           right $form-select-padding-x center !default;\n$form-select-bg-size:               16px 12px !default; // In pixels because image dimensions\n$form-select-indicator-color:       $gray-800 !default;\n$form-select-indicator:             url("data:image/svg+xml,<svg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 16 16\'><path fill=\'none\' stroke=\'#{$form-select-indicator-color}\' stroke-linecap=\'round\' stroke-linejoin=\'round\' stroke-width=\'2\' d=\'M2 5l6 6 6-6\'/></svg>") !default;\n\n$form-select-feedback-icon-padding-end: $form-select-padding-x * 2.5 + $form-select-indicator-padding !default;\n$form-select-feedback-icon-position:    center right $form-select-indicator-padding !default;\n$form-select-feedback-icon-size:        $input-height-inner-half $input-height-inner-half !default;\n\n$form-select-border-width:        $input-border-width !default;\n$form-select-border-color:        $input-border-color !default;\n$form-select-border-radius:       $input-border-radius !default;\n$form-select-box-shadow:          $box-shadow-inset !default;\n\n$form-select-focus-border-color:  $input-focus-border-color !default;\n$form-select-focus-width:         $input-focus-width !default;\n$form-select-focus-box-shadow:    0 0 0 $form-select-focus-width $input-btn-focus-color !default;\n\n$form-select-padding-y-sm:        $input-padding-y-sm !default;\n$form-select-padding-x-sm:        $input-padding-x-sm !default;\n$form-select-font-size-sm:        $input-font-size-sm !default;\n$form-select-border-radius-sm:    $input-border-radius-sm !default;\n\n$form-select-padding-y-lg:        $input-padding-y-lg !default;\n$form-select-padding-x-lg:        $input-padding-x-lg !default;\n$form-select-font-size-lg:        $input-font-size-lg !default;\n$form-select-border-radius-lg:    $input-border-radius-lg !default;\n\n$form-select-transition:          $input-transition !default;\n// scss-docs-end form-select-variables\n\n// scss-docs-start form-range-variables\n$form-range-track-width:          100% !default;\n$form-range-track-height:         .5rem !default;\n$form-range-track-cursor:         pointer !default;\n$form-range-track-bg:             $gray-300 !default;\n$form-range-track-border-radius:  1rem !default;\n$form-range-track-box-shadow:     $box-shadow-inset !default;\n\n$form-range-thumb-width:                   1rem !default;\n$form-range-thumb-height:                  $form-range-thumb-width !default;\n$form-range-thumb-bg:                      $component-active-bg !default;\n$form-range-thumb-border:                  0 !default;\n$form-range-thumb-border-radius:           1rem !default;\n$form-range-thumb-box-shadow:              0 .1rem .25rem rgba($black, .1) !default;\n$form-range-thumb-focus-box-shadow:        0 0 0 1px $body-bg, $input-focus-box-shadow !default;\n$form-range-thumb-focus-box-shadow-width:  $input-focus-width !default; // For focus box shadow issue in Edge\n$form-range-thumb-active-bg:               tint-color($component-active-bg, 70%) !default;\n$form-range-thumb-disabled-bg:             $gray-500 !default;\n$form-range-thumb-transition:              background-color .15s ease-in-out, border-color .15s ease-in-out, box-shadow .15s ease-in-out !default;\n// scss-docs-end form-range-variables\n\n// scss-docs-start form-file-variables\n$form-file-button-color:          $input-color !default;\n$form-file-button-bg:             $input-group-addon-bg !default;\n$form-file-button-hover-bg:       shade-color($form-file-button-bg, 5%) !default;\n// scss-docs-end form-file-variables\n\n// scss-docs-start form-floating-variables\n$form-floating-height:            add(3.5rem, $input-height-border) !default;\n$form-floating-line-height:       1.25 !default;\n$form-floating-padding-x:         $input-padding-x !default;\n$form-floating-padding-y:         1rem !default;\n$form-floating-input-padding-t:   1.625rem !default;\n$form-floating-input-padding-b:   .625rem !default;\n$form-floating-label-opacity:     .65 !default;\n$form-floating-label-transform:   scale(.85) translateY(-.5rem) translateX(.15rem) !default;\n$form-floating-transition:        opacity .1s ease-in-out, transform .1s ease-in-out !default;\n// scss-docs-end form-floating-variables\n\n// Form validation\n\n// scss-docs-start form-feedback-variables\n$form-feedback-margin-top:          $form-text-margin-top !default;\n$form-feedback-font-size:           $form-text-font-size !default;\n$form-feedback-font-style:          $form-text-font-style !default;\n$form-feedback-valid-color:         $success !default;\n$form-feedback-invalid-color:       $danger !default;\n\n$form-feedback-icon-valid-color:    $form-feedback-valid-color !default;\n$form-feedback-icon-valid:          url("data:image/svg+xml,<svg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 8 8\'><path fill=\'#{$form-feedback-icon-valid-color}\' d=\'M2.3 6.73L.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z\'/></svg>") !default;\n$form-feedback-icon-invalid-color:  $form-feedback-invalid-color !default;\n$form-feedback-icon-invalid:        url("data:image/svg+xml,<svg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 12 12\' width=\'12\' height=\'12\' fill=\'none\' stroke=\'#{$form-feedback-icon-invalid-color}\'><circle cx=\'6\' cy=\'6\' r=\'4.5\'/><path stroke-linejoin=\'round\' d=\'M5.8 3.6h.4L6 6.5z\'/><circle cx=\'6\' cy=\'8.2\' r=\'.6\' fill=\'#{$form-feedback-icon-invalid-color}\' stroke=\'none\'/></svg>") !default;\n// scss-docs-end form-feedback-variables\n\n// scss-docs-start form-validation-states\n$form-validation-states: (\n  "valid": (\n    "color": $form-feedback-valid-color,\n    "icon": $form-feedback-icon-valid\n  ),\n  "invalid": (\n    "color": $form-feedback-invalid-color,\n    "icon": $form-feedback-icon-invalid\n  )\n) !default;\n// scss-docs-end form-validation-states\n\n// Z-index master list\n//\n// Warning: Avoid customizing these values. They\'re used for a bird\'s eye view\n// of components dependent on the z-axis and are designed to all work together.\n\n// scss-docs-start zindex-stack\n$zindex-dropdown:                   1000 !default;\n$zindex-sticky:                     1020 !default;\n$zindex-fixed:                      1030 !default;\n$zindex-offcanvas-backdrop:         1040 !default;\n$zindex-offcanvas:                  1045 !default;\n$zindex-modal-backdrop:             1050 !default;\n$zindex-modal:                      1055 !default;\n$zindex-popover:                    1070 !default;\n$zindex-tooltip:                    1080 !default;\n// scss-docs-end zindex-stack\n\n\n// Navs\n\n// scss-docs-start nav-variables\n$nav-link-padding-y:                .5rem !default;\n$nav-link-padding-x:                1rem !default;\n$nav-link-font-size:                null !default;\n$nav-link-font-weight:              null !default;\n$nav-link-color:                    $link-color !default;\n$nav-link-hover-color:              $link-hover-color !default;\n$nav-link-transition:               color .15s ease-in-out, background-color .15s ease-in-out, border-color .15s ease-in-out !default;\n$nav-link-disabled-color:           $gray-600 !default;\n\n$nav-tabs-border-color:             $gray-300 !default;\n$nav-tabs-border-width:             $border-width !default;\n$nav-tabs-border-radius:            $border-radius !default;\n$nav-tabs-link-hover-border-color:  $gray-200 $gray-200 $nav-tabs-border-color !default;\n$nav-tabs-link-active-color:        $gray-700 !default;\n$nav-tabs-link-active-bg:           $body-bg !default;\n$nav-tabs-link-active-border-color: $gray-300 $gray-300 $nav-tabs-link-active-bg !default;\n\n$nav-pills-border-radius:           $border-radius !default;\n$nav-pills-link-active-color:       $component-active-color !default;\n$nav-pills-link-active-bg:          $component-active-bg !default;\n// scss-docs-end nav-variables\n\n\n// Navbar\n\n// scss-docs-start navbar-variables\n$navbar-padding-y:                  $spacer * .5 !default;\n$navbar-padding-x:                  null !default;\n\n$navbar-nav-link-padding-x:         .5rem !default;\n\n$navbar-brand-font-size:            $font-size-lg !default;\n// Compute the navbar-brand padding-y so the navbar-brand will have the same height as navbar-text and nav-link\n$nav-link-height:                   $font-size-base * $line-height-base + $nav-link-padding-y * 2 !default;\n$navbar-brand-height:               $navbar-brand-font-size * $line-height-base !default;\n$navbar-brand-padding-y:            ($nav-link-height - $navbar-brand-height) * .5 !default;\n$navbar-brand-margin-end:           1rem !default;\n\n$navbar-toggler-padding-y:          .25rem !default;\n$navbar-toggler-padding-x:          .75rem !default;\n$navbar-toggler-font-size:          $font-size-lg !default;\n$navbar-toggler-border-radius:      $btn-border-radius !default;\n$navbar-toggler-focus-width:        $btn-focus-width !default;\n$navbar-toggler-transition:         box-shadow .15s ease-in-out !default;\n// scss-docs-end navbar-variables\n\n// scss-docs-start navbar-theme-variables\n$navbar-dark-color:                 rgba($white, .55) !default;\n$navbar-dark-hover-color:           rgba($white, .75) !default;\n$navbar-dark-active-color:          $white !default;\n$navbar-dark-disabled-color:        rgba($white, .25) !default;\n$navbar-dark-toggler-icon-bg:       url("data:image/svg+xml,<svg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 30 30\'><path stroke=\'#{$navbar-dark-color}\' stroke-linecap=\'round\' stroke-miterlimit=\'10\' stroke-width=\'2\' d=\'M4 7h22M4 15h22M4 23h22\'/></svg>") !default;\n$navbar-dark-toggler-border-color:  rgba($white, .1) !default;\n\n$navbar-light-color:                rgba($black, .55) !default;\n$navbar-light-hover-color:          rgba($black, .7) !default;\n$navbar-light-active-color:         rgba($black, .9) !default;\n$navbar-light-disabled-color:       rgba($black, .3) !default;\n$navbar-light-toggler-icon-bg:      url("data:image/svg+xml,<svg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 30 30\'><path stroke=\'#{$navbar-light-color}\' stroke-linecap=\'round\' stroke-miterlimit=\'10\' stroke-width=\'2\' d=\'M4 7h22M4 15h22M4 23h22\'/></svg>") !default;\n$navbar-light-toggler-border-color: rgba($black, .1) !default;\n\n$navbar-light-brand-color:                $navbar-light-active-color !default;\n$navbar-light-brand-hover-color:          $navbar-light-active-color !default;\n$navbar-dark-brand-color:                 $navbar-dark-active-color !default;\n$navbar-dark-brand-hover-color:           $navbar-dark-active-color !default;\n// scss-docs-end navbar-theme-variables\n\n\n// Dropdowns\n//\n// Dropdown menu container and contents.\n\n// scss-docs-start dropdown-variables\n$dropdown-min-width:                10rem !default;\n$dropdown-padding-x:                0 !default;\n$dropdown-padding-y:                .5rem !default;\n$dropdown-spacer:                   .125rem !default;\n$dropdown-font-size:                $font-size-base !default;\n$dropdown-color:                    $body-color !default;\n$dropdown-bg:                       $white !default;\n$dropdown-border-color:             rgba($black, .15) !default;\n$dropdown-border-radius:            $border-radius !default;\n$dropdown-border-width:             $border-width !default;\n$dropdown-inner-border-radius:      subtract($dropdown-border-radius, $dropdown-border-width) !default;\n$dropdown-divider-bg:               $dropdown-border-color !default;\n$dropdown-divider-margin-y:         $spacer * .5 !default;\n$dropdown-box-shadow:               $box-shadow !default;\n\n$dropdown-link-color:               $gray-900 !default;\n$dropdown-link-hover-color:         shade-color($dropdown-link-color, 10%) !default;\n$dropdown-link-hover-bg:            $gray-200 !default;\n\n$dropdown-link-active-color:        $component-active-color !default;\n$dropdown-link-active-bg:           $component-active-bg !default;\n\n$dropdown-link-disabled-color:      $gray-500 !default;\n\n$dropdown-item-padding-y:           $spacer * .25 !default;\n$dropdown-item-padding-x:           $spacer !default;\n\n$dropdown-header-color:             $gray-600 !default;\n$dropdown-header-padding:           $dropdown-padding-y $dropdown-item-padding-x !default;\n// scss-docs-end dropdown-variables\n\n// scss-docs-start dropdown-dark-variables\n$dropdown-dark-color:               $gray-300 !default;\n$dropdown-dark-bg:                  $gray-800 !default;\n$dropdown-dark-border-color:        $dropdown-border-color !default;\n$dropdown-dark-divider-bg:          $dropdown-divider-bg !default;\n$dropdown-dark-box-shadow:          null !default;\n$dropdown-dark-link-color:          $dropdown-dark-color !default;\n$dropdown-dark-link-hover-color:    $white !default;\n$dropdown-dark-link-hover-bg:       rgba($white, .15) !default;\n$dropdown-dark-link-active-color:   $dropdown-link-active-color !default;\n$dropdown-dark-link-active-bg:      $dropdown-link-active-bg !default;\n$dropdown-dark-link-disabled-color: $gray-500 !default;\n$dropdown-dark-header-color:        $gray-500 !default;\n// scss-docs-end dropdown-dark-variables\n\n\n// Pagination\n\n// scss-docs-start pagination-variables\n$pagination-padding-y:              .375rem !default;\n$pagination-padding-x:              .75rem !default;\n$pagination-padding-y-sm:           .25rem !default;\n$pagination-padding-x-sm:           .5rem !default;\n$pagination-padding-y-lg:           .75rem !default;\n$pagination-padding-x-lg:           1.5rem !default;\n\n$pagination-color:                  $link-color !default;\n$pagination-bg:                     $white !default;\n$pagination-border-width:           $border-width !default;\n$pagination-border-radius:          $border-radius !default;\n$pagination-margin-start:           -$pagination-border-width !default;\n$pagination-border-color:           $gray-300 !default;\n\n$pagination-focus-color:            $link-hover-color !default;\n$pagination-focus-bg:               $gray-200 !default;\n$pagination-focus-box-shadow:       $input-btn-focus-box-shadow !default;\n$pagination-focus-outline:          0 !default;\n\n$pagination-hover-color:            $link-hover-color !default;\n$pagination-hover-bg:               $gray-200 !default;\n$pagination-hover-border-color:     $gray-300 !default;\n\n$pagination-active-color:           $component-active-color !default;\n$pagination-active-bg:              $component-active-bg !default;\n$pagination-active-border-color:    $pagination-active-bg !default;\n\n$pagination-disabled-color:         $gray-600 !default;\n$pagination-disabled-bg:            $white !default;\n$pagination-disabled-border-color:  $gray-300 !default;\n\n$pagination-transition:              color .15s ease-in-out, background-color .15s ease-in-out, border-color .15s ease-in-out, box-shadow .15s ease-in-out !default;\n\n$pagination-border-radius-sm:       $border-radius-sm !default;\n$pagination-border-radius-lg:       $border-radius-lg !default;\n// scss-docs-end pagination-variables\n\n\n// Placeholders\n\n// scss-docs-start placeholders\n$placeholder-opacity-max:           .5 !default;\n$placeholder-opacity-min:           .2 !default;\n// scss-docs-end placeholders\n\n// Cards\n\n// scss-docs-start card-variables\n$card-spacer-y:                     $spacer !default;\n$card-spacer-x:                     $spacer !default;\n$card-title-spacer-y:               $spacer * .5 !default;\n$card-border-width:                 $border-width !default;\n$card-border-color:                 rgba($black, .125) !default;\n$card-border-radius:                $border-radius !default;\n$card-box-shadow:                   null !default;\n$card-inner-border-radius:          subtract($card-border-radius, $card-border-width) !default;\n$card-cap-padding-y:                $card-spacer-y * .5 !default;\n$card-cap-padding-x:                $card-spacer-x !default;\n$card-cap-bg:                       rgba($black, .03) !default;\n$card-cap-color:                    null !default;\n$card-height:                       null !default;\n$card-color:                        null !default;\n$card-bg:                           $white !default;\n$card-img-overlay-padding:          $spacer !default;\n$card-group-margin:                 $grid-gutter-width * .5 !default;\n// scss-docs-end card-variables\n\n// Accordion\n\n// scss-docs-start accordion-variables\n$accordion-padding-y:                     1rem !default;\n$accordion-padding-x:                     1.25rem !default;\n$accordion-color:                         $body-color !default;\n$accordion-bg:                            $body-bg !default;\n$accordion-border-width:                  $border-width !default;\n$accordion-border-color:                  rgba($black, .125) !default;\n$accordion-border-radius:                 $border-radius !default;\n$accordion-inner-border-radius:           subtract($accordion-border-radius, $accordion-border-width) !default;\n\n$accordion-body-padding-y:                $accordion-padding-y !default;\n$accordion-body-padding-x:                $accordion-padding-x !default;\n\n$accordion-button-padding-y:              $accordion-padding-y !default;\n$accordion-button-padding-x:              $accordion-padding-x !default;\n$accordion-button-color:                  $accordion-color !default;\n$accordion-button-bg:                     $accordion-bg !default;\n$accordion-transition:                    $btn-transition, border-radius .15s ease !default;\n$accordion-button-active-bg:              tint-color($component-active-bg, 90%) !default;\n$accordion-button-active-color:           shade-color($primary, 10%) !default;\n\n$accordion-button-focus-border-color:     $input-focus-border-color !default;\n$accordion-button-focus-box-shadow:       $btn-focus-box-shadow !default;\n\n$accordion-icon-width:                    1.25rem !default;\n$accordion-icon-color:                    $accordion-button-color !default;\n$accordion-icon-active-color:             $accordion-button-active-color !default;\n$accordion-icon-transition:               transform .2s ease-in-out !default;\n$accordion-icon-transform:                rotate(-180deg) !default;\n\n$accordion-button-icon:         url("data:image/svg+xml,<svg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 16 16\' fill=\'#{$accordion-icon-color}\'><path fill-rule=\'evenodd\' d=\'M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z\'/></svg>") !default;\n$accordion-button-active-icon:  url("data:image/svg+xml,<svg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 16 16\' fill=\'#{$accordion-icon-active-color}\'><path fill-rule=\'evenodd\' d=\'M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z\'/></svg>") !default;\n// scss-docs-end accordion-variables\n\n// Tooltips\n\n// scss-docs-start tooltip-variables\n$tooltip-font-size:                 $font-size-sm !default;\n$tooltip-max-width:                 200px !default;\n$tooltip-color:                     $white !default;\n$tooltip-bg:                        $black !default;\n$tooltip-border-radius:             $border-radius !default;\n$tooltip-opacity:                   .9 !default;\n$tooltip-padding-y:                 $spacer * .25 !default;\n$tooltip-padding-x:                 $spacer * .5 !default;\n$tooltip-margin:                    0 !default;\n\n$tooltip-arrow-width:               .8rem !default;\n$tooltip-arrow-height:              .4rem !default;\n$tooltip-arrow-color:               $tooltip-bg !default;\n// scss-docs-end tooltip-variables\n\n// Form tooltips must come after regular tooltips\n// scss-docs-start tooltip-feedback-variables\n$form-feedback-tooltip-padding-y:     $tooltip-padding-y !default;\n$form-feedback-tooltip-padding-x:     $tooltip-padding-x !default;\n$form-feedback-tooltip-font-size:     $tooltip-font-size !default;\n$form-feedback-tooltip-line-height:   null !default;\n$form-feedback-tooltip-opacity:       $tooltip-opacity !default;\n$form-feedback-tooltip-border-radius: $tooltip-border-radius !default;\n// scss-docs-end tooltip-feedback-variables\n\n\n// Popovers\n\n// scss-docs-start popover-variables\n$popover-font-size:                 $font-size-sm !default;\n$popover-bg:                        $white !default;\n$popover-max-width:                 276px !default;\n$popover-border-width:              $border-width !default;\n$popover-border-color:              rgba($black, .2) !default;\n$popover-border-radius:             $border-radius-lg !default;\n$popover-inner-border-radius:       subtract($popover-border-radius, $popover-border-width) !default;\n$popover-box-shadow:                $box-shadow !default;\n\n$popover-header-bg:                 shade-color($popover-bg, 6%) !default;\n$popover-header-color:              $headings-color !default;\n$popover-header-padding-y:          .5rem !default;\n$popover-header-padding-x:          $spacer !default;\n\n$popover-body-color:                $body-color !default;\n$popover-body-padding-y:            $spacer !default;\n$popover-body-padding-x:            $spacer !default;\n\n$popover-arrow-width:               1rem !default;\n$popover-arrow-height:              .5rem !default;\n$popover-arrow-color:               $popover-bg !default;\n\n$popover-arrow-outer-color:         fade-in($popover-border-color, .05) !default;\n// scss-docs-end popover-variables\n\n\n// Toasts\n\n// scss-docs-start toast-variables\n$toast-max-width:                   350px !default;\n$toast-padding-x:                   .75rem !default;\n$toast-padding-y:                   .5rem !default;\n$toast-font-size:                   .875rem !default;\n$toast-color:                       null !default;\n$toast-background-color:            rgba($white, .85) !default;\n$toast-border-width:                1px !default;\n$toast-border-color:                rgba($black, .1) !default;\n$toast-border-radius:               $border-radius !default;\n$toast-box-shadow:                  $box-shadow !default;\n$toast-spacing:                     $container-padding-x !default;\n\n$toast-header-color:                $gray-600 !default;\n$toast-header-background-color:     rgba($white, .85) !default;\n$toast-header-border-color:         rgba($black, .05) !default;\n// scss-docs-end toast-variables\n\n\n// Badges\n\n// scss-docs-start badge-variables\n$badge-font-size:                   .75em !default;\n$badge-font-weight:                 $font-weight-bold !default;\n$badge-color:                       $white !default;\n$badge-padding-y:                   .35em !default;\n$badge-padding-x:                   .65em !default;\n$badge-border-radius:               $border-radius !default;\n// scss-docs-end badge-variables\n\n\n// Modals\n\n// scss-docs-start modal-variables\n$modal-inner-padding:               $spacer !default;\n\n$modal-footer-margin-between:       .5rem !default;\n\n$modal-dialog-margin:               .5rem !default;\n$modal-dialog-margin-y-sm-up:       1.75rem !default;\n\n$modal-title-line-height:           $line-height-base !default;\n\n$modal-content-color:               null !default;\n$modal-content-bg:                  $white !default;\n$modal-content-border-color:        rgba($black, .2) !default;\n$modal-content-border-width:        $border-width !default;\n$modal-content-border-radius:       $border-radius-lg !default;\n$modal-content-inner-border-radius: subtract($modal-content-border-radius, $modal-content-border-width) !default;\n$modal-content-box-shadow-xs:       $box-shadow-sm !default;\n$modal-content-box-shadow-sm-up:    $box-shadow !default;\n\n$modal-backdrop-bg:                 $black !default;\n$modal-backdrop-opacity:            .5 !default;\n$modal-header-border-color:         $border-color !default;\n$modal-footer-border-color:         $modal-header-border-color !default;\n$modal-header-border-width:         $modal-content-border-width !default;\n$modal-footer-border-width:         $modal-header-border-width !default;\n$modal-header-padding-y:            $modal-inner-padding !default;\n$modal-header-padding-x:            $modal-inner-padding !default;\n$modal-header-padding:              $modal-header-padding-y $modal-header-padding-x !default; // Keep this for backwards compatibility\n\n$modal-sm:                          300px !default;\n$modal-md:                          500px !default;\n$modal-lg:                          800px !default;\n$modal-xl:                          1140px !default;\n\n$modal-fade-transform:              translate(0, -50px) !default;\n$modal-show-transform:              none !default;\n$modal-transition:                  transform .3s ease-out !default;\n$modal-scale-transform:             scale(1.02) !default;\n// scss-docs-end modal-variables\n\n\n// Alerts\n//\n// Define alert colors, border radius, and padding.\n\n// scss-docs-start alert-variables\n$alert-padding-y:               $spacer !default;\n$alert-padding-x:               $spacer !default;\n$alert-margin-bottom:           1rem !default;\n$alert-border-radius:           $border-radius !default;\n$alert-link-font-weight:        $font-weight-bold !default;\n$alert-border-width:            $border-width !default;\n$alert-bg-scale:                -80% !default;\n$alert-border-scale:            -70% !default;\n$alert-color-scale:             40% !default;\n$alert-dismissible-padding-r:   $alert-padding-x * 3 !default; // 3x covers width of x plus default padding on either side\n// scss-docs-end alert-variables\n\n\n// Progress bars\n\n// scss-docs-start progress-variables\n$progress-height:                   1rem !default;\n$progress-font-size:                $font-size-base * .75 !default;\n$progress-bg:                       $gray-200 !default;\n$progress-border-radius:            $border-radius !default;\n$progress-box-shadow:               $box-shadow-inset !default;\n$progress-bar-color:                $white !default;\n$progress-bar-bg:                   $primary !default;\n$progress-bar-animation-timing:     1s linear infinite !default;\n$progress-bar-transition:           width .6s ease !default;\n// scss-docs-end progress-variables\n\n\n// List group\n\n// scss-docs-start list-group-variables\n$list-group-color:                  $gray-900 !default;\n$list-group-bg:                     $white !default;\n$list-group-border-color:           rgba($black, .125) !default;\n$list-group-border-width:           $border-width !default;\n$list-group-border-radius:          $border-radius !default;\n\n$list-group-item-padding-y:         $spacer * .5 !default;\n$list-group-item-padding-x:         $spacer !default;\n$list-group-item-bg-scale:          -80% !default;\n$list-group-item-color-scale:       40% !default;\n\n$list-group-hover-bg:               $gray-100 !default;\n$list-group-active-color:           $component-active-color !default;\n$list-group-active-bg:              $component-active-bg !default;\n$list-group-active-border-color:    $list-group-active-bg !default;\n\n$list-group-disabled-color:         $gray-600 !default;\n$list-group-disabled-bg:            $list-group-bg !default;\n\n$list-group-action-color:           $gray-700 !default;\n$list-group-action-hover-color:     $list-group-action-color !default;\n\n$list-group-action-active-color:    $body-color !default;\n$list-group-action-active-bg:       $gray-200 !default;\n// scss-docs-end list-group-variables\n\n\n// Image thumbnails\n\n// scss-docs-start thumbnail-variables\n$thumbnail-padding:                 .25rem !default;\n$thumbnail-bg:                      $body-bg !default;\n$thumbnail-border-width:            $border-width !default;\n$thumbnail-border-color:            $gray-300 !default;\n$thumbnail-border-radius:           $border-radius !default;\n$thumbnail-box-shadow:              $box-shadow-sm !default;\n// scss-docs-end thumbnail-variables\n\n\n// Figures\n\n// scss-docs-start figure-variables\n$figure-caption-font-size:          $small-font-size !default;\n$figure-caption-color:              $gray-600 !default;\n// scss-docs-end figure-variables\n\n\n// Breadcrumbs\n\n// scss-docs-start breadcrumb-variables\n$breadcrumb-font-size:              null !default;\n$breadcrumb-padding-y:              0 !default;\n$breadcrumb-padding-x:              0 !default;\n$breadcrumb-item-padding-x:         .5rem !default;\n$breadcrumb-margin-bottom:          1rem !default;\n$breadcrumb-bg:                     null !default;\n$breadcrumb-divider-color:          $gray-600 !default;\n$breadcrumb-active-color:           $gray-600 !default;\n$breadcrumb-divider:                quote("/") !default;\n$breadcrumb-divider-flipped:        $breadcrumb-divider !default;\n$breadcrumb-border-radius:          null !default;\n// scss-docs-end breadcrumb-variables\n\n// Carousel\n\n// scss-docs-start carousel-variables\n$carousel-control-color:             $white !default;\n$carousel-control-width:             15% !default;\n$carousel-control-opacity:           .5 !default;\n$carousel-control-hover-opacity:     .9 !default;\n$carousel-control-transition:        opacity .15s ease !default;\n\n$carousel-indicator-width:           30px !default;\n$carousel-indicator-height:          3px !default;\n$carousel-indicator-hit-area-height: 10px !default;\n$carousel-indicator-spacer:          3px !default;\n$carousel-indicator-opacity:         .5 !default;\n$carousel-indicator-active-bg:       $white !default;\n$carousel-indicator-active-opacity:  1 !default;\n$carousel-indicator-transition:      opacity .6s ease !default;\n\n$carousel-caption-width:             70% !default;\n$carousel-caption-color:             $white !default;\n$carousel-caption-padding-y:         1.25rem !default;\n$carousel-caption-spacer:            1.25rem !default;\n\n$carousel-control-icon-width:        2rem !default;\n\n$carousel-control-prev-icon-bg:      url("data:image/svg+xml,<svg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 16 16\' fill=\'#{$carousel-control-color}\'><path d=\'M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z\'/></svg>") !default;\n$carousel-control-next-icon-bg:      url("data:image/svg+xml,<svg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 16 16\' fill=\'#{$carousel-control-color}\'><path d=\'M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z\'/></svg>") !default;\n\n$carousel-transition-duration:       .6s !default;\n$carousel-transition:                transform $carousel-transition-duration ease-in-out !default; // Define transform transition first if using multiple transitions (e.g., `transform 2s ease, opacity .5s ease-out`)\n\n$carousel-dark-indicator-active-bg:  $black !default;\n$carousel-dark-caption-color:        $black !default;\n$carousel-dark-control-icon-filter:  invert(1) grayscale(100) !default;\n// scss-docs-end carousel-variables\n\n\n// Spinners\n\n// scss-docs-start spinner-variables\n$spinner-width:           2rem !default;\n$spinner-height:          $spinner-width !default;\n$spinner-vertical-align:  -.125em !default;\n$spinner-border-width:    .25em !default;\n$spinner-animation-speed: .75s !default;\n\n$spinner-width-sm:        1rem !default;\n$spinner-height-sm:       $spinner-width-sm !default;\n$spinner-border-width-sm: .2em !default;\n// scss-docs-end spinner-variables\n\n\n// Close\n\n// scss-docs-start close-variables\n$btn-close-width:            1em !default;\n$btn-close-height:           $btn-close-width !default;\n$btn-close-padding-x:        .25em !default;\n$btn-close-padding-y:        $btn-close-padding-x !default;\n$btn-close-color:            $black !default;\n$btn-close-bg:               url("data:image/svg+xml,<svg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 16 16\' fill=\'#{$btn-close-color}\'><path d=\'M.293.293a1 1 0 011.414 0L8 6.586 14.293.293a1 1 0 111.414 1.414L9.414 8l6.293 6.293a1 1 0 01-1.414 1.414L8 9.414l-6.293 6.293a1 1 0 01-1.414-1.414L6.586 8 .293 1.707a1 1 0 010-1.414z\'/></svg>") !default;\n$btn-close-focus-shadow:     $input-btn-focus-box-shadow !default;\n$btn-close-opacity:          .5 !default;\n$btn-close-hover-opacity:    .75 !default;\n$btn-close-focus-opacity:    1 !default;\n$btn-close-disabled-opacity: .25 !default;\n$btn-close-white-filter:     invert(1) grayscale(100%) brightness(200%) !default;\n// scss-docs-end close-variables\n\n\n// Offcanvas\n\n// scss-docs-start offcanvas-variables\n$offcanvas-padding-y:               $modal-inner-padding !default;\n$offcanvas-padding-x:               $modal-inner-padding !default;\n$offcanvas-horizontal-width:        400px !default;\n$offcanvas-vertical-height:         30vh !default;\n$offcanvas-transition-duration:     .3s !default;\n$offcanvas-border-color:            $modal-content-border-color !default;\n$offcanvas-border-width:            $modal-content-border-width !default;\n$offcanvas-title-line-height:       $modal-title-line-height !default;\n$offcanvas-bg-color:                $modal-content-bg !default;\n$offcanvas-color:                   $modal-content-color !default;\n$offcanvas-box-shadow:              $modal-content-box-shadow-xs !default;\n$offcanvas-backdrop-bg:             $modal-backdrop-bg !default;\n$offcanvas-backdrop-opacity:        $modal-backdrop-opacity !default;\n// scss-docs-end offcanvas-variables\n\n// Code\n\n$code-font-size:                    $small-font-size !default;\n$code-color:                        $pink !default;\n\n$kbd-padding-y:                     .2rem !default;\n$kbd-padding-x:                     .4rem !default;\n$kbd-font-size:                     $code-font-size !default;\n$kbd-color:                         $white !default;\n$kbd-bg:                            $gray-900 !default;\n\n$pre-color:                         null !default;\n',"// stylelint-disable property-disallowed-list\n// Single side border-radius\n\n// Helper function to replace negative values with 0\n@function valid-radius($radius) {\n  $return: ();\n  @each $value in $radius {\n    @if type-of($value) == number {\n      $return: append($return, max($value, 0));\n    } @else {\n      $return: append($return, $value);\n    }\n  }\n  @return $return;\n}\n\n// scss-docs-start border-radius-mixins\n@mixin border-radius($radius: $border-radius, $fallback-border-radius: false) {\n  @if $enable-rounded {\n    border-radius: valid-radius($radius);\n  }\n  @else if $fallback-border-radius != false {\n    border-radius: $fallback-border-radius;\n  }\n}\n\n@mixin border-top-radius($radius: $border-radius) {\n  @if $enable-rounded {\n    border-top-left-radius: valid-radius($radius);\n    border-top-right-radius: valid-radius($radius);\n  }\n}\n\n@mixin border-end-radius($radius: $border-radius) {\n  @if $enable-rounded {\n    border-top-right-radius: valid-radius($radius);\n    border-bottom-right-radius: valid-radius($radius);\n  }\n}\n\n@mixin border-bottom-radius($radius: $border-radius) {\n  @if $enable-rounded {\n    border-bottom-right-radius: valid-radius($radius);\n    border-bottom-left-radius: valid-radius($radius);\n  }\n}\n\n@mixin border-start-radius($radius: $border-radius) {\n  @if $enable-rounded {\n    border-top-left-radius: valid-radius($radius);\n    border-bottom-left-radius: valid-radius($radius);\n  }\n}\n\n@mixin border-top-start-radius($radius: $border-radius) {\n  @if $enable-rounded {\n    border-top-left-radius: valid-radius($radius);\n  }\n}\n\n@mixin border-top-end-radius($radius: $border-radius) {\n  @if $enable-rounded {\n    border-top-right-radius: valid-radius($radius);\n  }\n}\n\n@mixin border-bottom-end-radius($radius: $border-radius) {\n  @if $enable-rounded {\n    border-bottom-right-radius: valid-radius($radius);\n  }\n}\n\n@mixin border-bottom-start-radius($radius: $border-radius) {\n  @if $enable-rounded {\n    border-bottom-left-radius: valid-radius($radius);\n  }\n}\n// scss-docs-end border-radius-mixins\n",'//\n// Headings\n//\n.h1 {\n  @extend h1;\n}\n\n.h2 {\n  @extend h2;\n}\n\n.h3 {\n  @extend h3;\n}\n\n.h4 {\n  @extend h4;\n}\n\n.h5 {\n  @extend h5;\n}\n\n.h6 {\n  @extend h6;\n}\n\n\n.lead {\n  @include font-size($lead-font-size);\n  font-weight: $lead-font-weight;\n}\n\n// Type display classes\n@each $display, $font-size in $display-font-sizes {\n  .display-#{$display} {\n    @include font-size($font-size);\n    font-weight: $display-font-weight;\n    line-height: $display-line-height;\n  }\n}\n\n//\n// Emphasis\n//\n.small {\n  @extend small;\n}\n\n.mark {\n  @extend mark;\n}\n\n//\n// Lists\n//\n\n.list-unstyled {\n  @include list-unstyled();\n}\n\n// Inline turns list items into inline-block\n.list-inline {\n  @include list-unstyled();\n}\n.list-inline-item {\n  display: inline-block;\n\n  &:not(:last-child) {\n    margin-right: $list-inline-padding;\n  }\n}\n\n\n//\n// Misc\n//\n\n// Builds on `abbr`\n.initialism {\n  @include font-size($initialism-font-size);\n  text-transform: uppercase;\n}\n\n// Blockquotes\n.blockquote {\n  margin-bottom: $blockquote-margin-y;\n  @include font-size($blockquote-font-size);\n\n  > :last-child {\n    margin-bottom: 0;\n  }\n}\n\n.blockquote-footer {\n  margin-top: -$blockquote-margin-y;\n  margin-bottom: $blockquote-margin-y;\n  @include font-size($blockquote-footer-font-size);\n  color: $blockquote-footer-color;\n\n  &::before {\n    content: "\\2014\\00A0"; // em dash, nbsp\n  }\n}\n',"// Lists\n\n// Unstyled keeps list items block level, just removes default browser padding and list-style\n@mixin list-unstyled {\n  padding-left: 0;\n  list-style: none;\n}\n","// Responsive images (ensure images don't scale beyond their parents)\n//\n// This is purposefully opt-in via an explicit class rather than being the default for all `<img>`s.\n// We previously tried the \"images are responsive by default\" approach in Bootstrap v2,\n// and abandoned it in Bootstrap v3 because it breaks lots of third-party widgets (including Google Maps)\n// which weren't expecting the images within themselves to be involuntarily resized.\n// See also https://github.com/twbs/bootstrap/issues/18178\n.img-fluid {\n  @include img-fluid();\n}\n\n\n// Image thumbnails\n.img-thumbnail {\n  padding: $thumbnail-padding;\n  background-color: $thumbnail-bg;\n  border: $thumbnail-border-width solid $thumbnail-border-color;\n  @include border-radius($thumbnail-border-radius);\n  @include box-shadow($thumbnail-box-shadow);\n\n  // Keep them at most 100% wide\n  @include img-fluid();\n}\n\n//\n// Figures\n//\n\n.figure {\n  // Ensures the caption's text aligns with the image.\n  display: inline-block;\n}\n\n.figure-img {\n  margin-bottom: $spacer * .5;\n  line-height: 1;\n}\n\n.figure-caption {\n  @include font-size($figure-caption-font-size);\n  color: $figure-caption-color;\n}\n","// Image Mixins\n// - Responsive image\n// - Retina image\n\n\n// Responsive image\n//\n// Keep images from scaling beyond the width of their parents.\n\n@mixin img-fluid {\n  // Part 1: Set a maximum relative to the parent\n  max-width: 100%;\n  // Part 2: Override the height to auto, otherwise images will be stretched\n  // when setting a width and height attribute on the img element.\n  height: auto;\n}\n","// Container widths\n//\n// Set the container width, and override it for fixed navbars in media queries.\n\n@if $enable-grid-classes {\n  // Single container class with breakpoint max-widths\n  .container,\n  // 100% wide container at all breakpoints\n  .container-fluid {\n    @include make-container();\n  }\n\n  // Responsive containers that are 100% wide until a breakpoint\n  @each $breakpoint, $container-max-width in $container-max-widths {\n    .container-#{$breakpoint} {\n      @extend .container-fluid;\n    }\n\n    @include media-breakpoint-up($breakpoint, $grid-breakpoints) {\n      %responsive-container-#{$breakpoint} {\n        max-width: $container-max-width;\n      }\n\n      // Extend each breakpoint which is smaller or equal to the current breakpoint\n      $extend-breakpoint: true;\n\n      @each $name, $width in $grid-breakpoints {\n        @if ($extend-breakpoint) {\n          .container#{breakpoint-infix($name, $grid-breakpoints)} {\n            @extend %responsive-container-#{$breakpoint};\n          }\n\n          // Once the current breakpoint is reached, stop extending\n          @if ($breakpoint == $name) {\n            $extend-breakpoint: false;\n          }\n        }\n      }\n    }\n  }\n}\n","// Container mixins\n\n@mixin make-container($gutter: $container-padding-x) {\n  width: 100%;\n  padding-right: var(--#{$variable-prefix}gutter-x, #{$gutter});\n  padding-left: var(--#{$variable-prefix}gutter-x, #{$gutter});\n  margin-right: auto;\n  margin-left: auto;\n}\n",'// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @if not $n {\n    @error "breakpoint `#{$name}` not found in `#{$breakpoints}`";\n  }\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width.\n// The maximum value is reduced by 0.02px to work around the limitations of\n// `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $max: map-get($breakpoints, $name);\n  @return if($max and $max > 0, $max - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    ""  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    "-sm"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint\'s minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min:  breakpoint-min($name, $breakpoints);\n  $next: breakpoint-next($name, $breakpoints);\n  $max:  breakpoint-max($next);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($next, $breakpoints) {\n      @content;\n    }\n  }\n}\n',"// Row\n//\n// Rows contain your columns.\n\n@if $enable-grid-classes {\n  .row {\n    @include make-row();\n\n    > * {\n      @include make-col-ready();\n    }\n  }\n}\n\n@if $enable-cssgrid {\n  .grid {\n    display: grid;\n    grid-template-rows: repeat(var(--#{$variable-prefix}rows, 1), 1fr);\n    grid-template-columns: repeat(var(--#{$variable-prefix}columns, #{$grid-columns}), 1fr);\n    gap: var(--#{$variable-prefix}gap, #{$grid-gutter-width});\n\n    @include make-cssgrid();\n  }\n}\n\n\n// Columns\n//\n// Common styles for small and large grid columns\n\n@if $enable-grid-classes {\n  @include make-grid-columns();\n}\n","// Grid system\n//\n// Generate semantic grid columns with these mixins.\n\n@mixin make-row($gutter: $grid-gutter-width) {\n  --#{$variable-prefix}gutter-x: #{$gutter};\n  --#{$variable-prefix}gutter-y: 0;\n  display: flex;\n  flex-wrap: wrap;\n  // TODO: Revisit calc order after https://github.com/react-bootstrap/react-bootstrap/issues/6039 is fixed\n  margin-top: calc(-1 * var(--#{$variable-prefix}gutter-y)); // stylelint-disable-line function-disallowed-list\n  margin-right: calc(-.5 * var(--#{$variable-prefix}gutter-x)); // stylelint-disable-line function-disallowed-list\n  margin-left: calc(-.5 * var(--#{$variable-prefix}gutter-x)); // stylelint-disable-line function-disallowed-list\n}\n\n@mixin make-col-ready($gutter: $grid-gutter-width) {\n  // Add box sizing if only the grid is loaded\n  box-sizing: if(variable-exists(include-column-box-sizing) and $include-column-box-sizing, border-box, null);\n  // Prevent columns from becoming too narrow when at smaller grid tiers by\n  // always setting `width: 100%;`. This works because we set the width\n  // later on to override this initial width.\n  flex-shrink: 0;\n  width: 100%;\n  max-width: 100%; // Prevent `.col-auto`, `.col` (& responsive variants) from breaking out the grid\n  padding-right: calc(var(--#{$variable-prefix}gutter-x) * .5); // stylelint-disable-line function-disallowed-list\n  padding-left: calc(var(--#{$variable-prefix}gutter-x) * .5); // stylelint-disable-line function-disallowed-list\n  margin-top: var(--#{$variable-prefix}gutter-y);\n}\n\n@mixin make-col($size: false, $columns: $grid-columns) {\n  @if $size {\n    flex: 0 0 auto;\n    width: percentage(divide($size, $columns));\n\n  } @else {\n    flex: 1 1 0;\n    max-width: 100%;\n  }\n}\n\n@mixin make-col-auto() {\n  flex: 0 0 auto;\n  width: auto;\n}\n\n@mixin make-col-offset($size, $columns: $grid-columns) {\n  $num: divide($size, $columns);\n  margin-left: if($num == 0, 0, percentage($num));\n}\n\n// Row columns\n//\n// Specify on a parent element(e.g., .row) to force immediate children into NN\n// numberof columns. Supports wrapping to new lines, but does not do a Masonry\n// style grid.\n@mixin row-cols($count) {\n  > * {\n    flex: 0 0 auto;\n    width: divide(100%, $count);\n  }\n}\n\n// Framework grid generation\n//\n// Used only by Bootstrap to generate the correct number of grid classes given\n// any value of `$grid-columns`.\n\n@mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {\n  @each $breakpoint in map-keys($breakpoints) {\n    $infix: breakpoint-infix($breakpoint, $breakpoints);\n\n    @include media-breakpoint-up($breakpoint, $breakpoints) {\n      // Provide basic `.col-{bp}` classes for equal-width flexbox columns\n      .col#{$infix} {\n        flex: 1 0 0%; // Flexbugs #4: https://github.com/philipwalton/flexbugs#flexbug-4\n      }\n\n      .row-cols#{$infix}-auto > * {\n        @include make-col-auto();\n      }\n\n      @if $grid-row-columns > 0 {\n        @for $i from 1 through $grid-row-columns {\n          .row-cols#{$infix}-#{$i} {\n            @include row-cols($i);\n          }\n        }\n      }\n\n      .col#{$infix}-auto {\n        @include make-col-auto();\n      }\n\n      @if $columns > 0 {\n        @for $i from 1 through $columns {\n          .col#{$infix}-#{$i} {\n            @include make-col($i, $columns);\n          }\n        }\n\n        // `$columns - 1` because offsetting by the width of an entire row isn't possible\n        @for $i from 0 through ($columns - 1) {\n          @if not ($infix == \"\" and $i == 0) { // Avoid emitting useless .offset-0\n            .offset#{$infix}-#{$i} {\n              @include make-col-offset($i, $columns);\n            }\n          }\n        }\n      }\n\n      // Gutters\n      //\n      // Make use of `.g-*`, `.gx-*` or `.gy-*` utilities to change spacing between the columns.\n      @each $key, $value in $gutters {\n        .g#{$infix}-#{$key},\n        .gx#{$infix}-#{$key} {\n          --#{$variable-prefix}gutter-x: #{$value};\n        }\n\n        .g#{$infix}-#{$key},\n        .gy#{$infix}-#{$key} {\n          --#{$variable-prefix}gutter-y: #{$value};\n        }\n      }\n    }\n  }\n}\n\n@mixin make-cssgrid($columns: $grid-columns, $breakpoints: $grid-breakpoints) {\n  @each $breakpoint in map-keys($breakpoints) {\n    $infix: breakpoint-infix($breakpoint, $breakpoints);\n\n    @include media-breakpoint-up($breakpoint, $breakpoints) {\n      @if $columns > 0 {\n        @for $i from 1 through $columns {\n          .g-col#{$infix}-#{$i} {\n            grid-column: auto / span $i;\n          }\n        }\n\n        // Start with `1` because `0` is and invalid value.\n        // Ends with `$columns - 1` because offsetting by the width of an entire row isn't possible.\n        @for $i from 1 through ($columns - 1) {\n          .g-start#{$infix}-#{$i} {\n            grid-column-start: $i;\n          }\n        }\n      }\n    }\n  }\n}\n","//\n// Basic Bootstrap table\n//\n\n.table {\n  --#{$variable-prefix}table-bg: #{$table-bg};\n  --#{$variable-prefix}table-accent-bg: #{$table-accent-bg};\n  --#{$variable-prefix}table-striped-color: #{$table-striped-color};\n  --#{$variable-prefix}table-striped-bg: #{$table-striped-bg};\n  --#{$variable-prefix}table-active-color: #{$table-active-color};\n  --#{$variable-prefix}table-active-bg: #{$table-active-bg};\n  --#{$variable-prefix}table-hover-color: #{$table-hover-color};\n  --#{$variable-prefix}table-hover-bg: #{$table-hover-bg};\n\n  width: 100%;\n  margin-bottom: $spacer;\n  color: $table-color;\n  vertical-align: $table-cell-vertical-align;\n  border-color: $table-border-color;\n\n  // Target th & td\n  // We need the child combinator to prevent styles leaking to nested tables which doesn't have a `.table` class.\n  // We use the universal selectors here to simplify the selector (else we would need 6 different selectors).\n  // Another advantage is that this generates less code and makes the selector less specific making it easier to override.\n  // stylelint-disable-next-line selector-max-universal\n  > :not(caption) > * > * {\n    padding: $table-cell-padding-y $table-cell-padding-x;\n    background-color: var(--#{$variable-prefix}table-bg);\n    border-bottom-width: $table-border-width;\n    box-shadow: inset 0 0 0 9999px var(--#{$variable-prefix}table-accent-bg);\n  }\n\n  > tbody {\n    vertical-align: inherit;\n  }\n\n  > thead {\n    vertical-align: bottom;\n  }\n\n  // Highlight border color between thead, tbody and tfoot.\n  > :not(:first-child) {\n    border-top: (2 * $table-border-width) solid $table-group-separator-color;\n  }\n}\n\n\n//\n// Change placement of captions with a class\n//\n\n.caption-top {\n  caption-side: top;\n}\n\n\n//\n// Condensed table w/ half padding\n//\n\n.table-sm {\n  // stylelint-disable-next-line selector-max-universal\n  > :not(caption) > * > * {\n    padding: $table-cell-padding-y-sm $table-cell-padding-x-sm;\n  }\n}\n\n\n// Border versions\n//\n// Add or remove borders all around the table and between all the columns.\n//\n// When borders are added on all sides of the cells, the corners can render odd when\n// these borders do not have the same color or if they are semi-transparent.\n// Therefor we add top and border bottoms to the `tr`s and left and right borders\n// to the `td`s or `th`s\n\n.table-bordered {\n  > :not(caption) > * {\n    border-width: $table-border-width 0;\n\n    // stylelint-disable-next-line selector-max-universal\n    > * {\n      border-width: 0 $table-border-width;\n    }\n  }\n}\n\n.table-borderless {\n  // stylelint-disable-next-line selector-max-universal\n  > :not(caption) > * > * {\n    border-bottom-width: 0;\n  }\n\n  > :not(:first-child) {\n    border-top-width: 0;\n  }\n}\n\n// Zebra-striping\n//\n// Default zebra-stripe styles (alternating gray and transparent backgrounds)\n\n.table-striped {\n  > tbody > tr:nth-of-type(#{$table-striped-order}) > * {\n    --#{$variable-prefix}table-accent-bg: var(--#{$variable-prefix}table-striped-bg);\n    color: var(--#{$variable-prefix}table-striped-color);\n  }\n}\n\n// Active table\n//\n// The `.table-active` class can be added to highlight rows or cells\n\n.table-active {\n  --#{$variable-prefix}table-accent-bg: var(--#{$variable-prefix}table-active-bg);\n  color: var(--#{$variable-prefix}table-active-color);\n}\n\n// Hover effect\n//\n// Placed here since it has to come after the potential zebra striping\n\n.table-hover {\n  > tbody > tr:hover > * {\n    --#{$variable-prefix}table-accent-bg: var(--#{$variable-prefix}table-hover-bg);\n    color: var(--#{$variable-prefix}table-hover-color);\n  }\n}\n\n\n// Table variants\n//\n// Table variants set the table cell backgrounds, border colors\n// and the colors of the striped, hovered & active tables\n\n@each $color, $value in $table-variants {\n  @include table-variant($color, $value);\n}\n\n// Responsive tables\n//\n// Generate series of `.table-responsive-*` classes for configuring the screen\n// size of where your table will overflow.\n\n@each $breakpoint in map-keys($grid-breakpoints) {\n  $infix: breakpoint-infix($breakpoint, $grid-breakpoints);\n\n  @include media-breakpoint-down($breakpoint) {\n    .table-responsive#{$infix} {\n      overflow-x: auto;\n      -webkit-overflow-scrolling: touch;\n    }\n  }\n}\n","// scss-docs-start table-variant\n@mixin table-variant($state, $background) {\n  .table-#{$state} {\n    $color: color-contrast(opaque($body-bg, $background));\n    $hover-bg: mix($color, $background, percentage($table-hover-bg-factor));\n    $striped-bg: mix($color, $background, percentage($table-striped-bg-factor));\n    $active-bg: mix($color, $background, percentage($table-active-bg-factor));\n\n    --#{$variable-prefix}table-bg: #{$background};\n    --#{$variable-prefix}table-striped-bg: #{$striped-bg};\n    --#{$variable-prefix}table-striped-color: #{color-contrast($striped-bg)};\n    --#{$variable-prefix}table-active-bg: #{$active-bg};\n    --#{$variable-prefix}table-active-color: #{color-contrast($active-bg)};\n    --#{$variable-prefix}table-hover-bg: #{$hover-bg};\n    --#{$variable-prefix}table-hover-color: #{color-contrast($hover-bg)};\n\n    color: $color;\n    border-color: mix($color, $background, percentage($table-border-factor));\n  }\n}\n// scss-docs-end table-variant\n","//\n// Labels\n//\n\n.form-label {\n  margin-bottom: $form-label-margin-bottom;\n  @include font-size($form-label-font-size);\n  font-style: $form-label-font-style;\n  font-weight: $form-label-font-weight;\n  color: $form-label-color;\n}\n\n// For use with horizontal and inline forms, when you need the label (or legend)\n// text to align with the form controls.\n.col-form-label {\n  padding-top: add($input-padding-y, $input-border-width);\n  padding-bottom: add($input-padding-y, $input-border-width);\n  margin-bottom: 0; // Override the `<legend>` default\n  @include font-size(inherit); // Override the `<legend>` default\n  font-style: $form-label-font-style;\n  font-weight: $form-label-font-weight;\n  line-height: $input-line-height;\n  color: $form-label-color;\n}\n\n.col-form-label-lg {\n  padding-top: add($input-padding-y-lg, $input-border-width);\n  padding-bottom: add($input-padding-y-lg, $input-border-width);\n  @include font-size($input-font-size-lg);\n}\n\n.col-form-label-sm {\n  padding-top: add($input-padding-y-sm, $input-border-width);\n  padding-bottom: add($input-padding-y-sm, $input-border-width);\n  @include font-size($input-font-size-sm);\n}\n","//\n// Form text\n//\n\n.form-text {\n  margin-top: $form-text-margin-top;\n  @include font-size($form-text-font-size);\n  font-style: $form-text-font-style;\n  font-weight: $form-text-font-weight;\n  color: $form-text-color;\n}\n",'//\n// General form controls (plus a few specific high-level interventions)\n//\n\n.form-control {\n  display: block;\n  width: 100%;\n  padding: $input-padding-y $input-padding-x;\n  font-family: $input-font-family;\n  @include font-size($input-font-size);\n  font-weight: $input-font-weight;\n  line-height: $input-line-height;\n  color: $input-color;\n  background-color: $input-bg;\n  background-clip: padding-box;\n  border: $input-border-width solid $input-border-color;\n  appearance: none; // Fix appearance for date inputs in Safari\n\n  // Note: This has no effect on <select>s in some browsers, due to the limited stylability of `<select>`s in CSS.\n  @include border-radius($input-border-radius, 0);\n\n  @include box-shadow($input-box-shadow);\n  @include transition($input-transition);\n\n  &[type="file"] {\n    overflow: hidden; // prevent pseudo element button overlap\n\n    &:not(:disabled):not([readonly]) {\n      cursor: pointer;\n    }\n  }\n\n  // Customize the `:focus` state to imitate native WebKit styles.\n  &:focus {\n    color: $input-focus-color;\n    background-color: $input-focus-bg;\n    border-color: $input-focus-border-color;\n    outline: 0;\n    @if $enable-shadows {\n      @include box-shadow($input-box-shadow, $input-focus-box-shadow);\n    } @else {\n      // Avoid using mixin so we can pass custom focus shadow properly\n      box-shadow: $input-focus-box-shadow;\n    }\n  }\n\n  // Add some height to date inputs on iOS\n  // https://github.com/twbs/bootstrap/issues/23307\n  // TODO: we can remove this workaround once https://bugs.webkit.org/show_bug.cgi?id=198959 is resolved\n  &::-webkit-date-and-time-value {\n    // Multiply line-height by 1em if it has no unit\n    height: if(unit($input-line-height) == "", $input-line-height * 1em, $input-line-height);\n  }\n\n  // Placeholder\n  &::placeholder {\n    color: $input-placeholder-color;\n    // Override Firefox\'s unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526.\n    opacity: 1;\n  }\n\n  // Disabled and read-only inputs\n  //\n  // HTML5 says that controls under a fieldset > legend:first-child won\'t be\n  // disabled if the fieldset is disabled. Due to implementation difficulty, we\n  // don\'t honor that edge case; we style them as disabled anyway.\n  &:disabled,\n  &[readonly] {\n    background-color: $input-disabled-bg;\n    border-color: $input-disabled-border-color;\n    // iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655.\n    opacity: 1;\n  }\n\n  // File input buttons theming\n  &::file-selector-button {\n    padding: $input-padding-y $input-padding-x;\n    margin: (-$input-padding-y) (-$input-padding-x);\n    margin-inline-end: $input-padding-x;\n    color: $form-file-button-color;\n    @include gradient-bg($form-file-button-bg);\n    pointer-events: none;\n    border-color: inherit;\n    border-style: solid;\n    border-width: 0;\n    border-inline-end-width: $input-border-width;\n    border-radius: 0; // stylelint-disable-line property-disallowed-list\n    @include transition($btn-transition);\n  }\n\n  &:hover:not(:disabled):not([readonly])::file-selector-button {\n    background-color: $form-file-button-hover-bg;\n  }\n\n  &::-webkit-file-upload-button {\n    padding: $input-padding-y $input-padding-x;\n    margin: (-$input-padding-y) (-$input-padding-x);\n    margin-inline-end: $input-padding-x;\n    color: $form-file-button-color;\n    @include gradient-bg($form-file-button-bg);\n    pointer-events: none;\n    border-color: inherit;\n    border-style: solid;\n    border-width: 0;\n    border-inline-end-width: $input-border-width;\n    border-radius: 0; // stylelint-disable-line property-disallowed-list\n    @include transition($btn-transition);\n  }\n\n  &:hover:not(:disabled):not([readonly])::-webkit-file-upload-button {\n    background-color: $form-file-button-hover-bg;\n  }\n}\n\n// Readonly controls as plain text\n//\n// Apply class to a readonly input to make it appear like regular plain\n// text (without any border, background color, focus indicator)\n\n.form-control-plaintext {\n  display: block;\n  width: 100%;\n  padding: $input-padding-y 0;\n  margin-bottom: 0; // match inputs if this class comes on inputs with default margins\n  line-height: $input-line-height;\n  color: $input-plaintext-color;\n  background-color: transparent;\n  border: solid transparent;\n  border-width: $input-border-width 0;\n\n  &.form-control-sm,\n  &.form-control-lg {\n    padding-right: 0;\n    padding-left: 0;\n  }\n}\n\n// Form control sizing\n//\n// Build on `.form-control` with modifier classes to decrease or increase the\n// height and font-size of form controls.\n//\n// Repeated in `_input_group.scss` to avoid Sass extend issues.\n\n.form-control-sm {\n  min-height: $input-height-sm;\n  padding: $input-padding-y-sm $input-padding-x-sm;\n  @include font-size($input-font-size-sm);\n  @include border-radius($input-border-radius-sm);\n\n  &::file-selector-button {\n    padding: $input-padding-y-sm $input-padding-x-sm;\n    margin: (-$input-padding-y-sm) (-$input-padding-x-sm);\n    margin-inline-end: $input-padding-x-sm;\n  }\n\n  &::-webkit-file-upload-button {\n    padding: $input-padding-y-sm $input-padding-x-sm;\n    margin: (-$input-padding-y-sm) (-$input-padding-x-sm);\n    margin-inline-end: $input-padding-x-sm;\n  }\n}\n\n.form-control-lg {\n  min-height: $input-height-lg;\n  padding: $input-padding-y-lg $input-padding-x-lg;\n  @include font-size($input-font-size-lg);\n  @include border-radius($input-border-radius-lg);\n\n  &::file-selector-button {\n    padding: $input-padding-y-lg $input-padding-x-lg;\n    margin: (-$input-padding-y-lg) (-$input-padding-x-lg);\n    margin-inline-end: $input-padding-x-lg;\n  }\n\n  &::-webkit-file-upload-button {\n    padding: $input-padding-y-lg $input-padding-x-lg;\n    margin: (-$input-padding-y-lg) (-$input-padding-x-lg);\n    margin-inline-end: $input-padding-x-lg;\n  }\n}\n\n// Make sure textareas don\'t shrink too much when resized\n// https://github.com/twbs/bootstrap/pull/29124\n// stylelint-disable selector-no-qualifying-type\ntextarea {\n  &.form-control {\n    min-height: $input-height;\n  }\n\n  &.form-control-sm {\n    min-height: $input-height-sm;\n  }\n\n  &.form-control-lg {\n    min-height: $input-height-lg;\n  }\n}\n// stylelint-enable selector-no-qualifying-type\n\n.form-control-color {\n  width: $form-color-width;\n  height: auto; // Override fixed browser height\n  padding: $input-padding-y;\n\n  &:not(:disabled):not([readonly]) {\n    cursor: pointer;\n  }\n\n  &::-moz-color-swatch {\n    height: if(unit($input-line-height) == "", $input-line-height * 1em, $input-line-height);\n    @include border-radius($input-border-radius);\n  }\n\n  &::-webkit-color-swatch {\n    height: if(unit($input-line-height) == "", $input-line-height * 1em, $input-line-height);\n    @include border-radius($input-border-radius);\n  }\n}\n',"// stylelint-disable property-disallowed-list\n@mixin transition($transition...) {\n  @if length($transition) == 0 {\n    $transition: $transition-base;\n  }\n\n  @if length($transition) > 1 {\n    @each $value in $transition {\n      @if $value == null or $value == none {\n        @warn \"The keyword 'none' or 'null' must be used as a single argument.\";\n      }\n    }\n  }\n\n  @if $enable-transitions {\n    @if nth($transition, 1) != null {\n      transition: $transition;\n    }\n\n    @if $enable-reduced-motion and nth($transition, 1) != null and nth($transition, 1) != none {\n      @media (prefers-reduced-motion: reduce) {\n        transition: none;\n      }\n    }\n  }\n}\n","// Gradients\n\n// scss-docs-start gradient-bg-mixin\n@mixin gradient-bg($color: null) {\n  background-color: $color;\n\n  @if $enable-gradients {\n    background-image: var(--#{$variable-prefix}gradient);\n  }\n}\n// scss-docs-end gradient-bg-mixin\n\n// scss-docs-start gradient-mixins\n// Horizontal gradient, from left to right\n//\n// Creates two color stops, start and end, by specifying a color and position for each color stop.\n@mixin gradient-x($start-color: $gray-700, $end-color: $gray-800, $start-percent: 0%, $end-percent: 100%) {\n  background-image: linear-gradient(to right, $start-color $start-percent, $end-color $end-percent);\n}\n\n// Vertical gradient, from top to bottom\n//\n// Creates two color stops, start and end, by specifying a color and position for each color stop.\n@mixin gradient-y($start-color: $gray-700, $end-color: $gray-800, $start-percent: null, $end-percent: null) {\n  background-image: linear-gradient(to bottom, $start-color $start-percent, $end-color $end-percent);\n}\n\n@mixin gradient-directional($start-color: $gray-700, $end-color: $gray-800, $deg: 45deg) {\n  background-image: linear-gradient($deg, $start-color, $end-color);\n}\n\n@mixin gradient-x-three-colors($start-color: $blue, $mid-color: $purple, $color-stop: 50%, $end-color: $red) {\n  background-image: linear-gradient(to right, $start-color, $mid-color $color-stop, $end-color);\n}\n\n@mixin gradient-y-three-colors($start-color: $blue, $mid-color: $purple, $color-stop: 50%, $end-color: $red) {\n  background-image: linear-gradient($start-color, $mid-color $color-stop, $end-color);\n}\n\n@mixin gradient-radial($inner-color: $gray-700, $outer-color: $gray-800) {\n  background-image: radial-gradient(circle, $inner-color, $outer-color);\n}\n\n@mixin gradient-striped($color: rgba($white, .15), $angle: 45deg) {\n  background-image: linear-gradient($angle, $color 25%, transparent 25%, transparent 50%, $color 50%, $color 75%, transparent 75%, transparent);\n}\n// scss-docs-end gradient-mixins\n",'// Select\n//\n// Replaces the browser default select with a custom one, mostly pulled from\n// https://primer.github.io/.\n\n.form-select {\n  display: block;\n  width: 100%;\n  padding: $form-select-padding-y $form-select-indicator-padding $form-select-padding-y $form-select-padding-x;\n  // stylelint-disable-next-line property-no-vendor-prefix\n  -moz-padding-start: subtract($form-select-padding-x, 3px); // See https://github.com/twbs/bootstrap/issues/32636\n  font-family: $form-select-font-family;\n  @include font-size($form-select-font-size);\n  font-weight: $form-select-font-weight;\n  line-height: $form-select-line-height;\n  color: $form-select-color;\n  background-color: $form-select-bg;\n  background-image: escape-svg($form-select-indicator);\n  background-repeat: no-repeat;\n  background-position: $form-select-bg-position;\n  background-size: $form-select-bg-size;\n  border: $form-select-border-width solid $form-select-border-color;\n  @include border-radius($form-select-border-radius, 0);\n  @include box-shadow($form-select-box-shadow);\n  @include transition($form-select-transition);\n  appearance: none;\n\n  &:focus {\n    border-color: $form-select-focus-border-color;\n    outline: 0;\n    @if $enable-shadows {\n      @include box-shadow($form-select-box-shadow, $form-select-focus-box-shadow);\n    } @else {\n      // Avoid using mixin so we can pass custom focus shadow properly\n      box-shadow: $form-select-focus-box-shadow;\n    }\n  }\n\n  &[multiple],\n  &[size]:not([size="1"]) {\n    padding-right: $form-select-padding-x;\n    background-image: none;\n  }\n\n  &:disabled {\n    color: $form-select-disabled-color;\n    background-color: $form-select-disabled-bg;\n    border-color: $form-select-disabled-border-color;\n  }\n\n  // Remove outline from select box in FF\n  &:-moz-focusring {\n    color: transparent;\n    text-shadow: 0 0 0 $form-select-color;\n  }\n}\n\n.form-select-sm {\n  padding-top: $form-select-padding-y-sm;\n  padding-bottom: $form-select-padding-y-sm;\n  padding-left: $form-select-padding-x-sm;\n  @include font-size($form-select-font-size-sm);\n  @include border-radius($form-select-border-radius-sm);\n}\n\n.form-select-lg {\n  padding-top: $form-select-padding-y-lg;\n  padding-bottom: $form-select-padding-y-lg;\n  padding-left: $form-select-padding-x-lg;\n  @include font-size($form-select-font-size-lg);\n  @include border-radius($form-select-border-radius-lg);\n}\n','//\n// Check/radio\n//\n\n.form-check {\n  display: block;\n  min-height: $form-check-min-height;\n  padding-left: $form-check-padding-start;\n  margin-bottom: $form-check-margin-bottom;\n\n  .form-check-input {\n    float: left;\n    margin-left: $form-check-padding-start * -1;\n  }\n}\n\n.form-check-input {\n  width: $form-check-input-width;\n  height: $form-check-input-width;\n  margin-top: ($line-height-base - $form-check-input-width) * .5; // line-height minus check height\n  vertical-align: top;\n  background-color: $form-check-input-bg;\n  background-repeat: no-repeat;\n  background-position: center;\n  background-size: contain;\n  border: $form-check-input-border;\n  appearance: none;\n  color-adjust: exact; // Keep themed appearance for print\n  @include transition($form-check-transition);\n\n  &[type="checkbox"] {\n    @include border-radius($form-check-input-border-radius);\n  }\n\n  &[type="radio"] {\n    // stylelint-disable-next-line property-disallowed-list\n    border-radius: $form-check-radio-border-radius;\n  }\n\n  &:active {\n    filter: $form-check-input-active-filter;\n  }\n\n  &:focus {\n    border-color: $form-check-input-focus-border;\n    outline: 0;\n    box-shadow: $form-check-input-focus-box-shadow;\n  }\n\n  &:checked {\n    background-color: $form-check-input-checked-bg-color;\n    border-color: $form-check-input-checked-border-color;\n\n    &[type="checkbox"] {\n      @if $enable-gradients {\n        background-image: escape-svg($form-check-input-checked-bg-image), var(--#{$variable-prefix}gradient);\n      } @else {\n        background-image: escape-svg($form-check-input-checked-bg-image);\n      }\n    }\n\n    &[type="radio"] {\n      @if $enable-gradients {\n        background-image: escape-svg($form-check-radio-checked-bg-image), var(--#{$variable-prefix}gradient);\n      } @else {\n        background-image: escape-svg($form-check-radio-checked-bg-image);\n      }\n    }\n  }\n\n  &[type="checkbox"]:indeterminate {\n    background-color: $form-check-input-indeterminate-bg-color;\n    border-color: $form-check-input-indeterminate-border-color;\n\n    @if $enable-gradients {\n      background-image: escape-svg($form-check-input-indeterminate-bg-image), var(--#{$variable-prefix}gradient);\n    } @else {\n      background-image: escape-svg($form-check-input-indeterminate-bg-image);\n    }\n  }\n\n  &:disabled {\n    pointer-events: none;\n    filter: none;\n    opacity: $form-check-input-disabled-opacity;\n  }\n\n  // Use disabled attribute in addition of :disabled pseudo-class\n  // See: https://github.com/twbs/bootstrap/issues/28247\n  &[disabled],\n  &:disabled {\n    ~ .form-check-label {\n      opacity: $form-check-label-disabled-opacity;\n    }\n  }\n}\n\n.form-check-label {\n  color: $form-check-label-color;\n  cursor: $form-check-label-cursor;\n}\n\n//\n// Switch\n//\n\n.form-switch {\n  padding-left: $form-switch-padding-start;\n\n  .form-check-input {\n    width: $form-switch-width;\n    margin-left: $form-switch-padding-start * -1;\n    background-image: escape-svg($form-switch-bg-image);\n    background-position: left center;\n    @include border-radius($form-switch-border-radius);\n    @include transition($form-switch-transition);\n\n    &:focus {\n      background-image: escape-svg($form-switch-focus-bg-image);\n    }\n\n    &:checked {\n      background-position: $form-switch-checked-bg-position;\n\n      @if $enable-gradients {\n        background-image: escape-svg($form-switch-checked-bg-image), var(--#{$variable-prefix}gradient);\n      } @else {\n        background-image: escape-svg($form-switch-checked-bg-image);\n      }\n    }\n  }\n}\n\n.form-check-inline {\n  display: inline-block;\n  margin-right: $form-check-inline-margin-end;\n}\n\n.btn-check {\n  position: absolute;\n  clip: rect(0, 0, 0, 0);\n  pointer-events: none;\n\n  &[disabled],\n  &:disabled {\n    + .btn {\n      pointer-events: none;\n      filter: none;\n      opacity: $form-check-btn-check-disabled-opacity;\n    }\n  }\n}\n',"// Range\n//\n// Style range inputs the same across browsers. Vendor-specific rules for pseudo\n// elements cannot be mixed. As such, there are no shared styles for focus or\n// active states on prefixed selectors.\n\n.form-range {\n  width: 100%;\n  height: add($form-range-thumb-height, $form-range-thumb-focus-box-shadow-width * 2);\n  padding: 0; // Need to reset padding\n  background-color: transparent;\n  appearance: none;\n\n  &:focus {\n    outline: 0;\n\n    // Pseudo-elements must be split across multiple rulesets to have an effect.\n    // No box-shadow() mixin for focus accessibility.\n    &::-webkit-slider-thumb { box-shadow: $form-range-thumb-focus-box-shadow; }\n    &::-moz-range-thumb     { box-shadow: $form-range-thumb-focus-box-shadow; }\n  }\n\n  &::-moz-focus-outer {\n    border: 0;\n  }\n\n  &::-webkit-slider-thumb {\n    width: $form-range-thumb-width;\n    height: $form-range-thumb-height;\n    margin-top: ($form-range-track-height - $form-range-thumb-height) * .5; // Webkit specific\n    @include gradient-bg($form-range-thumb-bg);\n    border: $form-range-thumb-border;\n    @include border-radius($form-range-thumb-border-radius);\n    @include box-shadow($form-range-thumb-box-shadow);\n    @include transition($form-range-thumb-transition);\n    appearance: none;\n\n    &:active {\n      @include gradient-bg($form-range-thumb-active-bg);\n    }\n  }\n\n  &::-webkit-slider-runnable-track {\n    width: $form-range-track-width;\n    height: $form-range-track-height;\n    color: transparent; // Why?\n    cursor: $form-range-track-cursor;\n    background-color: $form-range-track-bg;\n    border-color: transparent;\n    @include border-radius($form-range-track-border-radius);\n    @include box-shadow($form-range-track-box-shadow);\n  }\n\n  &::-moz-range-thumb {\n    width: $form-range-thumb-width;\n    height: $form-range-thumb-height;\n    @include gradient-bg($form-range-thumb-bg);\n    border: $form-range-thumb-border;\n    @include border-radius($form-range-thumb-border-radius);\n    @include box-shadow($form-range-thumb-box-shadow);\n    @include transition($form-range-thumb-transition);\n    appearance: none;\n\n    &:active {\n      @include gradient-bg($form-range-thumb-active-bg);\n    }\n  }\n\n  &::-moz-range-track {\n    width: $form-range-track-width;\n    height: $form-range-track-height;\n    color: transparent;\n    cursor: $form-range-track-cursor;\n    background-color: $form-range-track-bg;\n    border-color: transparent; // Firefox specific?\n    @include border-radius($form-range-track-border-radius);\n    @include box-shadow($form-range-track-box-shadow);\n  }\n\n  &:disabled {\n    pointer-events: none;\n\n    &::-webkit-slider-thumb {\n      background-color: $form-range-thumb-disabled-bg;\n    }\n\n    &::-moz-range-thumb {\n      background-color: $form-range-thumb-disabled-bg;\n    }\n  }\n}\n",".form-floating {\n  position: relative;\n\n  > .form-control,\n  > .form-select {\n    height: $form-floating-height;\n    line-height: $form-floating-line-height;\n  }\n\n  > label {\n    position: absolute;\n    top: 0;\n    left: 0;\n    height: 100%; // allow textareas\n    padding: $form-floating-padding-y $form-floating-padding-x;\n    pointer-events: none;\n    border: $input-border-width solid transparent; // Required for aligning label's text with the input as it affects inner box model\n    transform-origin: 0 0;\n    @include transition($form-floating-transition);\n  }\n\n  // stylelint-disable no-duplicate-selectors\n  > .form-control {\n    padding: $form-floating-padding-y $form-floating-padding-x;\n\n    &::placeholder {\n      color: transparent;\n    }\n\n    &:focus,\n    &:not(:placeholder-shown) {\n      padding-top: $form-floating-input-padding-t;\n      padding-bottom: $form-floating-input-padding-b;\n    }\n    // Duplicated because `:-webkit-autofill` invalidates other selectors when grouped\n    &:-webkit-autofill {\n      padding-top: $form-floating-input-padding-t;\n      padding-bottom: $form-floating-input-padding-b;\n    }\n  }\n\n  > .form-select {\n    padding-top: $form-floating-input-padding-t;\n    padding-bottom: $form-floating-input-padding-b;\n  }\n\n  > .form-control:focus,\n  > .form-control:not(:placeholder-shown),\n  > .form-select {\n    ~ label {\n      opacity: $form-floating-label-opacity;\n      transform: $form-floating-label-transform;\n    }\n  }\n  // Duplicated because `:-webkit-autofill` invalidates other selectors when grouped\n  > .form-control:-webkit-autofill {\n    ~ label {\n      opacity: $form-floating-label-opacity;\n      transform: $form-floating-label-transform;\n    }\n  }\n  // stylelint-enable no-duplicate-selectors\n}\n",'//\n// Base styles\n//\n\n.input-group {\n  position: relative;\n  display: flex;\n  flex-wrap: wrap; // For form validation feedback\n  align-items: stretch;\n  width: 100%;\n\n  > .form-control,\n  > .form-select {\n    position: relative; // For focus state\'s z-index\n    flex: 1 1 auto;\n    width: 1%;\n    min-width: 0; // https://stackoverflow.com/questions/36247140/why-dont-flex-items-shrink-past-content-size\n  }\n\n  // Bring the "active" form control to the top of surrounding elements\n  > .form-control:focus,\n  > .form-select:focus {\n    z-index: 3;\n  }\n\n  // Ensure buttons are always above inputs for more visually pleasing borders.\n  // This isn\'t needed for `.input-group-text` since it shares the same border-color\n  // as our inputs.\n  .btn {\n    position: relative;\n    z-index: 2;\n\n    &:focus {\n      z-index: 3;\n    }\n  }\n}\n\n\n// Textual addons\n//\n// Serves as a catch-all element for any text or radio/checkbox input you wish\n// to prepend or append to an input.\n\n.input-group-text {\n  display: flex;\n  align-items: center;\n  padding: $input-group-addon-padding-y $input-group-addon-padding-x;\n  @include font-size($input-font-size); // Match inputs\n  font-weight: $input-group-addon-font-weight;\n  line-height: $input-line-height;\n  color: $input-group-addon-color;\n  text-align: center;\n  white-space: nowrap;\n  background-color: $input-group-addon-bg;\n  border: $input-border-width solid $input-group-addon-border-color;\n  @include border-radius($input-border-radius);\n}\n\n\n// Sizing\n//\n// Remix the default form control sizing classes into new ones for easier\n// manipulation.\n\n.input-group-lg > .form-control,\n.input-group-lg > .form-select,\n.input-group-lg > .input-group-text,\n.input-group-lg > .btn {\n  padding: $input-padding-y-lg $input-padding-x-lg;\n  @include font-size($input-font-size-lg);\n  @include border-radius($input-border-radius-lg);\n}\n\n.input-group-sm > .form-control,\n.input-group-sm > .form-select,\n.input-group-sm > .input-group-text,\n.input-group-sm > .btn {\n  padding: $input-padding-y-sm $input-padding-x-sm;\n  @include font-size($input-font-size-sm);\n  @include border-radius($input-border-radius-sm);\n}\n\n.input-group-lg > .form-select,\n.input-group-sm > .form-select {\n  padding-right: $form-select-padding-x + $form-select-indicator-padding;\n}\n\n\n// Rounded corners\n//\n// These rulesets must come after the sizing ones to properly override sm and lg\n// border-radius values when extending. They\'re more specific than we\'d like\n// with the `.input-group >` part, but without it, we cannot override the sizing.\n\n// stylelint-disable-next-line no-duplicate-selectors\n.input-group {\n  &:not(.has-validation) {\n    > :not(:last-child):not(.dropdown-toggle):not(.dropdown-menu),\n    > .dropdown-toggle:nth-last-child(n + 3) {\n      @include border-end-radius(0);\n    }\n  }\n\n  &.has-validation {\n    > :nth-last-child(n + 3):not(.dropdown-toggle):not(.dropdown-menu),\n    > .dropdown-toggle:nth-last-child(n + 4) {\n      @include border-end-radius(0);\n    }\n  }\n\n  $validation-messages: "";\n  @each $state in map-keys($form-validation-states) {\n    $validation-messages: $validation-messages + ":not(." + unquote($state) + "-tooltip)" + ":not(." + unquote($state) + "-feedback)";\n  }\n\n  > :not(:first-child):not(.dropdown-menu)#{$validation-messages} {\n    margin-left: -$input-border-width;\n    @include border-start-radius(0);\n  }\n}\n','// This mixin uses an `if()` technique to be compatible with Dart Sass\n// See https://github.com/sass/sass/issues/1873#issuecomment-152293725 for more details\n\n// scss-docs-start form-validation-mixins\n@mixin form-validation-state-selector($state) {\n  @if ($state == "valid" or $state == "invalid") {\n    .was-validated #{if(&, "&", "")}:#{$state},\n    #{if(&, "&", "")}.is-#{$state} {\n      @content;\n    }\n  } @else {\n    #{if(&, "&", "")}.is-#{$state} {\n      @content;\n    }\n  }\n}\n\n@mixin form-validation-state(\n  $state,\n  $color,\n  $icon,\n  $tooltip-color: color-contrast($color),\n  $tooltip-bg-color: rgba($color, $form-feedback-tooltip-opacity),\n  $focus-box-shadow: 0 0 $input-btn-focus-blur $input-focus-width rgba($color, $input-btn-focus-color-opacity)\n) {\n  .#{$state}-feedback {\n    display: none;\n    width: 100%;\n    margin-top: $form-feedback-margin-top;\n    @include font-size($form-feedback-font-size);\n    font-style: $form-feedback-font-style;\n    color: $color;\n  }\n\n  .#{$state}-tooltip {\n    position: absolute;\n    top: 100%;\n    z-index: 5;\n    display: none;\n    max-width: 100%; // Contain to parent when possible\n    padding: $form-feedback-tooltip-padding-y $form-feedback-tooltip-padding-x;\n    margin-top: .1rem;\n    @include font-size($form-feedback-tooltip-font-size);\n    line-height: $form-feedback-tooltip-line-height;\n    color: $tooltip-color;\n    background-color: $tooltip-bg-color;\n    @include border-radius($form-feedback-tooltip-border-radius);\n  }\n\n  @include form-validation-state-selector($state) {\n    ~ .#{$state}-feedback,\n    ~ .#{$state}-tooltip {\n      display: block;\n    }\n  }\n\n  .form-control {\n    @include form-validation-state-selector($state) {\n      border-color: $color;\n\n      @if $enable-validation-icons {\n        padding-right: $input-height-inner;\n        background-image: escape-svg($icon);\n        background-repeat: no-repeat;\n        background-position: right $input-height-inner-quarter center;\n        background-size: $input-height-inner-half $input-height-inner-half;\n      }\n\n      &:focus {\n        border-color: $color;\n        box-shadow: $focus-box-shadow;\n      }\n    }\n  }\n\n  // stylelint-disable-next-line selector-no-qualifying-type\n  textarea.form-control {\n    @include form-validation-state-selector($state) {\n      @if $enable-validation-icons {\n        padding-right: $input-height-inner;\n        background-position: top $input-height-inner-quarter right $input-height-inner-quarter;\n      }\n    }\n  }\n\n  .form-select {\n    @include form-validation-state-selector($state) {\n      border-color: $color;\n\n      @if $enable-validation-icons {\n        &:not([multiple]):not([size]),\n        &:not([multiple])[size="1"] {\n          padding-right: $form-select-feedback-icon-padding-end;\n          background-image: escape-svg($form-select-indicator), escape-svg($icon);\n          background-position: $form-select-bg-position, $form-select-feedback-icon-position;\n          background-size: $form-select-bg-size, $form-select-feedback-icon-size;\n        }\n      }\n\n      &:focus {\n        border-color: $color;\n        box-shadow: $focus-box-shadow;\n      }\n    }\n  }\n\n  .form-check-input {\n    @include form-validation-state-selector($state) {\n      border-color: $color;\n\n      &:checked {\n        background-color: $color;\n      }\n\n      &:focus {\n        box-shadow: $focus-box-shadow;\n      }\n\n      ~ .form-check-label {\n        color: $color;\n      }\n    }\n  }\n  .form-check-inline .form-check-input {\n    ~ .#{$state}-feedback {\n      margin-left: .5em;\n    }\n  }\n\n  .input-group .form-control,\n  .input-group .form-select {\n    @include form-validation-state-selector($state) {\n      @if $state == "valid" {\n        z-index: 1;\n      } @else if $state == "invalid" {\n        z-index: 2;\n      }\n      &:focus {\n        z-index: 3;\n      }\n    }\n  }\n}\n// scss-docs-end form-validation-mixins\n',"//\n// Base styles\n//\n\n.btn {\n  display: inline-block;\n  font-family: $btn-font-family;\n  font-weight: $btn-font-weight;\n  line-height: $btn-line-height;\n  color: $body-color;\n  text-align: center;\n  text-decoration: if($link-decoration == none, null, none);\n  white-space: $btn-white-space;\n  vertical-align: middle;\n  cursor: if($enable-button-pointers, pointer, null);\n  user-select: none;\n  background-color: transparent;\n  border: $btn-border-width solid transparent;\n  @include button-size($btn-padding-y, $btn-padding-x, $btn-font-size, $btn-border-radius);\n  @include transition($btn-transition);\n\n  &:hover {\n    color: $body-color;\n    text-decoration: if($link-hover-decoration == underline, none, null);\n  }\n\n  .btn-check:focus + &,\n  &:focus {\n    outline: 0;\n    box-shadow: $btn-focus-box-shadow;\n  }\n\n  .btn-check:checked + &,\n  .btn-check:active + &,\n  &:active,\n  &.active {\n    @include box-shadow($btn-active-box-shadow);\n\n    &:focus {\n      @include box-shadow($btn-focus-box-shadow, $btn-active-box-shadow);\n    }\n  }\n\n  &:disabled,\n  &.disabled,\n  fieldset:disabled & {\n    pointer-events: none;\n    opacity: $btn-disabled-opacity;\n    @include box-shadow(none);\n  }\n}\n\n\n//\n// Alternate buttons\n//\n\n// scss-docs-start btn-variant-loops\n@each $color, $value in $theme-colors {\n  .btn-#{$color} {\n    @include button-variant($value, $value);\n  }\n}\n\n@each $color, $value in $theme-colors {\n  .btn-outline-#{$color} {\n    @include button-outline-variant($value);\n  }\n}\n// scss-docs-end btn-variant-loops\n\n\n//\n// Link buttons\n//\n\n// Make a button look and behave like a link\n.btn-link {\n  font-weight: $font-weight-normal;\n  color: $btn-link-color;\n  text-decoration: $link-decoration;\n\n  &:hover {\n    color: $btn-link-hover-color;\n    text-decoration: $link-hover-decoration;\n  }\n\n  &:focus {\n    text-decoration: $link-hover-decoration;\n  }\n\n  &:disabled,\n  &.disabled {\n    color: $btn-link-disabled-color;\n  }\n\n  // No need for an active state here\n}\n\n\n//\n// Button Sizes\n//\n\n.btn-lg {\n  @include button-size($btn-padding-y-lg, $btn-padding-x-lg, $btn-font-size-lg, $btn-border-radius-lg);\n}\n\n.btn-sm {\n  @include button-size($btn-padding-y-sm, $btn-padding-x-sm, $btn-font-size-sm, $btn-border-radius-sm);\n}\n","// Button variants\n//\n// Easily pump out default styles, as well as :hover, :focus, :active,\n// and disabled options for all buttons\n\n// scss-docs-start btn-variant-mixin\n@mixin button-variant(\n  $background,\n  $border,\n  $color: color-contrast($background),\n  $hover-background: if($color == $color-contrast-light, shade-color($background, $btn-hover-bg-shade-amount), tint-color($background, $btn-hover-bg-tint-amount)),\n  $hover-border: if($color == $color-contrast-light, shade-color($border, $btn-hover-border-shade-amount), tint-color($border, $btn-hover-border-tint-amount)),\n  $hover-color: color-contrast($hover-background),\n  $active-background: if($color == $color-contrast-light, shade-color($background, $btn-active-bg-shade-amount), tint-color($background, $btn-active-bg-tint-amount)),\n  $active-border: if($color == $color-contrast-light, shade-color($border, $btn-active-border-shade-amount), tint-color($border, $btn-active-border-tint-amount)),\n  $active-color: color-contrast($active-background),\n  $disabled-background: $background,\n  $disabled-border: $border,\n  $disabled-color: color-contrast($disabled-background)\n) {\n  color: $color;\n  @include gradient-bg($background);\n  border-color: $border;\n  @include box-shadow($btn-box-shadow);\n\n  &:hover {\n    color: $hover-color;\n    @include gradient-bg($hover-background);\n    border-color: $hover-border;\n  }\n\n  .btn-check:focus + &,\n  &:focus {\n    color: $hover-color;\n    @include gradient-bg($hover-background);\n    border-color: $hover-border;\n    @if $enable-shadows {\n      @include box-shadow($btn-box-shadow, 0 0 0 $btn-focus-width rgba(mix($color, $border, 15%), .5));\n    } @else {\n      // Avoid using mixin so we can pass custom focus shadow properly\n      box-shadow: 0 0 0 $btn-focus-width rgba(mix($color, $border, 15%), .5);\n    }\n  }\n\n  .btn-check:checked + &,\n  .btn-check:active + &,\n  &:active,\n  &.active,\n  .show > &.dropdown-toggle {\n    color: $active-color;\n    background-color: $active-background;\n    // Remove CSS gradients if they're enabled\n    background-image: if($enable-gradients, none, null);\n    border-color: $active-border;\n\n    &:focus {\n      @if $enable-shadows {\n        @include box-shadow($btn-active-box-shadow, 0 0 0 $btn-focus-width rgba(mix($color, $border, 15%), .5));\n      } @else {\n        // Avoid using mixin so we can pass custom focus shadow properly\n        box-shadow: 0 0 0 $btn-focus-width rgba(mix($color, $border, 15%), .5);\n      }\n    }\n  }\n\n  &:disabled,\n  &.disabled {\n    color: $disabled-color;\n    background-color: $disabled-background;\n    // Remove CSS gradients if they're enabled\n    background-image: if($enable-gradients, none, null);\n    border-color: $disabled-border;\n  }\n}\n// scss-docs-end btn-variant-mixin\n\n// scss-docs-start btn-outline-variant-mixin\n@mixin button-outline-variant(\n  $color,\n  $color-hover: color-contrast($color),\n  $active-background: $color,\n  $active-border: $color,\n  $active-color: color-contrast($active-background)\n) {\n  color: $color;\n  border-color: $color;\n\n  &:hover {\n    color: $color-hover;\n    background-color: $active-background;\n    border-color: $active-border;\n  }\n\n  .btn-check:focus + &,\n  &:focus {\n    box-shadow: 0 0 0 $btn-focus-width rgba($color, .5);\n  }\n\n  .btn-check:checked + &,\n  .btn-check:active + &,\n  &:active,\n  &.active,\n  &.dropdown-toggle.show {\n    color: $active-color;\n    background-color: $active-background;\n    border-color: $active-border;\n\n    &:focus {\n      @if $enable-shadows {\n        @include box-shadow($btn-active-box-shadow, 0 0 0 $btn-focus-width rgba($color, .5));\n      } @else {\n        // Avoid using mixin so we can pass custom focus shadow properly\n        box-shadow: 0 0 0 $btn-focus-width rgba($color, .5);\n      }\n    }\n  }\n\n  &:disabled,\n  &.disabled {\n    color: $color;\n    background-color: transparent;\n  }\n}\n// scss-docs-end btn-outline-variant-mixin\n\n// scss-docs-start btn-size-mixin\n@mixin button-size($padding-y, $padding-x, $font-size, $border-radius) {\n  padding: $padding-y $padding-x;\n  @include font-size($font-size);\n  // Manually declare to provide an override to the browser default\n  @include border-radius($border-radius, 0);\n}\n// scss-docs-end btn-size-mixin\n",".fade {\n  @include transition($transition-fade);\n\n  &:not(.show) {\n    opacity: 0;\n  }\n}\n\n// scss-docs-start collapse-classes\n.collapse {\n  &:not(.show) {\n    display: none;\n  }\n}\n\n.collapsing {\n  height: 0;\n  overflow: hidden;\n  @include transition($transition-collapse);\n\n  &.collapse-horizontal {\n    width: 0;\n    height: auto;\n    @include transition($transition-collapse-width);\n  }\n}\n// scss-docs-end collapse-classes\n","// The dropdown wrapper (`<div>`)\n.dropup,\n.dropend,\n.dropdown,\n.dropstart {\n  position: relative;\n}\n\n.dropdown-toggle {\n  white-space: nowrap;\n\n  // Generate the caret automatically\n  @include caret();\n}\n\n// The dropdown menu\n.dropdown-menu {\n  position: absolute;\n  z-index: $zindex-dropdown;\n  display: none; // none by default, but block on \"open\" of the menu\n  min-width: $dropdown-min-width;\n  padding: $dropdown-padding-y $dropdown-padding-x;\n  margin: 0; // Override default margin of ul\n  @include font-size($dropdown-font-size);\n  color: $dropdown-color;\n  text-align: left; // Ensures proper alignment if parent has it changed (e.g., modal footer)\n  list-style: none;\n  background-color: $dropdown-bg;\n  background-clip: padding-box;\n  border: $dropdown-border-width solid $dropdown-border-color;\n  @include border-radius($dropdown-border-radius);\n  @include box-shadow($dropdown-box-shadow);\n\n  &[data-bs-popper] {\n    top: 100%;\n    left: 0;\n    margin-top: $dropdown-spacer;\n  }\n}\n\n// scss-docs-start responsive-breakpoints\n// We deliberately hardcode the `bs-` prefix because we check\n// this custom property in JS to determine Popper's positioning\n\n@each $breakpoint in map-keys($grid-breakpoints) {\n  @include media-breakpoint-up($breakpoint) {\n    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);\n\n    .dropdown-menu#{$infix}-start {\n      --bs-position: start;\n\n      &[data-bs-popper] {\n        right: auto;\n        left: 0;\n      }\n    }\n\n    .dropdown-menu#{$infix}-end {\n      --bs-position: end;\n\n      &[data-bs-popper] {\n        right: 0;\n        left: auto;\n      }\n    }\n  }\n}\n// scss-docs-end responsive-breakpoints\n\n// Allow for dropdowns to go bottom up (aka, dropup-menu)\n// Just add .dropup after the standard .dropdown class and you're set.\n.dropup {\n  .dropdown-menu[data-bs-popper] {\n    top: auto;\n    bottom: 100%;\n    margin-top: 0;\n    margin-bottom: $dropdown-spacer;\n  }\n\n  .dropdown-toggle {\n    @include caret(up);\n  }\n}\n\n.dropend {\n  .dropdown-menu[data-bs-popper] {\n    top: 0;\n    right: auto;\n    left: 100%;\n    margin-top: 0;\n    margin-left: $dropdown-spacer;\n  }\n\n  .dropdown-toggle {\n    @include caret(end);\n    &::after {\n      vertical-align: 0;\n    }\n  }\n}\n\n.dropstart {\n  .dropdown-menu[data-bs-popper] {\n    top: 0;\n    right: 100%;\n    left: auto;\n    margin-top: 0;\n    margin-right: $dropdown-spacer;\n  }\n\n  .dropdown-toggle {\n    @include caret(start);\n    &::before {\n      vertical-align: 0;\n    }\n  }\n}\n\n\n// Dividers (basically an `<hr>`) within the dropdown\n.dropdown-divider {\n  height: 0;\n  margin: $dropdown-divider-margin-y 0;\n  overflow: hidden;\n  border-top: 1px solid $dropdown-divider-bg;\n}\n\n// Links, buttons, and more within the dropdown menu\n//\n// `<button>`-specific styles are denoted with `// For <button>s`\n.dropdown-item {\n  display: block;\n  width: 100%; // For `<button>`s\n  padding: $dropdown-item-padding-y $dropdown-item-padding-x;\n  clear: both;\n  font-weight: $font-weight-normal;\n  color: $dropdown-link-color;\n  text-align: inherit; // For `<button>`s\n  text-decoration: if($link-decoration == none, null, none);\n  white-space: nowrap; // prevent links from randomly breaking onto new lines\n  background-color: transparent; // For `<button>`s\n  border: 0; // For `<button>`s\n\n  // Prevent dropdown overflow if there's no padding\n  // See https://github.com/twbs/bootstrap/pull/27703\n  @if $dropdown-padding-y == 0 {\n    &:first-child {\n      @include border-top-radius($dropdown-inner-border-radius);\n    }\n\n    &:last-child {\n      @include border-bottom-radius($dropdown-inner-border-radius);\n    }\n  }\n\n  &:hover,\n  &:focus {\n    color: $dropdown-link-hover-color;\n    text-decoration: if($link-hover-decoration == underline, none, null);\n    @include gradient-bg($dropdown-link-hover-bg);\n  }\n\n  &.active,\n  &:active {\n    color: $dropdown-link-active-color;\n    text-decoration: none;\n    @include gradient-bg($dropdown-link-active-bg);\n  }\n\n  &.disabled,\n  &:disabled {\n    color: $dropdown-link-disabled-color;\n    pointer-events: none;\n    background-color: transparent;\n    // Remove CSS gradients if they're enabled\n    background-image: if($enable-gradients, none, null);\n  }\n}\n\n.dropdown-menu.show {\n  display: block;\n}\n\n// Dropdown section headers\n.dropdown-header {\n  display: block;\n  padding: $dropdown-header-padding;\n  margin-bottom: 0; // for use with heading elements\n  @include font-size($font-size-sm);\n  color: $dropdown-header-color;\n  white-space: nowrap; // as with > li > a\n}\n\n// Dropdown text\n.dropdown-item-text {\n  display: block;\n  padding: $dropdown-item-padding-y $dropdown-item-padding-x;\n  color: $dropdown-link-color;\n}\n\n// Dark dropdowns\n.dropdown-menu-dark {\n  color: $dropdown-dark-color;\n  background-color: $dropdown-dark-bg;\n  border-color: $dropdown-dark-border-color;\n  @include box-shadow($dropdown-dark-box-shadow);\n\n  .dropdown-item {\n    color: $dropdown-dark-link-color;\n\n    &:hover,\n    &:focus {\n      color: $dropdown-dark-link-hover-color;\n      @include gradient-bg($dropdown-dark-link-hover-bg);\n    }\n\n    &.active,\n    &:active {\n      color: $dropdown-dark-link-active-color;\n      @include gradient-bg($dropdown-dark-link-active-bg);\n    }\n\n    &.disabled,\n    &:disabled {\n      color: $dropdown-dark-link-disabled-color;\n    }\n  }\n\n  .dropdown-divider {\n    border-color: $dropdown-dark-divider-bg;\n  }\n\n  .dropdown-item-text {\n    color: $dropdown-dark-link-color;\n  }\n\n  .dropdown-header {\n    color: $dropdown-dark-header-color;\n  }\n}\n",'// scss-docs-start caret-mixins\n@mixin caret-down {\n  border-top: $caret-width solid;\n  border-right: $caret-width solid transparent;\n  border-bottom: 0;\n  border-left: $caret-width solid transparent;\n}\n\n@mixin caret-up {\n  border-top: 0;\n  border-right: $caret-width solid transparent;\n  border-bottom: $caret-width solid;\n  border-left: $caret-width solid transparent;\n}\n\n@mixin caret-end {\n  border-top: $caret-width solid transparent;\n  border-right: 0;\n  border-bottom: $caret-width solid transparent;\n  border-left: $caret-width solid;\n}\n\n@mixin caret-start {\n  border-top: $caret-width solid transparent;\n  border-right: $caret-width solid;\n  border-bottom: $caret-width solid transparent;\n}\n\n@mixin caret($direction: down) {\n  @if $enable-caret {\n    &::after {\n      display: inline-block;\n      margin-left: $caret-spacing;\n      vertical-align: $caret-vertical-align;\n      content: "";\n      @if $direction == down {\n        @include caret-down();\n      } @else if $direction == up {\n        @include caret-up();\n      } @else if $direction == end {\n        @include caret-end();\n      }\n    }\n\n    @if $direction == start {\n      &::after {\n        display: none;\n      }\n\n      &::before {\n        display: inline-block;\n        margin-right: $caret-spacing;\n        vertical-align: $caret-vertical-align;\n        content: "";\n        @include caret-start();\n      }\n    }\n\n    &:empty::after {\n      margin-left: 0;\n    }\n  }\n}\n// scss-docs-end caret-mixins\n','// Make the div behave like a button\n.btn-group,\n.btn-group-vertical {\n  position: relative;\n  display: inline-flex;\n  vertical-align: middle; // match .btn alignment given font-size hack above\n\n  > .btn {\n    position: relative;\n    flex: 1 1 auto;\n  }\n\n  // Bring the hover, focused, and "active" buttons to the front to overlay\n  // the borders properly\n  > .btn-check:checked + .btn,\n  > .btn-check:focus + .btn,\n  > .btn:hover,\n  > .btn:focus,\n  > .btn:active,\n  > .btn.active {\n    z-index: 1;\n  }\n}\n\n// Optional: Group multiple button groups together for a toolbar\n.btn-toolbar {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n\n  .input-group {\n    width: auto;\n  }\n}\n\n.btn-group {\n  // Prevent double borders when buttons are next to each other\n  > .btn:not(:first-child),\n  > .btn-group:not(:first-child) {\n    margin-left: -$btn-border-width;\n  }\n\n  // Reset rounded corners\n  > .btn:not(:last-child):not(.dropdown-toggle),\n  > .btn-group:not(:last-child) > .btn {\n    @include border-end-radius(0);\n  }\n\n  // The left radius should be 0 if the button is:\n  // - the "third or more" child\n  // - the second child and the previous element isn\'t `.btn-check` (making it the first child visually)\n  // - part of a btn-group which isn\'t the first child\n  > .btn:nth-child(n + 3),\n  > :not(.btn-check) + .btn,\n  > .btn-group:not(:first-child) > .btn {\n    @include border-start-radius(0);\n  }\n}\n\n// Sizing\n//\n// Remix the default button sizing classes into new ones for easier manipulation.\n\n.btn-group-sm > .btn { @extend .btn-sm; }\n.btn-group-lg > .btn { @extend .btn-lg; }\n\n\n//\n// Split button dropdowns\n//\n\n.dropdown-toggle-split {\n  padding-right: $btn-padding-x * .75;\n  padding-left: $btn-padding-x * .75;\n\n  &::after,\n  .dropup &::after,\n  .dropend &::after {\n    margin-left: 0;\n  }\n\n  .dropstart &::before {\n    margin-right: 0;\n  }\n}\n\n.btn-sm + .dropdown-toggle-split {\n  padding-right: $btn-padding-x-sm * .75;\n  padding-left: $btn-padding-x-sm * .75;\n}\n\n.btn-lg + .dropdown-toggle-split {\n  padding-right: $btn-padding-x-lg * .75;\n  padding-left: $btn-padding-x-lg * .75;\n}\n\n\n// The clickable button for toggling the menu\n// Set the same inset shadow as the :active state\n.btn-group.show .dropdown-toggle {\n  @include box-shadow($btn-active-box-shadow);\n\n  // Show no shadow for `.btn-link` since it has no other button styles.\n  &.btn-link {\n    @include box-shadow(none);\n  }\n}\n\n\n//\n// Vertical button groups\n//\n\n.btn-group-vertical {\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: center;\n\n  > .btn,\n  > .btn-group {\n    width: 100%;\n  }\n\n  > .btn:not(:first-child),\n  > .btn-group:not(:first-child) {\n    margin-top: -$btn-border-width;\n  }\n\n  // Reset rounded corners\n  > .btn:not(:last-child):not(.dropdown-toggle),\n  > .btn-group:not(:last-child) > .btn {\n    @include border-bottom-radius(0);\n  }\n\n  > .btn ~ .btn,\n  > .btn-group:not(:first-child) > .btn {\n    @include border-top-radius(0);\n  }\n}\n',"// Base class\n//\n// Kickstart any navigation component with a set of style resets. Works with\n// `<nav>`s, `<ul>`s or `<ol>`s.\n\n.nav {\n  display: flex;\n  flex-wrap: wrap;\n  padding-left: 0;\n  margin-bottom: 0;\n  list-style: none;\n}\n\n.nav-link {\n  display: block;\n  padding: $nav-link-padding-y $nav-link-padding-x;\n  @include font-size($nav-link-font-size);\n  font-weight: $nav-link-font-weight;\n  color: $nav-link-color;\n  text-decoration: if($link-decoration == none, null, none);\n  @include transition($nav-link-transition);\n\n  &:hover,\n  &:focus {\n    color: $nav-link-hover-color;\n    text-decoration: if($link-hover-decoration == underline, none, null);\n  }\n\n  // Disabled state lightens text\n  &.disabled {\n    color: $nav-link-disabled-color;\n    pointer-events: none;\n    cursor: default;\n  }\n}\n\n//\n// Tabs\n//\n\n.nav-tabs {\n  border-bottom: $nav-tabs-border-width solid $nav-tabs-border-color;\n\n  .nav-link {\n    margin-bottom: -$nav-tabs-border-width;\n    background: none;\n    border: $nav-tabs-border-width solid transparent;\n    @include border-top-radius($nav-tabs-border-radius);\n\n    &:hover,\n    &:focus {\n      border-color: $nav-tabs-link-hover-border-color;\n      // Prevents active .nav-link tab overlapping focus outline of previous/next .nav-link\n      isolation: isolate;\n    }\n\n    &.disabled {\n      color: $nav-link-disabled-color;\n      background-color: transparent;\n      border-color: transparent;\n    }\n  }\n\n  .nav-link.active,\n  .nav-item.show .nav-link {\n    color: $nav-tabs-link-active-color;\n    background-color: $nav-tabs-link-active-bg;\n    border-color: $nav-tabs-link-active-border-color;\n  }\n\n  .dropdown-menu {\n    // Make dropdown border overlap tab border\n    margin-top: -$nav-tabs-border-width;\n    // Remove the top rounded corners here since there is a hard edge above the menu\n    @include border-top-radius(0);\n  }\n}\n\n\n//\n// Pills\n//\n\n.nav-pills {\n  .nav-link {\n    background: none;\n    border: 0;\n    @include border-radius($nav-pills-border-radius);\n  }\n\n  .nav-link.active,\n  .show > .nav-link {\n    color: $nav-pills-link-active-color;\n    @include gradient-bg($nav-pills-link-active-bg);\n  }\n}\n\n\n//\n// Justified variants\n//\n\n.nav-fill {\n  > .nav-link,\n  .nav-item {\n    flex: 1 1 auto;\n    text-align: center;\n  }\n}\n\n.nav-justified {\n  > .nav-link,\n  .nav-item {\n    flex-basis: 0;\n    flex-grow: 1;\n    text-align: center;\n  }\n}\n\n.nav-fill,\n.nav-justified {\n  .nav-item .nav-link {\n    width: 100%; // Make sure button will grow\n  }\n}\n\n\n// Tabbable tabs\n//\n// Hide tabbable panes to start, show them when `.active`\n\n.tab-content {\n  > .tab-pane {\n    display: none;\n  }\n  > .active {\n    display: block;\n  }\n}\n","// Contents\n//\n// Navbar\n// Navbar brand\n// Navbar nav\n// Navbar text\n// Responsive navbar\n// Navbar position\n// Navbar themes\n\n\n// Navbar\n//\n// Provide a static navbar from which we expand to create full-width, fixed, and\n// other navbar variations.\n\n.navbar {\n  position: relative;\n  display: flex;\n  flex-wrap: wrap; // allow us to do the line break for collapsing content\n  align-items: center;\n  justify-content: space-between; // space out brand from logo\n  padding-top: $navbar-padding-y;\n  padding-right: $navbar-padding-x; // default: null\n  padding-bottom: $navbar-padding-y;\n  padding-left: $navbar-padding-x; // default: null\n  @include gradient-bg();\n\n  // Because flex properties aren't inherited, we need to redeclare these first\n  // few properties so that content nested within behave properly.\n  // The `flex-wrap` property is inherited to simplify the expanded navbars\n  %container-flex-properties {\n    display: flex;\n    flex-wrap: inherit;\n    align-items: center;\n    justify-content: space-between;\n  }\n\n  > .container,\n  > .container-fluid {\n    @extend %container-flex-properties;\n  }\n\n  @each $breakpoint, $container-max-width in $container-max-widths {\n    > .container#{breakpoint-infix($breakpoint, $container-max-widths)} {\n      @extend %container-flex-properties;\n    }\n  }\n}\n\n\n// Navbar brand\n//\n// Used for brand, project, or site names.\n\n.navbar-brand {\n  padding-top: $navbar-brand-padding-y;\n  padding-bottom: $navbar-brand-padding-y;\n  margin-right: $navbar-brand-margin-end;\n  @include font-size($navbar-brand-font-size);\n  text-decoration: if($link-decoration == none, null, none);\n  white-space: nowrap;\n\n  &:hover,\n  &:focus {\n    text-decoration: if($link-hover-decoration == underline, none, null);\n  }\n}\n\n\n// Navbar nav\n//\n// Custom navbar navigation (doesn't require `.nav`, but does make use of `.nav-link`).\n\n.navbar-nav {\n  display: flex;\n  flex-direction: column; // cannot use `inherit` to get the `.navbar`s value\n  padding-left: 0;\n  margin-bottom: 0;\n  list-style: none;\n\n  .nav-link {\n    padding-right: 0;\n    padding-left: 0;\n  }\n\n  .dropdown-menu {\n    position: static;\n  }\n}\n\n\n// Navbar text\n//\n//\n\n.navbar-text {\n  padding-top: $nav-link-padding-y;\n  padding-bottom: $nav-link-padding-y;\n}\n\n\n// Responsive navbar\n//\n// Custom styles for responsive collapsing and toggling of navbar contents.\n// Powered by the collapse Bootstrap JavaScript plugin.\n\n// When collapsed, prevent the toggleable navbar contents from appearing in\n// the default flexbox row orientation. Requires the use of `flex-wrap: wrap`\n// on the `.navbar` parent.\n.navbar-collapse {\n  flex-basis: 100%;\n  flex-grow: 1;\n  // For always expanded or extra full navbars, ensure content aligns itself\n  // properly vertically. Can be easily overridden with flex utilities.\n  align-items: center;\n}\n\n// Button for toggling the navbar when in its collapsed state\n.navbar-toggler {\n  padding: $navbar-toggler-padding-y $navbar-toggler-padding-x;\n  @include font-size($navbar-toggler-font-size);\n  line-height: 1;\n  background-color: transparent; // remove default button style\n  border: $border-width solid transparent; // remove default button style\n  @include border-radius($navbar-toggler-border-radius);\n  @include transition($navbar-toggler-transition);\n\n  &:hover {\n    text-decoration: none;\n  }\n\n  &:focus {\n    text-decoration: none;\n    outline: 0;\n    box-shadow: 0 0 0 $navbar-toggler-focus-width;\n  }\n}\n\n// Keep as a separate element so folks can easily override it with another icon\n// or image file as needed.\n.navbar-toggler-icon {\n  display: inline-block;\n  width: 1.5em;\n  height: 1.5em;\n  vertical-align: middle;\n  background-repeat: no-repeat;\n  background-position: center;\n  background-size: 100%;\n}\n\n.navbar-nav-scroll {\n  max-height: var(--#{$variable-prefix}scroll-height, 75vh);\n  overflow-y: auto;\n}\n\n// scss-docs-start navbar-expand-loop\n// Generate series of `.navbar-expand-*` responsive classes for configuring\n// where your navbar collapses.\n.navbar-expand {\n  @each $breakpoint in map-keys($grid-breakpoints) {\n    $next: breakpoint-next($breakpoint, $grid-breakpoints);\n    $infix: breakpoint-infix($next, $grid-breakpoints);\n\n    // stylelint-disable-next-line scss/selector-no-union-class-name\n    &#{$infix} {\n      @include media-breakpoint-up($next) {\n        flex-wrap: nowrap;\n        justify-content: flex-start;\n\n        .navbar-nav {\n          flex-direction: row;\n\n          .dropdown-menu {\n            position: absolute;\n          }\n\n          .nav-link {\n            padding-right: $navbar-nav-link-padding-x;\n            padding-left: $navbar-nav-link-padding-x;\n          }\n        }\n\n        .navbar-nav-scroll {\n          overflow: visible;\n        }\n\n        .navbar-collapse {\n          display: flex !important; // stylelint-disable-line declaration-no-important\n          flex-basis: auto;\n        }\n\n        .navbar-toggler {\n          display: none;\n        }\n\n        .offcanvas-header {\n          display: none;\n        }\n\n        .offcanvas {\n          position: inherit;\n          bottom: 0;\n          z-index: 1000;\n          flex-grow: 1;\n          visibility: visible !important; // stylelint-disable-line declaration-no-important\n          background-color: transparent;\n          border-right: 0;\n          border-left: 0;\n          @include transition(none);\n          transform: none;\n        }\n        .offcanvas-top,\n        .offcanvas-bottom {\n          height: auto;\n          border-top: 0;\n          border-bottom: 0;\n        }\n\n        .offcanvas-body {\n          display: flex;\n          flex-grow: 0;\n          padding: 0;\n          overflow-y: visible;\n        }\n      }\n    }\n  }\n}\n// scss-docs-end navbar-expand-loop\n\n// Navbar themes\n//\n// Styles for switching between navbars with light or dark background.\n\n// Dark links against a light background\n.navbar-light {\n  .navbar-brand {\n    color: $navbar-light-brand-color;\n\n    &:hover,\n    &:focus {\n      color: $navbar-light-brand-hover-color;\n    }\n  }\n\n  .navbar-nav {\n    .nav-link {\n      color: $navbar-light-color;\n\n      &:hover,\n      &:focus {\n        color: $navbar-light-hover-color;\n      }\n\n      &.disabled {\n        color: $navbar-light-disabled-color;\n      }\n    }\n\n    .show > .nav-link,\n    .nav-link.active {\n      color: $navbar-light-active-color;\n    }\n  }\n\n  .navbar-toggler {\n    color: $navbar-light-color;\n    border-color: $navbar-light-toggler-border-color;\n  }\n\n  .navbar-toggler-icon {\n    background-image: escape-svg($navbar-light-toggler-icon-bg);\n  }\n\n  .navbar-text {\n    color: $navbar-light-color;\n\n    a,\n    a:hover,\n    a:focus  {\n      color: $navbar-light-active-color;\n    }\n  }\n}\n\n// White links against a dark background\n.navbar-dark {\n  .navbar-brand {\n    color: $navbar-dark-brand-color;\n\n    &:hover,\n    &:focus {\n      color: $navbar-dark-brand-hover-color;\n    }\n  }\n\n  .navbar-nav {\n    .nav-link {\n      color: $navbar-dark-color;\n\n      &:hover,\n      &:focus {\n        color: $navbar-dark-hover-color;\n      }\n\n      &.disabled {\n        color: $navbar-dark-disabled-color;\n      }\n    }\n\n    .show > .nav-link,\n    .nav-link.active {\n      color: $navbar-dark-active-color;\n    }\n  }\n\n  .navbar-toggler {\n    color: $navbar-dark-color;\n    border-color: $navbar-dark-toggler-border-color;\n  }\n\n  .navbar-toggler-icon {\n    background-image: escape-svg($navbar-dark-toggler-icon-bg);\n  }\n\n  .navbar-text {\n    color: $navbar-dark-color;\n    a,\n    a:hover,\n    a:focus {\n      color: $navbar-dark-active-color;\n    }\n  }\n}\n","//\n// Base styles\n//\n\n.card {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  min-width: 0; // See https://github.com/twbs/bootstrap/pull/22740#issuecomment-305868106\n  height: $card-height;\n  word-wrap: break-word;\n  background-color: $card-bg;\n  background-clip: border-box;\n  border: $card-border-width solid $card-border-color;\n  @include border-radius($card-border-radius);\n  @include box-shadow($card-box-shadow);\n\n  > hr {\n    margin-right: 0;\n    margin-left: 0;\n  }\n\n  > .list-group {\n    border-top: inherit;\n    border-bottom: inherit;\n\n    &:first-child {\n      border-top-width: 0;\n      @include border-top-radius($card-inner-border-radius);\n    }\n\n    &:last-child  {\n      border-bottom-width: 0;\n      @include border-bottom-radius($card-inner-border-radius);\n    }\n  }\n\n  // Due to specificity of the above selector (`.card > .list-group`), we must\n  // use a child selector here to prevent double borders.\n  > .card-header + .list-group,\n  > .list-group + .card-footer {\n    border-top: 0;\n  }\n}\n\n.card-body {\n  // Enable `flex-grow: 1` for decks and groups so that card blocks take up\n  // as much space as possible, ensuring footers are aligned to the bottom.\n  flex: 1 1 auto;\n  padding: $card-spacer-y $card-spacer-x;\n  color: $card-color;\n}\n\n.card-title {\n  margin-bottom: $card-title-spacer-y;\n}\n\n.card-subtitle {\n  margin-top: -$card-title-spacer-y * .5;\n  margin-bottom: 0;\n}\n\n.card-text:last-child {\n  margin-bottom: 0;\n}\n\n.card-link {\n  &:hover {\n    text-decoration: if($link-hover-decoration == underline, none, null);\n  }\n\n  + .card-link {\n    margin-left: $card-spacer-x;\n  }\n}\n\n//\n// Optional textual caps\n//\n\n.card-header {\n  padding: $card-cap-padding-y $card-cap-padding-x;\n  margin-bottom: 0; // Removes the default margin-bottom of <hN>\n  color: $card-cap-color;\n  background-color: $card-cap-bg;\n  border-bottom: $card-border-width solid $card-border-color;\n\n  &:first-child {\n    @include border-radius($card-inner-border-radius $card-inner-border-radius 0 0);\n  }\n}\n\n.card-footer {\n  padding: $card-cap-padding-y $card-cap-padding-x;\n  color: $card-cap-color;\n  background-color: $card-cap-bg;\n  border-top: $card-border-width solid $card-border-color;\n\n  &:last-child {\n    @include border-radius(0 0 $card-inner-border-radius $card-inner-border-radius);\n  }\n}\n\n\n//\n// Header navs\n//\n\n.card-header-tabs {\n  margin-right: -$card-cap-padding-x * .5;\n  margin-bottom: -$card-cap-padding-y;\n  margin-left: -$card-cap-padding-x * .5;\n  border-bottom: 0;\n\n  @if $nav-tabs-link-active-bg != $card-bg {\n    .nav-link.active {\n      background-color: $card-bg;\n      border-bottom-color: $card-bg;\n    }\n  }\n}\n\n.card-header-pills {\n  margin-right: -$card-cap-padding-x * .5;\n  margin-left: -$card-cap-padding-x * .5;\n}\n\n// Card image\n.card-img-overlay {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  padding: $card-img-overlay-padding;\n  @include border-radius($card-inner-border-radius);\n}\n\n.card-img,\n.card-img-top,\n.card-img-bottom {\n  width: 100%; // Required because we use flexbox and this inherently applies align-self: stretch\n}\n\n.card-img,\n.card-img-top {\n  @include border-top-radius($card-inner-border-radius);\n}\n\n.card-img,\n.card-img-bottom {\n  @include border-bottom-radius($card-inner-border-radius);\n}\n\n\n//\n// Card groups\n//\n\n.card-group {\n  // The child selector allows nested `.card` within `.card-group`\n  // to display properly.\n  > .card {\n    margin-bottom: $card-group-margin;\n  }\n\n  @include media-breakpoint-up(sm) {\n    display: flex;\n    flex-flow: row wrap;\n    // The child selector allows nested `.card` within `.card-group`\n    // to display properly.\n    > .card {\n      // Flexbugs #4: https://github.com/philipwalton/flexbugs#flexbug-4\n      flex: 1 0 0%;\n      margin-bottom: 0;\n\n      + .card {\n        margin-left: 0;\n        border-left: 0;\n      }\n\n      // Handle rounded corners\n      @if $enable-rounded {\n        &:not(:last-child) {\n          @include border-end-radius(0);\n\n          .card-img-top,\n          .card-header {\n            // stylelint-disable-next-line property-disallowed-list\n            border-top-right-radius: 0;\n          }\n          .card-img-bottom,\n          .card-footer {\n            // stylelint-disable-next-line property-disallowed-list\n            border-bottom-right-radius: 0;\n          }\n        }\n\n        &:not(:first-child) {\n          @include border-start-radius(0);\n\n          .card-img-top,\n          .card-header {\n            // stylelint-disable-next-line property-disallowed-list\n            border-top-left-radius: 0;\n          }\n          .card-img-bottom,\n          .card-footer {\n            // stylelint-disable-next-line property-disallowed-list\n            border-bottom-left-radius: 0;\n          }\n        }\n      }\n    }\n  }\n}\n",'//\n// Base styles\n//\n\n.accordion-button {\n  position: relative;\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: $accordion-button-padding-y $accordion-button-padding-x;\n  @include font-size($font-size-base);\n  color: $accordion-button-color;\n  text-align: left; // Reset button style\n  background-color: $accordion-button-bg;\n  border: 0;\n  @include border-radius(0);\n  overflow-anchor: none;\n  @include transition($accordion-transition);\n\n  &:not(.collapsed) {\n    color: $accordion-button-active-color;\n    background-color: $accordion-button-active-bg;\n    box-shadow: inset 0 ($accordion-border-width * -1) 0 $accordion-border-color;\n\n    &::after {\n      background-image: escape-svg($accordion-button-active-icon);\n      transform: $accordion-icon-transform;\n    }\n  }\n\n  // Accordion icon\n  &::after {\n    flex-shrink: 0;\n    width: $accordion-icon-width;\n    height: $accordion-icon-width;\n    margin-left: auto;\n    content: "";\n    background-image: escape-svg($accordion-button-icon);\n    background-repeat: no-repeat;\n    background-size: $accordion-icon-width;\n    @include transition($accordion-icon-transition);\n  }\n\n  &:hover {\n    z-index: 2;\n  }\n\n  &:focus {\n    z-index: 3;\n    border-color: $accordion-button-focus-border-color;\n    outline: 0;\n    box-shadow: $accordion-button-focus-box-shadow;\n  }\n}\n\n.accordion-header {\n  margin-bottom: 0;\n}\n\n.accordion-item {\n  background-color: $accordion-bg;\n  border: $accordion-border-width solid $accordion-border-color;\n\n  &:first-of-type {\n    @include border-top-radius($accordion-border-radius);\n\n    .accordion-button {\n      @include border-top-radius($accordion-inner-border-radius);\n    }\n  }\n\n  &:not(:first-of-type) {\n    border-top: 0;\n  }\n\n  // Only set a border-radius on the last item if the accordion is collapsed\n  &:last-of-type {\n    @include border-bottom-radius($accordion-border-radius);\n\n    .accordion-button {\n      &.collapsed {\n        @include border-bottom-radius($accordion-inner-border-radius);\n      }\n    }\n\n    .accordion-collapse {\n      @include border-bottom-radius($accordion-border-radius);\n    }\n  }\n}\n\n.accordion-body {\n  padding: $accordion-body-padding-y $accordion-body-padding-x;\n}\n\n\n// Flush accordion items\n//\n// Remove borders and border-radius to keep accordion items edge-to-edge.\n\n.accordion-flush {\n  .accordion-collapse {\n    border-width: 0;\n  }\n\n  .accordion-item {\n    border-right: 0;\n    border-left: 0;\n    @include border-radius(0);\n\n    &:first-child { border-top: 0; }\n    &:last-child { border-bottom: 0; }\n\n    .accordion-button {\n      @include border-radius(0);\n    }\n  }\n}\n','.breadcrumb {\n  display: flex;\n  flex-wrap: wrap;\n  padding: $breadcrumb-padding-y $breadcrumb-padding-x;\n  margin-bottom: $breadcrumb-margin-bottom;\n  @include font-size($breadcrumb-font-size);\n  list-style: none;\n  background-color: $breadcrumb-bg;\n  @include border-radius($breadcrumb-border-radius);\n}\n\n.breadcrumb-item {\n  // The separator between breadcrumbs (by default, a forward-slash: "/")\n  + .breadcrumb-item {\n    padding-left: $breadcrumb-item-padding-x;\n\n    &::before {\n      float: left; // Suppress inline spacings and underlining of the separator\n      padding-right: $breadcrumb-item-padding-x;\n      color: $breadcrumb-divider-color;\n      content: var(--#{$variable-prefix}breadcrumb-divider, escape-svg($breadcrumb-divider)) #{"/* rtl:"} var(--#{$variable-prefix}breadcrumb-divider, escape-svg($breadcrumb-divider-flipped)) #{"*/"};\n    }\n  }\n\n  &.active {\n    color: $breadcrumb-active-color;\n  }\n}\n',".pagination {\n  display: flex;\n  @include list-unstyled();\n}\n\n.page-link {\n  position: relative;\n  display: block;\n  color: $pagination-color;\n  text-decoration: if($link-decoration == none, null, none);\n  background-color: $pagination-bg;\n  border: $pagination-border-width solid $pagination-border-color;\n  @include transition($pagination-transition);\n\n  &:hover {\n    z-index: 2;\n    color: $pagination-hover-color;\n    text-decoration: if($link-hover-decoration == underline, none, null);\n    background-color: $pagination-hover-bg;\n    border-color: $pagination-hover-border-color;\n  }\n\n  &:focus {\n    z-index: 3;\n    color: $pagination-focus-color;\n    background-color: $pagination-focus-bg;\n    outline: $pagination-focus-outline;\n    box-shadow: $pagination-focus-box-shadow;\n  }\n}\n\n.page-item {\n  &:not(:first-child) .page-link {\n    margin-left: $pagination-margin-start;\n  }\n\n  &.active .page-link {\n    z-index: 3;\n    color: $pagination-active-color;\n    @include gradient-bg($pagination-active-bg);\n    border-color: $pagination-active-border-color;\n  }\n\n  &.disabled .page-link {\n    color: $pagination-disabled-color;\n    pointer-events: none;\n    background-color: $pagination-disabled-bg;\n    border-color: $pagination-disabled-border-color;\n  }\n}\n\n\n//\n// Sizing\n//\n@include pagination-size($pagination-padding-y, $pagination-padding-x, null, $pagination-border-radius);\n\n.pagination-lg {\n  @include pagination-size($pagination-padding-y-lg, $pagination-padding-x-lg, $font-size-lg, $pagination-border-radius-lg);\n}\n\n.pagination-sm {\n  @include pagination-size($pagination-padding-y-sm, $pagination-padding-x-sm, $font-size-sm, $pagination-border-radius-sm);\n}\n","// Pagination\n\n// scss-docs-start pagination-mixin\n@mixin pagination-size($padding-y, $padding-x, $font-size, $border-radius) {\n  .page-link {\n    padding: $padding-y $padding-x;\n    @include font-size($font-size);\n  }\n\n  .page-item {\n    @if $pagination-margin-start == (-$pagination-border-width) {\n      &:first-child {\n        .page-link {\n          @include border-start-radius($border-radius);\n        }\n      }\n\n      &:last-child {\n        .page-link {\n          @include border-end-radius($border-radius);\n        }\n      }\n    } @else {\n      //Add border-radius to all pageLinks in case they have left margin\n      .page-link {\n        @include border-radius($border-radius);\n      }\n    }\n  }\n}\n// scss-docs-end pagination-mixin\n","// Base class\n//\n// Requires one of the contextual, color modifier classes for `color` and\n// `background-color`.\n\n.badge {\n  display: inline-block;\n  padding: $badge-padding-y $badge-padding-x;\n  @include font-size($badge-font-size);\n  font-weight: $badge-font-weight;\n  line-height: 1;\n  color: $badge-color;\n  text-align: center;\n  white-space: nowrap;\n  vertical-align: baseline;\n  @include border-radius($badge-border-radius);\n  @include gradient-bg();\n\n  // Empty badges collapse automatically\n  &:empty {\n    display: none;\n  }\n}\n\n// Quick fix for badges in buttons\n.btn .badge {\n  position: relative;\n  top: -1px;\n}\n","//\n// Base styles\n//\n\n.alert {\n  position: relative;\n  padding: $alert-padding-y $alert-padding-x;\n  margin-bottom: $alert-margin-bottom;\n  border: $alert-border-width solid transparent;\n  @include border-radius($alert-border-radius);\n}\n\n// Headings for larger alerts\n.alert-heading {\n  // Specified to prevent conflicts of changing $headings-color\n  color: inherit;\n}\n\n// Provide class for links that match alerts\n.alert-link {\n  font-weight: $alert-link-font-weight;\n}\n\n\n// Dismissible alerts\n//\n// Expand the right padding and account for the close button's positioning.\n\n.alert-dismissible {\n  padding-right: $alert-dismissible-padding-r;\n\n  // Adjust close link position\n  .btn-close {\n    position: absolute;\n    top: 0;\n    right: 0;\n    z-index: $stretched-link-z-index + 1;\n    padding: $alert-padding-y * 1.25 $alert-padding-x;\n  }\n}\n\n\n// scss-docs-start alert-modifiers\n// Generate contextual modifier classes for colorizing the alert.\n\n@each $state, $value in $theme-colors {\n  $alert-background: shift-color($value, $alert-bg-scale);\n  $alert-border: shift-color($value, $alert-border-scale);\n  $alert-color: shift-color($value, $alert-color-scale);\n  @if (contrast-ratio($alert-background, $alert-color) < $min-contrast-ratio) {\n    $alert-color: mix($value, color-contrast($alert-background), abs($alert-color-scale));\n  }\n  .alert-#{$state} {\n    @include alert-variant($alert-background, $alert-border, $alert-color);\n  }\n}\n// scss-docs-end alert-modifiers\n","// scss-docs-start alert-variant-mixin\n@mixin alert-variant($background, $border, $color) {\n  color: $color;\n  @include gradient-bg($background);\n  border-color: $border;\n\n  .alert-link {\n    color: shade-color($color, 20%);\n  }\n}\n// scss-docs-end alert-variant-mixin\n","// Disable animation if transitions are disabled\n\n// scss-docs-start progress-keyframes\n@if $enable-transitions {\n  @keyframes progress-bar-stripes {\n    0% { background-position-x: $progress-height; }\n  }\n}\n// scss-docs-end progress-keyframes\n\n.progress {\n  display: flex;\n  height: $progress-height;\n  overflow: hidden; // force rounded corners by cropping it\n  @include font-size($progress-font-size);\n  background-color: $progress-bg;\n  @include border-radius($progress-border-radius);\n  @include box-shadow($progress-box-shadow);\n}\n\n.progress-bar {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  overflow: hidden;\n  color: $progress-bar-color;\n  text-align: center;\n  white-space: nowrap;\n  background-color: $progress-bar-bg;\n  @include transition($progress-bar-transition);\n}\n\n.progress-bar-striped {\n  @include gradient-striped();\n  background-size: $progress-height $progress-height;\n}\n\n@if $enable-transitions {\n  .progress-bar-animated {\n    animation: $progress-bar-animation-timing progress-bar-stripes;\n\n    @if $enable-reduced-motion {\n      @media (prefers-reduced-motion: reduce) {\n        animation: none;\n      }\n    }\n  }\n}\n",'// Base class\n//\n// Easily usable on <ul>, <ol>, or <div>.\n\n.list-group {\n  display: flex;\n  flex-direction: column;\n\n  // No need to set list-style: none; since .list-group-item is block level\n  padding-left: 0; // reset padding because ul and ol\n  margin-bottom: 0;\n  @include border-radius($list-group-border-radius);\n}\n\n.list-group-numbered {\n  list-style-type: none;\n  counter-reset: section;\n\n  > li::before {\n    // Increments only this instance of the section counter\n    content: counters(section, ".") ". ";\n    counter-increment: section;\n  }\n}\n\n\n// Interactive list items\n//\n// Use anchor or button elements instead of `li`s or `div`s to create interactive\n// list items. Includes an extra `.active` modifier class for selected items.\n\n.list-group-item-action {\n  width: 100%; // For `<button>`s (anchors become 100% by default though)\n  color: $list-group-action-color;\n  text-align: inherit; // For `<button>`s (anchors inherit)\n\n  // Hover state\n  &:hover,\n  &:focus {\n    z-index: 1; // Place hover/focus items above their siblings for proper border styling\n    color: $list-group-action-hover-color;\n    text-decoration: none;\n    background-color: $list-group-hover-bg;\n  }\n\n  &:active {\n    color: $list-group-action-active-color;\n    background-color: $list-group-action-active-bg;\n  }\n}\n\n\n// Individual list items\n//\n// Use on `li`s or `div`s within the `.list-group` parent.\n\n.list-group-item {\n  position: relative;\n  display: block;\n  padding: $list-group-item-padding-y $list-group-item-padding-x;\n  color: $list-group-color;\n  text-decoration: if($link-decoration == none, null, none);\n  background-color: $list-group-bg;\n  border: $list-group-border-width solid $list-group-border-color;\n\n  &:first-child {\n    @include border-top-radius(inherit);\n  }\n\n  &:last-child {\n    @include border-bottom-radius(inherit);\n  }\n\n  &.disabled,\n  &:disabled {\n    color: $list-group-disabled-color;\n    pointer-events: none;\n    background-color: $list-group-disabled-bg;\n  }\n\n  // Include both here for `<a>`s and `<button>`s\n  &.active {\n    z-index: 2; // Place active items above their siblings for proper border styling\n    color: $list-group-active-color;\n    background-color: $list-group-active-bg;\n    border-color: $list-group-active-border-color;\n  }\n\n  & + & {\n    border-top-width: 0;\n\n    &.active {\n      margin-top: -$list-group-border-width;\n      border-top-width: $list-group-border-width;\n    }\n  }\n}\n\n\n// Horizontal\n//\n// Change the layout of list group items from vertical (default) to horizontal.\n\n@each $breakpoint in map-keys($grid-breakpoints) {\n  @include media-breakpoint-up($breakpoint) {\n    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);\n\n    .list-group-horizontal#{$infix} {\n      flex-direction: row;\n\n      > .list-group-item {\n        &:first-child {\n          @include border-bottom-start-radius($list-group-border-radius);\n          @include border-top-end-radius(0);\n        }\n\n        &:last-child {\n          @include border-top-end-radius($list-group-border-radius);\n          @include border-bottom-start-radius(0);\n        }\n\n        &.active {\n          margin-top: 0;\n        }\n\n        + .list-group-item {\n          border-top-width: $list-group-border-width;\n          border-left-width: 0;\n\n          &.active {\n            margin-left: -$list-group-border-width;\n            border-left-width: $list-group-border-width;\n          }\n        }\n      }\n    }\n  }\n}\n\n\n// Flush list items\n//\n// Remove borders and border-radius to keep list group items edge-to-edge. Most\n// useful within other components (e.g., cards).\n\n.list-group-flush {\n  @include border-radius(0);\n\n  > .list-group-item {\n    border-width: 0 0 $list-group-border-width;\n\n    &:last-child {\n      border-bottom-width: 0;\n    }\n  }\n}\n\n\n// scss-docs-start list-group-modifiers\n// List group contextual variants\n//\n// Add modifier classes to change text and background color on individual items.\n// Organizationally, this must come after the `:hover` states.\n\n@each $state, $value in $theme-colors {\n  $list-group-variant-bg: shift-color($value, $list-group-item-bg-scale);\n  $list-group-variant-color: shift-color($value, $list-group-item-color-scale);\n  @if (contrast-ratio($list-group-variant-bg, $list-group-variant-color) < $min-contrast-ratio) {\n    $list-group-variant-color: mix($value, color-contrast($list-group-variant-bg), abs($list-group-item-color-scale));\n  }\n\n  @include list-group-item-variant($state, $list-group-variant-bg, $list-group-variant-color);\n}\n// scss-docs-end list-group-modifiers\n',"// List Groups\n\n// scss-docs-start list-group-mixin\n@mixin list-group-item-variant($state, $background, $color) {\n  .list-group-item-#{$state} {\n    color: $color;\n    background-color: $background;\n\n    &.list-group-item-action {\n      &:hover,\n      &:focus {\n        color: $color;\n        background-color: shade-color($background, 10%);\n      }\n\n      &.active {\n        color: $white;\n        background-color: $color;\n        border-color: $color;\n      }\n    }\n  }\n}\n// scss-docs-end list-group-mixin\n",'// transparent background and border properties included for button version.\n// iOS requires the button element instead of an anchor tag.\n// If you want the anchor version, it requires `href="#"`.\n// See https://developer.mozilla.org/en-US/docs/Web/Events/click#Safari_Mobile\n\n.btn-close {\n  box-sizing: content-box;\n  width: $btn-close-width;\n  height: $btn-close-height;\n  padding: $btn-close-padding-y $btn-close-padding-x;\n  color: $btn-close-color;\n  background: transparent escape-svg($btn-close-bg) center / $btn-close-width auto no-repeat; // include transparent for button elements\n  border: 0; // for button elements\n  @include border-radius();\n  opacity: $btn-close-opacity;\n\n  // Override <a>\'s hover style\n  &:hover {\n    color: $btn-close-color;\n    text-decoration: none;\n    opacity: $btn-close-hover-opacity;\n  }\n\n  &:focus {\n    outline: 0;\n    box-shadow: $btn-close-focus-shadow;\n    opacity: $btn-close-focus-opacity;\n  }\n\n  &:disabled,\n  &.disabled {\n    pointer-events: none;\n    user-select: none;\n    opacity: $btn-close-disabled-opacity;\n  }\n}\n\n.btn-close-white {\n  filter: $btn-close-white-filter;\n}\n',".toast {\n  width: $toast-max-width;\n  max-width: 100%;\n  @include font-size($toast-font-size);\n  color: $toast-color;\n  pointer-events: auto;\n  background-color: $toast-background-color;\n  background-clip: padding-box;\n  border: $toast-border-width solid $toast-border-color;\n  box-shadow: $toast-box-shadow;\n  @include border-radius($toast-border-radius);\n\n  &.showing {\n    opacity: 0;\n  }\n\n  &:not(.show) {\n    display: none;\n  }\n}\n\n.toast-container {\n  width: max-content;\n  max-width: 100%;\n  pointer-events: none;\n\n  > :not(:last-child) {\n    margin-bottom: $toast-spacing;\n  }\n}\n\n.toast-header {\n  display: flex;\n  align-items: center;\n  padding: $toast-padding-y $toast-padding-x;\n  color: $toast-header-color;\n  background-color: $toast-header-background-color;\n  background-clip: padding-box;\n  border-bottom: $toast-border-width solid $toast-header-border-color;\n  @include border-top-radius(subtract($toast-border-radius, $toast-border-width));\n\n  .btn-close {\n    margin-right: $toast-padding-x * -.5;\n    margin-left: $toast-padding-x;\n  }\n}\n\n.toast-body {\n  padding: $toast-padding-x; // apply to both vertical and horizontal\n  word-wrap: break-word;\n}\n",'// .modal-open      - body class for killing the scroll\n// .modal           - container to scroll within\n// .modal-dialog    - positioning shell for the actual modal\n// .modal-content   - actual modal w/ bg and corners and stuff\n\n\n// Container that the modal scrolls within\n.modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: $zindex-modal;\n  display: none;\n  width: 100%;\n  height: 100%;\n  overflow-x: hidden;\n  overflow-y: auto;\n  // Prevent Chrome on Windows from adding a focus outline. For details, see\n  // https://github.com/twbs/bootstrap/pull/10951.\n  outline: 0;\n  // We deliberately don\'t use `-webkit-overflow-scrolling: touch;` due to a\n  // gnarly iOS Safari bug: https://bugs.webkit.org/show_bug.cgi?id=158342\n  // See also https://github.com/twbs/bootstrap/issues/17695\n}\n\n// Shell div to position the modal with bottom padding\n.modal-dialog {\n  position: relative;\n  width: auto;\n  margin: $modal-dialog-margin;\n  // allow clicks to pass through for custom click handling to close modal\n  pointer-events: none;\n\n  // When fading in the modal, animate it to slide down\n  .modal.fade & {\n    @include transition($modal-transition);\n    transform: $modal-fade-transform;\n  }\n  .modal.show & {\n    transform: $modal-show-transform;\n  }\n\n  // When trying to close, animate focus to scale\n  .modal.modal-static & {\n    transform: $modal-scale-transform;\n  }\n}\n\n.modal-dialog-scrollable {\n  height: subtract(100%, $modal-dialog-margin * 2);\n\n  .modal-content {\n    max-height: 100%;\n    overflow: hidden;\n  }\n\n  .modal-body {\n    overflow-y: auto;\n  }\n}\n\n.modal-dialog-centered {\n  display: flex;\n  align-items: center;\n  min-height: subtract(100%, $modal-dialog-margin * 2);\n}\n\n// Actual modal\n.modal-content {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  width: 100%; // Ensure `.modal-content` extends the full width of the parent `.modal-dialog`\n  // counteract the pointer-events: none; in the .modal-dialog\n  color: $modal-content-color;\n  pointer-events: auto;\n  background-color: $modal-content-bg;\n  background-clip: padding-box;\n  border: $modal-content-border-width solid $modal-content-border-color;\n  @include border-radius($modal-content-border-radius);\n  @include box-shadow($modal-content-box-shadow-xs);\n  // Remove focus outline from opened modal\n  outline: 0;\n}\n\n// Modal background\n.modal-backdrop {\n  @include overlay-backdrop($zindex-modal-backdrop, $modal-backdrop-bg, $modal-backdrop-opacity);\n}\n\n// Modal header\n// Top section of the modal w/ title and dismiss\n.modal-header {\n  display: flex;\n  flex-shrink: 0;\n  align-items: center;\n  justify-content: space-between; // Put modal header elements (title and dismiss) on opposite ends\n  padding: $modal-header-padding;\n  border-bottom: $modal-header-border-width solid $modal-header-border-color;\n  @include border-top-radius($modal-content-inner-border-radius);\n\n  .btn-close {\n    padding: ($modal-header-padding-y * .5) ($modal-header-padding-x * .5);\n    margin: ($modal-header-padding-y * -.5) ($modal-header-padding-x * -.5) ($modal-header-padding-y * -.5) auto;\n  }\n}\n\n// Title text within header\n.modal-title {\n  margin-bottom: 0;\n  line-height: $modal-title-line-height;\n}\n\n// Modal body\n// Where all modal content resides (sibling of .modal-header and .modal-footer)\n.modal-body {\n  position: relative;\n  // Enable `flex-grow: 1` so that the body take up as much space as possible\n  // when there should be a fixed height on `.modal-dialog`.\n  flex: 1 1 auto;\n  padding: $modal-inner-padding;\n}\n\n// Footer (for actions)\n.modal-footer {\n  display: flex;\n  flex-wrap: wrap;\n  flex-shrink: 0;\n  align-items: center; // vertically center\n  justify-content: flex-end; // Right align buttons with flex property because text-align doesn\'t work on flex items\n  padding: $modal-inner-padding - $modal-footer-margin-between * .5;\n  border-top: $modal-footer-border-width solid $modal-footer-border-color;\n  @include border-bottom-radius($modal-content-inner-border-radius);\n\n  // Place margin between footer elements\n  // This solution is far from ideal because of the universal selector usage,\n  // but is needed to fix https://github.com/twbs/bootstrap/issues/24800\n  > * {\n    margin: $modal-footer-margin-between * .5;\n  }\n}\n\n// Scale up the modal\n@include media-breakpoint-up(sm) {\n  // Automatically set modal\'s width for larger viewports\n  .modal-dialog {\n    max-width: $modal-md;\n    margin: $modal-dialog-margin-y-sm-up auto;\n  }\n\n  .modal-dialog-scrollable {\n    height: subtract(100%, $modal-dialog-margin-y-sm-up * 2);\n  }\n\n  .modal-dialog-centered {\n    min-height: subtract(100%, $modal-dialog-margin-y-sm-up * 2);\n  }\n\n  .modal-content {\n    @include box-shadow($modal-content-box-shadow-sm-up);\n  }\n\n  .modal-sm { max-width: $modal-sm; }\n}\n\n@include media-breakpoint-up(lg) {\n  .modal-lg,\n  .modal-xl {\n    max-width: $modal-lg;\n  }\n}\n\n@include media-breakpoint-up(xl) {\n  .modal-xl { max-width: $modal-xl; }\n}\n\n// scss-docs-start modal-fullscreen-loop\n@each $breakpoint in map-keys($grid-breakpoints) {\n  $infix: breakpoint-infix($breakpoint, $grid-breakpoints);\n  $postfix: if($infix != "", $infix + "-down", "");\n\n  @include media-breakpoint-down($breakpoint) {\n    .modal-fullscreen#{$postfix} {\n      width: 100vw;\n      max-width: none;\n      height: 100%;\n      margin: 0;\n\n      .modal-content {\n        height: 100%;\n        border: 0;\n        @include border-radius(0);\n      }\n\n      .modal-header {\n        @include border-radius(0);\n      }\n\n      .modal-body {\n        overflow-y: auto;\n      }\n\n      .modal-footer {\n        @include border-radius(0);\n      }\n    }\n  }\n}\n// scss-docs-end modal-fullscreen-loop\n',"// Shared between modals and offcanvases\n@mixin overlay-backdrop($zindex, $backdrop-bg, $backdrop-opacity) {\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: $zindex;\n  width: 100vw;\n  height: 100vh;\n  background-color: $backdrop-bg;\n\n  // Fade for backdrop\n  &.fade { opacity: 0; }\n  &.show { opacity: $backdrop-opacity; }\n}\n",'// Base class\n.tooltip {\n  position: absolute;\n  z-index: $zindex-tooltip;\n  display: block;\n  margin: $tooltip-margin;\n  // Our parent element can be arbitrary since tooltips are by default inserted as a sibling of their target element.\n  // So reset our font and text properties to avoid inheriting weird values.\n  @include reset-text();\n  @include font-size($tooltip-font-size);\n  // Allow breaking very long words so they don\'t overflow the tooltip\'s bounds\n  word-wrap: break-word;\n  opacity: 0;\n\n  &.show { opacity: $tooltip-opacity; }\n\n  .tooltip-arrow {\n    position: absolute;\n    display: block;\n    width: $tooltip-arrow-width;\n    height: $tooltip-arrow-height;\n\n    &::before {\n      position: absolute;\n      content: "";\n      border-color: transparent;\n      border-style: solid;\n    }\n  }\n}\n\n.bs-tooltip-top {\n  padding: $tooltip-arrow-height 0;\n\n  .tooltip-arrow {\n    bottom: 0;\n\n    &::before {\n      top: -1px;\n      border-width: $tooltip-arrow-height ($tooltip-arrow-width * .5) 0;\n      border-top-color: $tooltip-arrow-color;\n    }\n  }\n}\n\n.bs-tooltip-end {\n  padding: 0 $tooltip-arrow-height;\n\n  .tooltip-arrow {\n    left: 0;\n    width: $tooltip-arrow-height;\n    height: $tooltip-arrow-width;\n\n    &::before {\n      right: -1px;\n      border-width: ($tooltip-arrow-width * .5) $tooltip-arrow-height ($tooltip-arrow-width * .5) 0;\n      border-right-color: $tooltip-arrow-color;\n    }\n  }\n}\n\n.bs-tooltip-bottom {\n  padding: $tooltip-arrow-height 0;\n\n  .tooltip-arrow {\n    top: 0;\n\n    &::before {\n      bottom: -1px;\n      border-width: 0 ($tooltip-arrow-width * .5) $tooltip-arrow-height;\n      border-bottom-color: $tooltip-arrow-color;\n    }\n  }\n}\n\n.bs-tooltip-start {\n  padding: 0 $tooltip-arrow-height;\n\n  .tooltip-arrow {\n    right: 0;\n    width: $tooltip-arrow-height;\n    height: $tooltip-arrow-width;\n\n    &::before {\n      left: -1px;\n      border-width: ($tooltip-arrow-width * .5) 0 ($tooltip-arrow-width * .5) $tooltip-arrow-height;\n      border-left-color: $tooltip-arrow-color;\n    }\n  }\n}\n\n.bs-tooltip-auto {\n  &[data-popper-placement^="top"] {\n    @extend .bs-tooltip-top;\n  }\n  &[data-popper-placement^="right"] {\n    @extend .bs-tooltip-end;\n  }\n  &[data-popper-placement^="bottom"] {\n    @extend .bs-tooltip-bottom;\n  }\n  &[data-popper-placement^="left"] {\n    @extend .bs-tooltip-start;\n  }\n}\n\n// Wrapper for the tooltip content\n.tooltip-inner {\n  max-width: $tooltip-max-width;\n  padding: $tooltip-padding-y $tooltip-padding-x;\n  color: $tooltip-color;\n  text-align: center;\n  background-color: $tooltip-bg;\n  @include border-radius($tooltip-border-radius);\n}\n',"@mixin reset-text {\n  font-family: $font-family-base;\n  // We deliberately do NOT reset font-size or overflow-wrap / word-wrap.\n  font-style: normal;\n  font-weight: $font-weight-normal;\n  line-height: $line-height-base;\n  text-align: left; // Fallback for where `start` is not supported\n  text-align: start;\n  text-decoration: none;\n  text-shadow: none;\n  text-transform: none;\n  letter-spacing: normal;\n  word-break: normal;\n  word-spacing: normal;\n  white-space: normal;\n  line-break: auto;\n}\n",'.popover {\n  position: absolute;\n  top: 0;\n  left: 0 #{"/* rtl:ignore */"};\n  z-index: $zindex-popover;\n  display: block;\n  max-width: $popover-max-width;\n  // Our parent element can be arbitrary since tooltips are by default inserted as a sibling of their target element.\n  // So reset our font and text properties to avoid inheriting weird values.\n  @include reset-text();\n  @include font-size($popover-font-size);\n  // Allow breaking very long words so they don\'t overflow the popover\'s bounds\n  word-wrap: break-word;\n  background-color: $popover-bg;\n  background-clip: padding-box;\n  border: $popover-border-width solid $popover-border-color;\n  @include border-radius($popover-border-radius);\n  @include box-shadow($popover-box-shadow);\n\n  .popover-arrow {\n    position: absolute;\n    display: block;\n    width: $popover-arrow-width;\n    height: $popover-arrow-height;\n\n    &::before,\n    &::after {\n      position: absolute;\n      display: block;\n      content: "";\n      border-color: transparent;\n      border-style: solid;\n    }\n  }\n}\n\n.bs-popover-top {\n  > .popover-arrow {\n    bottom: subtract(-$popover-arrow-height, $popover-border-width);\n\n    &::before {\n      bottom: 0;\n      border-width: $popover-arrow-height ($popover-arrow-width * .5) 0;\n      border-top-color: $popover-arrow-outer-color;\n    }\n\n    &::after {\n      bottom: $popover-border-width;\n      border-width: $popover-arrow-height ($popover-arrow-width * .5) 0;\n      border-top-color: $popover-arrow-color;\n    }\n  }\n}\n\n.bs-popover-end {\n  > .popover-arrow {\n    left: subtract(-$popover-arrow-height, $popover-border-width);\n    width: $popover-arrow-height;\n    height: $popover-arrow-width;\n\n    &::before {\n      left: 0;\n      border-width: ($popover-arrow-width * .5) $popover-arrow-height ($popover-arrow-width * .5) 0;\n      border-right-color: $popover-arrow-outer-color;\n    }\n\n    &::after {\n      left: $popover-border-width;\n      border-width: ($popover-arrow-width * .5) $popover-arrow-height ($popover-arrow-width * .5) 0;\n      border-right-color: $popover-arrow-color;\n    }\n  }\n}\n\n.bs-popover-bottom {\n  > .popover-arrow {\n    top: subtract(-$popover-arrow-height, $popover-border-width);\n\n    &::before {\n      top: 0;\n      border-width: 0 ($popover-arrow-width * .5) $popover-arrow-height ($popover-arrow-width * .5);\n      border-bottom-color: $popover-arrow-outer-color;\n    }\n\n    &::after {\n      top: $popover-border-width;\n      border-width: 0 ($popover-arrow-width * .5) $popover-arrow-height ($popover-arrow-width * .5);\n      border-bottom-color: $popover-arrow-color;\n    }\n  }\n\n  // This will remove the popover-header\'s border just below the arrow\n  .popover-header::before {\n    position: absolute;\n    top: 0;\n    left: 50%;\n    display: block;\n    width: $popover-arrow-width;\n    margin-left: -$popover-arrow-width * .5;\n    content: "";\n    border-bottom: $popover-border-width solid $popover-header-bg;\n  }\n}\n\n.bs-popover-start {\n  > .popover-arrow {\n    right: subtract(-$popover-arrow-height, $popover-border-width);\n    width: $popover-arrow-height;\n    height: $popover-arrow-width;\n\n    &::before {\n      right: 0;\n      border-width: ($popover-arrow-width * .5) 0 ($popover-arrow-width * .5) $popover-arrow-height;\n      border-left-color: $popover-arrow-outer-color;\n    }\n\n    &::after {\n      right: $popover-border-width;\n      border-width: ($popover-arrow-width * .5) 0 ($popover-arrow-width * .5) $popover-arrow-height;\n      border-left-color: $popover-arrow-color;\n    }\n  }\n}\n\n.bs-popover-auto {\n  &[data-popper-placement^="top"] {\n    @extend .bs-popover-top;\n  }\n  &[data-popper-placement^="right"] {\n    @extend .bs-popover-end;\n  }\n  &[data-popper-placement^="bottom"] {\n    @extend .bs-popover-bottom;\n  }\n  &[data-popper-placement^="left"] {\n    @extend .bs-popover-start;\n  }\n}\n\n// Offset the popover to account for the popover arrow\n.popover-header {\n  padding: $popover-header-padding-y $popover-header-padding-x;\n  margin-bottom: 0; // Reset the default from Reboot\n  @include font-size($font-size-base);\n  color: $popover-header-color;\n  background-color: $popover-header-bg;\n  border-bottom: $popover-border-width solid $popover-border-color;\n  @include border-top-radius($popover-inner-border-radius);\n\n  &:empty {\n    display: none;\n  }\n}\n\n.popover-body {\n  padding: $popover-body-padding-y $popover-body-padding-x;\n  color: $popover-body-color;\n}\n','// Notes on the classes:\n//\n// 1. .carousel.pointer-event should ideally be pan-y (to allow for users to scroll vertically)\n//    even when their scroll action started on a carousel, but for compatibility (with Firefox)\n//    we\'re preventing all actions instead\n// 2. The .carousel-item-start and .carousel-item-end is used to indicate where\n//    the active slide is heading.\n// 3. .active.carousel-item is the current slide.\n// 4. .active.carousel-item-start and .active.carousel-item-end is the current\n//    slide in its in-transition state. Only one of these occurs at a time.\n// 5. .carousel-item-next.carousel-item-start and .carousel-item-prev.carousel-item-end\n//    is the upcoming slide in transition.\n\n.carousel {\n  position: relative;\n}\n\n.carousel.pointer-event {\n  touch-action: pan-y;\n}\n\n.carousel-inner {\n  position: relative;\n  width: 100%;\n  overflow: hidden;\n  @include clearfix();\n}\n\n.carousel-item {\n  position: relative;\n  display: none;\n  float: left;\n  width: 100%;\n  margin-right: -100%;\n  backface-visibility: hidden;\n  @include transition($carousel-transition);\n}\n\n.carousel-item.active,\n.carousel-item-next,\n.carousel-item-prev {\n  display: block;\n}\n\n/* rtl:begin:ignore */\n.carousel-item-next:not(.carousel-item-start),\n.active.carousel-item-end {\n  transform: translateX(100%);\n}\n\n.carousel-item-prev:not(.carousel-item-end),\n.active.carousel-item-start {\n  transform: translateX(-100%);\n}\n\n/* rtl:end:ignore */\n\n\n//\n// Alternate transitions\n//\n\n.carousel-fade {\n  .carousel-item {\n    opacity: 0;\n    transition-property: opacity;\n    transform: none;\n  }\n\n  .carousel-item.active,\n  .carousel-item-next.carousel-item-start,\n  .carousel-item-prev.carousel-item-end {\n    z-index: 1;\n    opacity: 1;\n  }\n\n  .active.carousel-item-start,\n  .active.carousel-item-end {\n    z-index: 0;\n    opacity: 0;\n    @include transition(opacity 0s $carousel-transition-duration);\n  }\n}\n\n\n//\n// Left/right controls for nav\n//\n\n.carousel-control-prev,\n.carousel-control-next {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  z-index: 1;\n  // Use flex for alignment (1-3)\n  display: flex; // 1. allow flex styles\n  align-items: center; // 2. vertically center contents\n  justify-content: center; // 3. horizontally center contents\n  width: $carousel-control-width;\n  padding: 0;\n  color: $carousel-control-color;\n  text-align: center;\n  background: none;\n  border: 0;\n  opacity: $carousel-control-opacity;\n  @include transition($carousel-control-transition);\n\n  // Hover/focus state\n  &:hover,\n  &:focus {\n    color: $carousel-control-color;\n    text-decoration: none;\n    outline: 0;\n    opacity: $carousel-control-hover-opacity;\n  }\n}\n.carousel-control-prev {\n  left: 0;\n  background-image: if($enable-gradients, linear-gradient(90deg, rgba($black, .25), rgba($black, .001)), null);\n}\n.carousel-control-next {\n  right: 0;\n  background-image: if($enable-gradients, linear-gradient(270deg, rgba($black, .25), rgba($black, .001)), null);\n}\n\n// Icons for within\n.carousel-control-prev-icon,\n.carousel-control-next-icon {\n  display: inline-block;\n  width: $carousel-control-icon-width;\n  height: $carousel-control-icon-width;\n  background-repeat: no-repeat;\n  background-position: 50%;\n  background-size: 100% 100%;\n}\n\n/* rtl:options: {\n  "autoRename": true,\n  "stringMap":[ {\n    "name"    : "prev-next",\n    "search"  : "prev",\n    "replace" : "next"\n  } ]\n} */\n.carousel-control-prev-icon {\n  background-image: escape-svg($carousel-control-prev-icon-bg);\n}\n.carousel-control-next-icon {\n  background-image: escape-svg($carousel-control-next-icon-bg);\n}\n\n// Optional indicator pips/controls\n//\n// Add a container (such as a list) with the following class and add an item (ideally a focusable control,\n// like a button) with data-bs-target for each slide your carousel holds.\n\n.carousel-indicators {\n  position: absolute;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 2;\n  display: flex;\n  justify-content: center;\n  padding: 0;\n  // Use the .carousel-control\'s width as margin so we don\'t overlay those\n  margin-right: $carousel-control-width;\n  margin-bottom: 1rem;\n  margin-left: $carousel-control-width;\n  list-style: none;\n\n  [data-bs-target] {\n    box-sizing: content-box;\n    flex: 0 1 auto;\n    width: $carousel-indicator-width;\n    height: $carousel-indicator-height;\n    padding: 0;\n    margin-right: $carousel-indicator-spacer;\n    margin-left: $carousel-indicator-spacer;\n    text-indent: -999px;\n    cursor: pointer;\n    background-color: $carousel-indicator-active-bg;\n    background-clip: padding-box;\n    border: 0;\n    // Use transparent borders to increase the hit area by 10px on top and bottom.\n    border-top: $carousel-indicator-hit-area-height solid transparent;\n    border-bottom: $carousel-indicator-hit-area-height solid transparent;\n    opacity: $carousel-indicator-opacity;\n    @include transition($carousel-indicator-transition);\n  }\n\n  .active {\n    opacity: $carousel-indicator-active-opacity;\n  }\n}\n\n\n// Optional captions\n//\n//\n\n.carousel-caption {\n  position: absolute;\n  right: (100% - $carousel-caption-width) * .5;\n  bottom: $carousel-caption-spacer;\n  left: (100% - $carousel-caption-width) * .5;\n  padding-top: $carousel-caption-padding-y;\n  padding-bottom: $carousel-caption-padding-y;\n  color: $carousel-caption-color;\n  text-align: center;\n}\n\n// Dark mode carousel\n\n.carousel-dark {\n  .carousel-control-prev-icon,\n  .carousel-control-next-icon {\n    filter: $carousel-dark-control-icon-filter;\n  }\n\n  .carousel-indicators [data-bs-target] {\n    background-color: $carousel-dark-indicator-active-bg;\n  }\n\n  .carousel-caption {\n    color: $carousel-dark-caption-color;\n  }\n}\n','// scss-docs-start clearfix\n@mixin clearfix() {\n  &::after {\n    display: block;\n    clear: both;\n    content: "";\n  }\n}\n// scss-docs-end clearfix\n','//\n// Rotating border\n//\n\n// scss-docs-start spinner-border-keyframes\n@keyframes spinner-border {\n  to { transform: rotate(360deg) #{"/* rtl:ignore */"}; }\n}\n// scss-docs-end spinner-border-keyframes\n\n.spinner-border {\n  display: inline-block;\n  width: $spinner-width;\n  height: $spinner-height;\n  vertical-align: $spinner-vertical-align;\n  border: $spinner-border-width solid currentColor;\n  border-right-color: transparent;\n  // stylelint-disable-next-line property-disallowed-list\n  border-radius: 50%;\n  animation: $spinner-animation-speed linear infinite spinner-border;\n}\n\n.spinner-border-sm {\n  width: $spinner-width-sm;\n  height: $spinner-height-sm;\n  border-width: $spinner-border-width-sm;\n}\n\n//\n// Growing circle\n//\n\n// scss-docs-start spinner-grow-keyframes\n@keyframes spinner-grow {\n  0% {\n    transform: scale(0);\n  }\n  50% {\n    opacity: 1;\n    transform: none;\n  }\n}\n// scss-docs-end spinner-grow-keyframes\n\n.spinner-grow {\n  display: inline-block;\n  width: $spinner-width;\n  height: $spinner-height;\n  vertical-align: $spinner-vertical-align;\n  background-color: currentColor;\n  // stylelint-disable-next-line property-disallowed-list\n  border-radius: 50%;\n  opacity: 0;\n  animation: $spinner-animation-speed linear infinite spinner-grow;\n}\n\n.spinner-grow-sm {\n  width: $spinner-width-sm;\n  height: $spinner-height-sm;\n}\n\n@if $enable-reduced-motion {\n  @media (prefers-reduced-motion: reduce) {\n    .spinner-border,\n    .spinner-grow {\n      animation-duration: $spinner-animation-speed * 2;\n    }\n  }\n}\n',".offcanvas {\n  position: fixed;\n  bottom: 0;\n  z-index: $zindex-offcanvas;\n  display: flex;\n  flex-direction: column;\n  max-width: 100%;\n  color: $offcanvas-color;\n  visibility: hidden;\n  background-color: $offcanvas-bg-color;\n  background-clip: padding-box;\n  outline: 0;\n  @include box-shadow($offcanvas-box-shadow);\n  @include transition(transform $offcanvas-transition-duration ease-in-out);\n}\n\n.offcanvas-backdrop {\n  @include overlay-backdrop($zindex-offcanvas-backdrop, $offcanvas-backdrop-bg, $offcanvas-backdrop-opacity);\n}\n\n.offcanvas-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: $offcanvas-padding-y $offcanvas-padding-x;\n\n  .btn-close {\n    padding: ($offcanvas-padding-y * .5) ($offcanvas-padding-x * .5);\n    margin-top: $offcanvas-padding-y * -.5;\n    margin-right: $offcanvas-padding-x * -.5;\n    margin-bottom: $offcanvas-padding-y * -.5;\n  }\n}\n\n.offcanvas-title {\n  margin-bottom: 0;\n  line-height: $offcanvas-title-line-height;\n}\n\n.offcanvas-body {\n  flex-grow: 1;\n  padding: $offcanvas-padding-y $offcanvas-padding-x;\n  overflow-y: auto;\n}\n\n.offcanvas-start {\n  top: 0;\n  left: 0;\n  width: $offcanvas-horizontal-width;\n  border-right: $offcanvas-border-width solid $offcanvas-border-color;\n  transform: translateX(-100%);\n}\n\n.offcanvas-end {\n  top: 0;\n  right: 0;\n  width: $offcanvas-horizontal-width;\n  border-left: $offcanvas-border-width solid $offcanvas-border-color;\n  transform: translateX(100%);\n}\n\n.offcanvas-top {\n  top: 0;\n  right: 0;\n  left: 0;\n  height: $offcanvas-vertical-height;\n  max-height: 100%;\n  border-bottom: $offcanvas-border-width solid $offcanvas-border-color;\n  transform: translateY(-100%);\n}\n\n.offcanvas-bottom {\n  right: 0;\n  left: 0;\n  height: $offcanvas-vertical-height;\n  max-height: 100%;\n  border-top: $offcanvas-border-width solid $offcanvas-border-color;\n  transform: translateY(100%);\n}\n\n.offcanvas.show {\n  transform: none;\n}\n",'.placeholder {\n  display: inline-block;\n  min-height: 1em;\n  vertical-align: middle;\n  cursor: wait;\n  background-color: currentColor;\n  opacity: $placeholder-opacity-max;\n\n  &.btn::before {\n    display: inline-block;\n    content: "";\n  }\n}\n\n// Sizing\n.placeholder-xs {\n  min-height: .6em;\n}\n\n.placeholder-sm {\n  min-height: .8em;\n}\n\n.placeholder-lg {\n  min-height: 1.2em;\n}\n\n// Animation\n.placeholder-glow {\n  .placeholder {\n    animation: placeholder-glow 2s ease-in-out infinite;\n  }\n}\n\n@keyframes placeholder-glow {\n  50% {\n    opacity: $placeholder-opacity-min;\n  }\n}\n\n.placeholder-wave {\n  mask-image: linear-gradient(130deg, $black 55%, rgba(0, 0, 0, (1 - $placeholder-opacity-min)) 75%, $black 95%);\n  mask-size: 200% 100%;\n  animation: placeholder-wave 2s linear infinite;\n}\n\n@keyframes placeholder-wave {\n  100% {\n    mask-position: -200% 0%;\n  }\n}\n',"@each $color, $value in $theme-colors {\n  .link-#{$color} {\n    color: $value;\n\n    @if $link-shade-percentage != 0 {\n      &:hover,\n      &:focus {\n        color: if(color-contrast($value) == $color-contrast-light, shade-color($value, $link-shade-percentage), tint-color($value, $link-shade-percentage));\n      }\n    }\n  }\n}\n",'// Credit: Nicolas Gallagher and SUIT CSS.\n\n.ratio {\n  position: relative;\n  width: 100%;\n\n  &::before {\n    display: block;\n    padding-top: var(--#{$variable-prefix}aspect-ratio);\n    content: "";\n  }\n\n  > * {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n  }\n}\n\n@each $key, $ratio in $aspect-ratios {\n  .ratio-#{$key} {\n    --#{$variable-prefix}aspect-ratio: #{$ratio};\n  }\n}\n',"// Shorthand\n\n.fixed-top {\n  position: fixed;\n  top: 0;\n  right: 0;\n  left: 0;\n  z-index: $zindex-fixed;\n}\n\n.fixed-bottom {\n  position: fixed;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: $zindex-fixed;\n}\n\n// Responsive sticky top\n@each $breakpoint in map-keys($grid-breakpoints) {\n  @include media-breakpoint-up($breakpoint) {\n    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);\n\n    .sticky#{$infix}-top {\n      position: sticky;\n      top: 0;\n      z-index: $zindex-sticky;\n    }\n  }\n}\n","// scss-docs-start stacks\n.hstack {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  align-self: stretch;\n}\n\n.vstack {\n  display: flex;\n  flex: 1 1 auto;\n  flex-direction: column;\n  align-self: stretch;\n}\n// scss-docs-end stacks\n","//\n// Visually hidden\n//\n\n.visually-hidden,\n.visually-hidden-focusable:not(:focus):not(:focus-within) {\n  @include visually-hidden();\n}\n",'// stylelint-disable declaration-no-important\n\n// Hide content visually while keeping it accessible to assistive technologies\n//\n// See: https://www.a11yproject.com/posts/2013-01-11-how-to-hide-content/\n// See: https://kittygiraudel.com/2016/10/13/css-hide-and-seek/\n\n@mixin visually-hidden() {\n  position: absolute !important;\n  width: 1px !important;\n  height: 1px !important;\n  padding: 0 !important;\n  margin: -1px !important; // Fix for https://github.com/twbs/bootstrap/issues/25686\n  overflow: hidden !important;\n  clip: rect(0, 0, 0, 0) !important;\n  white-space: nowrap !important;\n  border: 0 !important;\n}\n\n// Use to only display content when it\'s focused, or one of its child elements is focused\n// (i.e. when focus is within the element/container that the class was applied to)\n//\n// Useful for "Skip to main content" links; see https://www.w3.org/TR/2013/NOTE-WCAG20-TECHS-20130905/G1\n\n@mixin visually-hidden-focusable() {\n  &:not(:focus):not(:focus-within) {\n    @include visually-hidden();\n  }\n}\n','//\n// Stretched link\n//\n\n.stretched-link {\n  &::#{$stretched-link-pseudo-element} {\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    z-index: $stretched-link-z-index;\n    content: "";\n  }\n}\n',"//\n// Text truncation\n//\n\n.text-truncate {\n  @include text-truncate();\n}\n","// Text truncate\n// Requires inline-block or block for proper styling\n\n@mixin text-truncate() {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n",".vr {\n  display: inline-block;\n  align-self: stretch;\n  width: 1px;\n  min-height: 1em;\n  background-color: currentColor;\n  opacity: $hr-opacity;\n}\n",'// Utility generator\n// Used to generate utilities & print utilities\n@mixin generate-utility($utility, $infix, $is-rfs-media-query: false) {\n  $values: map-get($utility, values);\n\n  // If the values are a list or string, convert it into a map\n  @if type-of($values) == "string" or type-of(nth($values, 1)) != "list" {\n    $values: zip($values, $values);\n  }\n\n  @each $key, $value in $values {\n    $properties: map-get($utility, property);\n\n    // Multiple properties are possible, for example with vertical or horizontal margins or paddings\n    @if type-of($properties) == "string" {\n      $properties: append((), $properties);\n    }\n\n    // Use custom class if present\n    $property-class: if(map-has-key($utility, class), map-get($utility, class), nth($properties, 1));\n    $property-class: if($property-class == null, "", $property-class);\n\n    // State params to generate pseudo-classes\n    $state: if(map-has-key($utility, state), map-get($utility, state), ());\n\n    $infix: if($property-class == "" and str-slice($infix, 1, 1) == "-", str-slice($infix, 2), $infix);\n\n    // Don\'t prefix if value key is null (eg. with shadow class)\n    $property-class-modifier: if($key, if($property-class == "" and $infix == "", "", "-") + $key, "");\n\n    @if map-get($utility, rfs) {\n      // Inside the media query\n      @if $is-rfs-media-query {\n        $val: rfs-value($value);\n\n        // Do not render anything if fluid and non fluid values are the same\n        $value: if($val == rfs-fluid-value($value), null, $val);\n      }\n      @else {\n        $value: rfs-fluid-value($value);\n      }\n    }\n\n    $is-css-var: map-get($utility, css-var);\n    $is-local-vars: map-get($utility, local-vars);\n    $is-rtl: map-get($utility, rtl);\n\n    @if $value != null {\n      @if $is-rtl == false {\n        /* rtl:begin:remove */\n      }\n\n      @if $is-css-var {\n        .#{$property-class + $infix + $property-class-modifier} {\n          --#{$variable-prefix}#{$property-class}: #{$value};\n        }\n\n        @each $pseudo in $state {\n          .#{$property-class + $infix + $property-class-modifier}-#{$pseudo}:#{$pseudo} {\n            --#{$variable-prefix}#{$property-class}: #{$value};\n          }\n        }\n      } @else {\n        .#{$property-class + $infix + $property-class-modifier} {\n          @each $property in $properties {\n            @if $is-local-vars {\n              @each $local-var, $value in $is-local-vars {\n                --#{$variable-prefix}#{$local-var}: #{$value};\n              }\n            }\n            #{$property}: $value if($enable-important-utilities, !important, null);\n          }\n        }\n\n        @each $pseudo in $state {\n          .#{$property-class + $infix + $property-class-modifier}-#{$pseudo}:#{$pseudo} {\n            @each $property in $properties {\n              #{$property}: $value if($enable-important-utilities, !important, null);\n            }\n          }\n        }\n      }\n\n      @if $is-rtl == false {\n        /* rtl:end:remove */\n      }\n    }\n  }\n}\n','// Loop over each breakpoint\n@each $breakpoint in map-keys($grid-breakpoints) {\n\n  // Generate media query if needed\n  @include media-breakpoint-up($breakpoint) {\n    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);\n\n    // Loop over each utility property\n    @each $key, $utility in $utilities {\n      // The utility can be disabled with `false`, thus check if the utility is a map first\n      // Only proceed if responsive media queries are enabled or if it\'s the base media query\n      @if type-of($utility) == "map" and (map-get($utility, responsive) or $infix == "") {\n        @include generate-utility($utility, $infix);\n      }\n    }\n  }\n}\n\n// RFS rescaling\n@media (min-width: $rfs-mq-value) {\n  @each $breakpoint in map-keys($grid-breakpoints) {\n    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);\n\n    @if (map-get($grid-breakpoints, $breakpoint) < $rfs-breakpoint) {\n      // Loop over each utility property\n      @each $key, $utility in $utilities {\n        // The utility can be disabled with `false`, thus check if the utility is a map first\n        // Only proceed if responsive media queries are enabled or if it\'s the base media query\n        @if type-of($utility) == "map" and map-get($utility, rfs) and (map-get($utility, responsive) or $infix == "") {\n          @include generate-utility($utility, $infix, true);\n        }\n      }\n    }\n  }\n}\n\n\n// Print utilities\n@media print {\n  @each $key, $utility in $utilities {\n    // The utility can be disabled with `false`, thus check if the utility is a map first\n    // Then check if the utility needs print styles\n    @if type-of($utility) == "map" and map-get($utility, print) == true {\n      @include generate-utility($utility, "-print");\n    }\n  }\n}\n'],sourceRoot:""}]);const N=y},645:n=>{"use strict";n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",o=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),o&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),o&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,o,r,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(o)for(var A=0;A<this.length;A++){var l=this[A][0];null!=l&&(a[l]=!0)}for(var s=0;s<n.length;s++){var d=[].concat(n[s]);o&&a[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),e&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=e):d[2]=e),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),t.push(d))}},t}},667:n=>{"use strict";n.exports=function(n,t){return t||(t={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),t.hash&&(n+=t.hash),/["'() \t\n]|(%20)/.test(n)||t.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{"use strict";n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */"),a=e.sources.map((function(n){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(n," */")}));return[t].concat(a).concat([i]).join("\n")}return[t].join("\n")}},486:function(n,t,e){var o;n=e.nmd(n),function(){var r,i="Expected a function",a="__lodash_hash_undefined__",A="__lodash_placeholder__",l=32,s=128,d=1/0,c=9007199254740991,p=NaN,u=4294967295,m=[["ary",s],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",l],["partialRight",64],["rearg",256]],f="[object Arguments]",g="[object Array]",b="[object Boolean]",C="[object Date]",h="[object Error]",B="[object Function]",v="[object GeneratorFunction]",w="[object Map]",$="[object Number]",x="[object Object]",y="[object Promise]",k="[object RegExp]",E="[object Set]",I="[object String]",_="[object Symbol]",O="[object WeakMap]",J="[object ArrayBuffer]",P="[object DataView]",D="[object Float32Array]",z="[object Float64Array]",S="[object Int8Array]",F="[object Int16Array]",U="[object Int32Array]",M="[object Uint8Array]",q="[object Uint8ClampedArray]",j="[object Uint16Array]",T="[object Uint32Array]",N=/\b__p \+= '';/g,W=/\b(__p \+=) '' \+/g,L=/(__e\(.*?\)|\b__t\)) \+\n'';/g,G=/&(?:amp|lt|gt|quot|#39);/g,R=/[&<>"']/g,Q=RegExp(G.source),Y=RegExp(R.source),K=/<%-([\s\S]+?)%>/g,H=/<%([\s\S]+?)%>/g,V=/<%=([\s\S]+?)%>/g,X=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,Z=/^\w*$/,nn=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,tn=/[\\^$.*+?()[\]{}|]/g,en=RegExp(tn.source),on=/^\s+/,rn=/\s/,an=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,An=/\{\n\/\* \[wrapped with (.+)\] \*/,ln=/,? & /,sn=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,dn=/[()=,{}\[\]\/\s]/,cn=/\\(\\)?/g,pn=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,un=/\w*$/,mn=/^[-+]0x[0-9a-f]+$/i,fn=/^0b[01]+$/i,gn=/^\[object .+?Constructor\]$/,bn=/^0o[0-7]+$/i,Cn=/^(?:0|[1-9]\d*)$/,hn=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,Bn=/($^)/,vn=/['\n\r\u2028\u2029\\]/g,wn="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",$n="a-z\\xdf-\\xf6\\xf8-\\xff",xn="A-Z\\xc0-\\xd6\\xd8-\\xde",yn="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",kn="["+yn+"]",En="["+wn+"]",In="\\d+",_n="["+$n+"]",On="[^\\ud800-\\udfff"+yn+In+"\\u2700-\\u27bf"+$n+xn+"]",Jn="\\ud83c[\\udffb-\\udfff]",Pn="[^\\ud800-\\udfff]",Dn="(?:\\ud83c[\\udde6-\\uddff]){2}",zn="[\\ud800-\\udbff][\\udc00-\\udfff]",Sn="["+xn+"]",Fn="(?:"+_n+"|"+On+")",Un="(?:"+Sn+"|"+On+")",Mn="(?:['’](?:d|ll|m|re|s|t|ve))?",qn="(?:['’](?:D|LL|M|RE|S|T|VE))?",jn="(?:"+En+"|"+Jn+")?",Tn="[\\ufe0e\\ufe0f]?",Nn=Tn+jn+"(?:\\u200d(?:"+[Pn,Dn,zn].join("|")+")"+Tn+jn+")*",Wn="(?:"+["[\\u2700-\\u27bf]",Dn,zn].join("|")+")"+Nn,Ln="(?:"+[Pn+En+"?",En,Dn,zn,"[\\ud800-\\udfff]"].join("|")+")",Gn=RegExp("['’]","g"),Rn=RegExp(En,"g"),Qn=RegExp(Jn+"(?="+Jn+")|"+Ln+Nn,"g"),Yn=RegExp([Sn+"?"+_n+"+"+Mn+"(?="+[kn,Sn,"$"].join("|")+")",Un+"+"+qn+"(?="+[kn,Sn+Fn,"$"].join("|")+")",Sn+"?"+Fn+"+"+Mn,Sn+"+"+qn,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",In,Wn].join("|"),"g"),Kn=RegExp("[\\u200d\\ud800-\\udfff"+wn+"\\ufe0e\\ufe0f]"),Hn=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Vn=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Xn=-1,Zn={};Zn[D]=Zn[z]=Zn[S]=Zn[F]=Zn[U]=Zn[M]=Zn[q]=Zn[j]=Zn[T]=!0,Zn[f]=Zn[g]=Zn[J]=Zn[b]=Zn[P]=Zn[C]=Zn[h]=Zn[B]=Zn[w]=Zn[$]=Zn[x]=Zn[k]=Zn[E]=Zn[I]=Zn[O]=!1;var nt={};nt[f]=nt[g]=nt[J]=nt[P]=nt[b]=nt[C]=nt[D]=nt[z]=nt[S]=nt[F]=nt[U]=nt[w]=nt[$]=nt[x]=nt[k]=nt[E]=nt[I]=nt[_]=nt[M]=nt[q]=nt[j]=nt[T]=!0,nt[h]=nt[B]=nt[O]=!1;var tt={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},et=parseFloat,ot=parseInt,rt="object"==typeof e.g&&e.g&&e.g.Object===Object&&e.g,it="object"==typeof self&&self&&self.Object===Object&&self,at=rt||it||Function("return this")(),At=t&&!t.nodeType&&t,lt=At&&n&&!n.nodeType&&n,st=lt&&lt.exports===At,dt=st&&rt.process,ct=function(){try{return lt&&lt.require&&lt.require("util").types||dt&&dt.binding&&dt.binding("util")}catch(n){}}(),pt=ct&&ct.isArrayBuffer,ut=ct&&ct.isDate,mt=ct&&ct.isMap,ft=ct&&ct.isRegExp,gt=ct&&ct.isSet,bt=ct&&ct.isTypedArray;function Ct(n,t,e){switch(e.length){case 0:return n.call(t);case 1:return n.call(t,e[0]);case 2:return n.call(t,e[0],e[1]);case 3:return n.call(t,e[0],e[1],e[2])}return n.apply(t,e)}function ht(n,t,e,o){for(var r=-1,i=null==n?0:n.length;++r<i;){var a=n[r];t(o,a,e(a),n)}return o}function Bt(n,t){for(var e=-1,o=null==n?0:n.length;++e<o&&!1!==t(n[e],e,n););return n}function vt(n,t){for(var e=null==n?0:n.length;e--&&!1!==t(n[e],e,n););return n}function wt(n,t){for(var e=-1,o=null==n?0:n.length;++e<o;)if(!t(n[e],e,n))return!1;return!0}function $t(n,t){for(var e=-1,o=null==n?0:n.length,r=0,i=[];++e<o;){var a=n[e];t(a,e,n)&&(i[r++]=a)}return i}function xt(n,t){return!(null==n||!n.length)&&zt(n,t,0)>-1}function yt(n,t,e){for(var o=-1,r=null==n?0:n.length;++o<r;)if(e(t,n[o]))return!0;return!1}function kt(n,t){for(var e=-1,o=null==n?0:n.length,r=Array(o);++e<o;)r[e]=t(n[e],e,n);return r}function Et(n,t){for(var e=-1,o=t.length,r=n.length;++e<o;)n[r+e]=t[e];return n}function It(n,t,e,o){var r=-1,i=null==n?0:n.length;for(o&&i&&(e=n[++r]);++r<i;)e=t(e,n[r],r,n);return e}function _t(n,t,e,o){var r=null==n?0:n.length;for(o&&r&&(e=n[--r]);r--;)e=t(e,n[r],r,n);return e}function Ot(n,t){for(var e=-1,o=null==n?0:n.length;++e<o;)if(t(n[e],e,n))return!0;return!1}var Jt=Mt("length");function Pt(n,t,e){var o;return e(n,(function(n,e,r){if(t(n,e,r))return o=e,!1})),o}function Dt(n,t,e,o){for(var r=n.length,i=e+(o?1:-1);o?i--:++i<r;)if(t(n[i],i,n))return i;return-1}function zt(n,t,e){return t==t?function(n,t,e){for(var o=e-1,r=n.length;++o<r;)if(n[o]===t)return o;return-1}(n,t,e):Dt(n,Ft,e)}function St(n,t,e,o){for(var r=e-1,i=n.length;++r<i;)if(o(n[r],t))return r;return-1}function Ft(n){return n!=n}function Ut(n,t){var e=null==n?0:n.length;return e?Tt(n,t)/e:p}function Mt(n){return function(t){return null==t?r:t[n]}}function qt(n){return function(t){return null==n?r:n[t]}}function jt(n,t,e,o,r){return r(n,(function(n,r,i){e=o?(o=!1,n):t(e,n,r,i)})),e}function Tt(n,t){for(var e,o=-1,i=n.length;++o<i;){var a=t(n[o]);a!==r&&(e=e===r?a:e+a)}return e}function Nt(n,t){for(var e=-1,o=Array(n);++e<n;)o[e]=t(e);return o}function Wt(n){return n?n.slice(0,Ae(n)+1).replace(on,""):n}function Lt(n){return function(t){return n(t)}}function Gt(n,t){return kt(t,(function(t){return n[t]}))}function Rt(n,t){return n.has(t)}function Qt(n,t){for(var e=-1,o=n.length;++e<o&&zt(t,n[e],0)>-1;);return e}function Yt(n,t){for(var e=n.length;e--&&zt(t,n[e],0)>-1;);return e}function Kt(n,t){for(var e=n.length,o=0;e--;)n[e]===t&&++o;return o}var Ht=qt({À:"A",Á:"A",Â:"A",Ã:"A",Ä:"A",Å:"A",à:"a",á:"a",â:"a",ã:"a",ä:"a",å:"a",Ç:"C",ç:"c",Ð:"D",ð:"d",È:"E",É:"E",Ê:"E",Ë:"E",è:"e",é:"e",ê:"e",ë:"e",Ì:"I",Í:"I",Î:"I",Ï:"I",ì:"i",í:"i",î:"i",ï:"i",Ñ:"N",ñ:"n",Ò:"O",Ó:"O",Ô:"O",Õ:"O",Ö:"O",Ø:"O",ò:"o",ó:"o",ô:"o",õ:"o",ö:"o",ø:"o",Ù:"U",Ú:"U",Û:"U",Ü:"U",ù:"u",ú:"u",û:"u",ü:"u",Ý:"Y",ý:"y",ÿ:"y",Æ:"Ae",æ:"ae",Þ:"Th",þ:"th",ß:"ss",Ā:"A",Ă:"A",Ą:"A",ā:"a",ă:"a",ą:"a",Ć:"C",Ĉ:"C",Ċ:"C",Č:"C",ć:"c",ĉ:"c",ċ:"c",č:"c",Ď:"D",Đ:"D",ď:"d",đ:"d",Ē:"E",Ĕ:"E",Ė:"E",Ę:"E",Ě:"E",ē:"e",ĕ:"e",ė:"e",ę:"e",ě:"e",Ĝ:"G",Ğ:"G",Ġ:"G",Ģ:"G",ĝ:"g",ğ:"g",ġ:"g",ģ:"g",Ĥ:"H",Ħ:"H",ĥ:"h",ħ:"h",Ĩ:"I",Ī:"I",Ĭ:"I",Į:"I",İ:"I",ĩ:"i",ī:"i",ĭ:"i",į:"i",ı:"i",Ĵ:"J",ĵ:"j",Ķ:"K",ķ:"k",ĸ:"k",Ĺ:"L",Ļ:"L",Ľ:"L",Ŀ:"L",Ł:"L",ĺ:"l",ļ:"l",ľ:"l",ŀ:"l",ł:"l",Ń:"N",Ņ:"N",Ň:"N",Ŋ:"N",ń:"n",ņ:"n",ň:"n",ŋ:"n",Ō:"O",Ŏ:"O",Ő:"O",ō:"o",ŏ:"o",ő:"o",Ŕ:"R",Ŗ:"R",Ř:"R",ŕ:"r",ŗ:"r",ř:"r",Ś:"S",Ŝ:"S",Ş:"S",Š:"S",ś:"s",ŝ:"s",ş:"s",š:"s",Ţ:"T",Ť:"T",Ŧ:"T",ţ:"t",ť:"t",ŧ:"t",Ũ:"U",Ū:"U",Ŭ:"U",Ů:"U",Ű:"U",Ų:"U",ũ:"u",ū:"u",ŭ:"u",ů:"u",ű:"u",ų:"u",Ŵ:"W",ŵ:"w",Ŷ:"Y",ŷ:"y",Ÿ:"Y",Ź:"Z",Ż:"Z",Ž:"Z",ź:"z",ż:"z",ž:"z",Ĳ:"IJ",ĳ:"ij",Œ:"Oe",œ:"oe",ŉ:"'n",ſ:"s"}),Vt=qt({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Xt(n){return"\\"+tt[n]}function Zt(n){return Kn.test(n)}function ne(n){var t=-1,e=Array(n.size);return n.forEach((function(n,o){e[++t]=[o,n]})),e}function te(n,t){return function(e){return n(t(e))}}function ee(n,t){for(var e=-1,o=n.length,r=0,i=[];++e<o;){var a=n[e];a!==t&&a!==A||(n[e]=A,i[r++]=e)}return i}function oe(n){var t=-1,e=Array(n.size);return n.forEach((function(n){e[++t]=n})),e}function re(n){var t=-1,e=Array(n.size);return n.forEach((function(n){e[++t]=[n,n]})),e}function ie(n){return Zt(n)?function(n){for(var t=Qn.lastIndex=0;Qn.test(n);)++t;return t}(n):Jt(n)}function ae(n){return Zt(n)?function(n){return n.match(Qn)||[]}(n):function(n){return n.split("")}(n)}function Ae(n){for(var t=n.length;t--&&rn.test(n.charAt(t)););return t}var le=qt({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"}),se=function n(t){var e,o=(t=null==t?at:se.defaults(at.Object(),t,se.pick(at,Vn))).Array,rn=t.Date,wn=t.Error,$n=t.Function,xn=t.Math,yn=t.Object,kn=t.RegExp,En=t.String,In=t.TypeError,_n=o.prototype,On=$n.prototype,Jn=yn.prototype,Pn=t["__core-js_shared__"],Dn=On.toString,zn=Jn.hasOwnProperty,Sn=0,Fn=(e=/[^.]+$/.exec(Pn&&Pn.keys&&Pn.keys.IE_PROTO||""))?"Symbol(src)_1."+e:"",Un=Jn.toString,Mn=Dn.call(yn),qn=at._,jn=kn("^"+Dn.call(zn).replace(tn,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Tn=st?t.Buffer:r,Nn=t.Symbol,Wn=t.Uint8Array,Ln=Tn?Tn.allocUnsafe:r,Qn=te(yn.getPrototypeOf,yn),Kn=yn.create,tt=Jn.propertyIsEnumerable,rt=_n.splice,it=Nn?Nn.isConcatSpreadable:r,At=Nn?Nn.iterator:r,lt=Nn?Nn.toStringTag:r,dt=function(){try{var n=di(yn,"defineProperty");return n({},"",{}),n}catch(n){}}(),ct=t.clearTimeout!==at.clearTimeout&&t.clearTimeout,Jt=rn&&rn.now!==at.Date.now&&rn.now,qt=t.setTimeout!==at.setTimeout&&t.setTimeout,de=xn.ceil,ce=xn.floor,pe=yn.getOwnPropertySymbols,ue=Tn?Tn.isBuffer:r,me=t.isFinite,fe=_n.join,ge=te(yn.keys,yn),be=xn.max,Ce=xn.min,he=rn.now,Be=t.parseInt,ve=xn.random,we=_n.reverse,$e=di(t,"DataView"),xe=di(t,"Map"),ye=di(t,"Promise"),ke=di(t,"Set"),Ee=di(t,"WeakMap"),Ie=di(yn,"create"),_e=Ee&&new Ee,Oe={},Je=qi($e),Pe=qi(xe),De=qi(ye),ze=qi(ke),Se=qi(Ee),Fe=Nn?Nn.prototype:r,Ue=Fe?Fe.valueOf:r,Me=Fe?Fe.toString:r;function qe(n){if(eA(n)&&!Ga(n)&&!(n instanceof We)){if(n instanceof Ne)return n;if(zn.call(n,"__wrapped__"))return ji(n)}return new Ne(n)}var je=function(){function n(){}return function(t){if(!tA(t))return{};if(Kn)return Kn(t);n.prototype=t;var e=new n;return n.prototype=r,e}}();function Te(){}function Ne(n,t){this.__wrapped__=n,this.__actions__=[],this.__chain__=!!t,this.__index__=0,this.__values__=r}function We(n){this.__wrapped__=n,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=u,this.__views__=[]}function Le(n){var t=-1,e=null==n?0:n.length;for(this.clear();++t<e;){var o=n[t];this.set(o[0],o[1])}}function Ge(n){var t=-1,e=null==n?0:n.length;for(this.clear();++t<e;){var o=n[t];this.set(o[0],o[1])}}function Re(n){var t=-1,e=null==n?0:n.length;for(this.clear();++t<e;){var o=n[t];this.set(o[0],o[1])}}function Qe(n){var t=-1,e=null==n?0:n.length;for(this.__data__=new Re;++t<e;)this.add(n[t])}function Ye(n){var t=this.__data__=new Ge(n);this.size=t.size}function Ke(n,t){var e=Ga(n),o=!e&&La(n),r=!e&&!o&&Ka(n),i=!e&&!o&&!r&&dA(n),a=e||o||r||i,A=a?Nt(n.length,En):[],l=A.length;for(var s in n)!t&&!zn.call(n,s)||a&&("length"==s||r&&("offset"==s||"parent"==s)||i&&("buffer"==s||"byteLength"==s||"byteOffset"==s)||bi(s,l))||A.push(s);return A}function He(n){var t=n.length;return t?n[Qo(0,t-1)]:r}function Ve(n,t){return zi(Ir(n),ao(t,0,n.length))}function Xe(n){return zi(Ir(n))}function Ze(n,t,e){(e!==r&&!Ta(n[t],e)||e===r&&!(t in n))&&ro(n,t,e)}function no(n,t,e){var o=n[t];zn.call(n,t)&&Ta(o,e)&&(e!==r||t in n)||ro(n,t,e)}function to(n,t){for(var e=n.length;e--;)if(Ta(n[e][0],t))return e;return-1}function eo(n,t,e,o){return po(n,(function(n,r,i){t(o,n,e(n),i)})),o}function oo(n,t){return n&&_r(t,PA(t),n)}function ro(n,t,e){"__proto__"==t&&dt?dt(n,t,{configurable:!0,enumerable:!0,value:e,writable:!0}):n[t]=e}function io(n,t){for(var e=-1,i=t.length,a=o(i),A=null==n;++e<i;)a[e]=A?r:EA(n,t[e]);return a}function ao(n,t,e){return n==n&&(e!==r&&(n=n<=e?n:e),t!==r&&(n=n>=t?n:t)),n}function Ao(n,t,e,o,i,a){var A,l=1&t,s=2&t,d=4&t;if(e&&(A=i?e(n,o,i,a):e(n)),A!==r)return A;if(!tA(n))return n;var c=Ga(n);if(c){if(A=function(n){var t=n.length,e=new n.constructor(t);return t&&"string"==typeof n[0]&&zn.call(n,"index")&&(e.index=n.index,e.input=n.input),e}(n),!l)return Ir(n,A)}else{var p=ui(n),u=p==B||p==v;if(Ka(n))return wr(n,l);if(p==x||p==f||u&&!i){if(A=s||u?{}:fi(n),!l)return s?function(n,t){return _r(n,pi(n),t)}(n,function(n,t){return n&&_r(t,DA(t),n)}(A,n)):function(n,t){return _r(n,ci(n),t)}(n,oo(A,n))}else{if(!nt[p])return i?n:{};A=function(n,t,e){var o,r=n.constructor;switch(t){case J:return $r(n);case b:case C:return new r(+n);case P:return function(n,t){var e=t?$r(n.buffer):n.buffer;return new n.constructor(e,n.byteOffset,n.byteLength)}(n,e);case D:case z:case S:case F:case U:case M:case q:case j:case T:return xr(n,e);case w:return new r;case $:case I:return new r(n);case k:return function(n){var t=new n.constructor(n.source,un.exec(n));return t.lastIndex=n.lastIndex,t}(n);case E:return new r;case _:return o=n,Ue?yn(Ue.call(o)):{}}}(n,p,l)}}a||(a=new Ye);var m=a.get(n);if(m)return m;a.set(n,A),AA(n)?n.forEach((function(o){A.add(Ao(o,t,e,o,n,a))})):oA(n)&&n.forEach((function(o,r){A.set(r,Ao(o,t,e,r,n,a))}));var g=c?r:(d?s?oi:ei:s?DA:PA)(n);return Bt(g||n,(function(o,r){g&&(o=n[r=o]),no(A,r,Ao(o,t,e,r,n,a))})),A}function lo(n,t,e){var o=e.length;if(null==n)return!o;for(n=yn(n);o--;){var i=e[o],a=t[i],A=n[i];if(A===r&&!(i in n)||!a(A))return!1}return!0}function so(n,t,e){if("function"!=typeof n)throw new In(i);return Oi((function(){n.apply(r,e)}),t)}function co(n,t,e,o){var r=-1,i=xt,a=!0,A=n.length,l=[],s=t.length;if(!A)return l;e&&(t=kt(t,Lt(e))),o?(i=yt,a=!1):t.length>=200&&(i=Rt,a=!1,t=new Qe(t));n:for(;++r<A;){var d=n[r],c=null==e?d:e(d);if(d=o||0!==d?d:0,a&&c==c){for(var p=s;p--;)if(t[p]===c)continue n;l.push(d)}else i(t,c,o)||l.push(d)}return l}qe.templateSettings={escape:K,evaluate:H,interpolate:V,variable:"",imports:{_:qe}},qe.prototype=Te.prototype,qe.prototype.constructor=qe,Ne.prototype=je(Te.prototype),Ne.prototype.constructor=Ne,We.prototype=je(Te.prototype),We.prototype.constructor=We,Le.prototype.clear=function(){this.__data__=Ie?Ie(null):{},this.size=0},Le.prototype.delete=function(n){var t=this.has(n)&&delete this.__data__[n];return this.size-=t?1:0,t},Le.prototype.get=function(n){var t=this.__data__;if(Ie){var e=t[n];return e===a?r:e}return zn.call(t,n)?t[n]:r},Le.prototype.has=function(n){var t=this.__data__;return Ie?t[n]!==r:zn.call(t,n)},Le.prototype.set=function(n,t){var e=this.__data__;return this.size+=this.has(n)?0:1,e[n]=Ie&&t===r?a:t,this},Ge.prototype.clear=function(){this.__data__=[],this.size=0},Ge.prototype.delete=function(n){var t=this.__data__,e=to(t,n);return!(e<0||(e==t.length-1?t.pop():rt.call(t,e,1),--this.size,0))},Ge.prototype.get=function(n){var t=this.__data__,e=to(t,n);return e<0?r:t[e][1]},Ge.prototype.has=function(n){return to(this.__data__,n)>-1},Ge.prototype.set=function(n,t){var e=this.__data__,o=to(e,n);return o<0?(++this.size,e.push([n,t])):e[o][1]=t,this},Re.prototype.clear=function(){this.size=0,this.__data__={hash:new Le,map:new(xe||Ge),string:new Le}},Re.prototype.delete=function(n){var t=li(this,n).delete(n);return this.size-=t?1:0,t},Re.prototype.get=function(n){return li(this,n).get(n)},Re.prototype.has=function(n){return li(this,n).has(n)},Re.prototype.set=function(n,t){var e=li(this,n),o=e.size;return e.set(n,t),this.size+=e.size==o?0:1,this},Qe.prototype.add=Qe.prototype.push=function(n){return this.__data__.set(n,a),this},Qe.prototype.has=function(n){return this.__data__.has(n)},Ye.prototype.clear=function(){this.__data__=new Ge,this.size=0},Ye.prototype.delete=function(n){var t=this.__data__,e=t.delete(n);return this.size=t.size,e},Ye.prototype.get=function(n){return this.__data__.get(n)},Ye.prototype.has=function(n){return this.__data__.has(n)},Ye.prototype.set=function(n,t){var e=this.__data__;if(e instanceof Ge){var o=e.__data__;if(!xe||o.length<199)return o.push([n,t]),this.size=++e.size,this;e=this.__data__=new Re(o)}return e.set(n,t),this.size=e.size,this};var po=Pr(Bo),uo=Pr(vo,!0);function mo(n,t){var e=!0;return po(n,(function(n,o,r){return e=!!t(n,o,r)})),e}function fo(n,t,e){for(var o=-1,i=n.length;++o<i;){var a=n[o],A=t(a);if(null!=A&&(l===r?A==A&&!sA(A):e(A,l)))var l=A,s=a}return s}function go(n,t){var e=[];return po(n,(function(n,o,r){t(n,o,r)&&e.push(n)})),e}function bo(n,t,e,o,r){var i=-1,a=n.length;for(e||(e=gi),r||(r=[]);++i<a;){var A=n[i];t>0&&e(A)?t>1?bo(A,t-1,e,o,r):Et(r,A):o||(r[r.length]=A)}return r}var Co=Dr(),ho=Dr(!0);function Bo(n,t){return n&&Co(n,t,PA)}function vo(n,t){return n&&ho(n,t,PA)}function wo(n,t){return $t(t,(function(t){return Xa(n[t])}))}function $o(n,t){for(var e=0,o=(t=Cr(t,n)).length;null!=n&&e<o;)n=n[Mi(t[e++])];return e&&e==o?n:r}function xo(n,t,e){var o=t(n);return Ga(n)?o:Et(o,e(n))}function yo(n){return null==n?n===r?"[object Undefined]":"[object Null]":lt&&lt in yn(n)?function(n){var t=zn.call(n,lt),e=n[lt];try{n[lt]=r;var o=!0}catch(n){}var i=Un.call(n);return o&&(t?n[lt]=e:delete n[lt]),i}(n):function(n){return Un.call(n)}(n)}function ko(n,t){return n>t}function Eo(n,t){return null!=n&&zn.call(n,t)}function Io(n,t){return null!=n&&t in yn(n)}function _o(n,t,e){for(var i=e?yt:xt,a=n[0].length,A=n.length,l=A,s=o(A),d=1/0,c=[];l--;){var p=n[l];l&&t&&(p=kt(p,Lt(t))),d=Ce(p.length,d),s[l]=!e&&(t||a>=120&&p.length>=120)?new Qe(l&&p):r}p=n[0];var u=-1,m=s[0];n:for(;++u<a&&c.length<d;){var f=p[u],g=t?t(f):f;if(f=e||0!==f?f:0,!(m?Rt(m,g):i(c,g,e))){for(l=A;--l;){var b=s[l];if(!(b?Rt(b,g):i(n[l],g,e)))continue n}m&&m.push(g),c.push(f)}}return c}function Oo(n,t,e){var o=null==(n=ki(n,t=Cr(t,n)))?n:n[Mi(Vi(t))];return null==o?r:Ct(o,n,e)}function Jo(n){return eA(n)&&yo(n)==f}function Po(n,t,e,o,i){return n===t||(null==n||null==t||!eA(n)&&!eA(t)?n!=n&&t!=t:function(n,t,e,o,i,a){var A=Ga(n),l=Ga(t),s=A?g:ui(n),d=l?g:ui(t),c=(s=s==f?x:s)==x,p=(d=d==f?x:d)==x,u=s==d;if(u&&Ka(n)){if(!Ka(t))return!1;A=!0,c=!1}if(u&&!c)return a||(a=new Ye),A||dA(n)?ni(n,t,e,o,i,a):function(n,t,e,o,r,i,a){switch(e){case P:if(n.byteLength!=t.byteLength||n.byteOffset!=t.byteOffset)return!1;n=n.buffer,t=t.buffer;case J:return!(n.byteLength!=t.byteLength||!i(new Wn(n),new Wn(t)));case b:case C:case $:return Ta(+n,+t);case h:return n.name==t.name&&n.message==t.message;case k:case I:return n==t+"";case w:var A=ne;case E:var l=1&o;if(A||(A=oe),n.size!=t.size&&!l)return!1;var s=a.get(n);if(s)return s==t;o|=2,a.set(n,t);var d=ni(A(n),A(t),o,r,i,a);return a.delete(n),d;case _:if(Ue)return Ue.call(n)==Ue.call(t)}return!1}(n,t,s,e,o,i,a);if(!(1&e)){var m=c&&zn.call(n,"__wrapped__"),B=p&&zn.call(t,"__wrapped__");if(m||B){var v=m?n.value():n,y=B?t.value():t;return a||(a=new Ye),i(v,y,e,o,a)}}return!!u&&(a||(a=new Ye),function(n,t,e,o,i,a){var A=1&e,l=ei(n),s=l.length;if(s!=ei(t).length&&!A)return!1;for(var d=s;d--;){var c=l[d];if(!(A?c in t:zn.call(t,c)))return!1}var p=a.get(n),u=a.get(t);if(p&&u)return p==t&&u==n;var m=!0;a.set(n,t),a.set(t,n);for(var f=A;++d<s;){var g=n[c=l[d]],b=t[c];if(o)var C=A?o(b,g,c,t,n,a):o(g,b,c,n,t,a);if(!(C===r?g===b||i(g,b,e,o,a):C)){m=!1;break}f||(f="constructor"==c)}if(m&&!f){var h=n.constructor,B=t.constructor;h==B||!("constructor"in n)||!("constructor"in t)||"function"==typeof h&&h instanceof h&&"function"==typeof B&&B instanceof B||(m=!1)}return a.delete(n),a.delete(t),m}(n,t,e,o,i,a))}(n,t,e,o,Po,i))}function Do(n,t,e,o){var i=e.length,a=i,A=!o;if(null==n)return!a;for(n=yn(n);i--;){var l=e[i];if(A&&l[2]?l[1]!==n[l[0]]:!(l[0]in n))return!1}for(;++i<a;){var s=(l=e[i])[0],d=n[s],c=l[1];if(A&&l[2]){if(d===r&&!(s in n))return!1}else{var p=new Ye;if(o)var u=o(d,c,s,n,t,p);if(!(u===r?Po(c,d,3,o,p):u))return!1}}return!0}function zo(n){return!(!tA(n)||(t=n,Fn&&Fn in t))&&(Xa(n)?jn:gn).test(qi(n));var t}function So(n){return"function"==typeof n?n:null==n?rl:"object"==typeof n?Ga(n)?jo(n[0],n[1]):qo(n):ul(n)}function Fo(n){if(!wi(n))return ge(n);var t=[];for(var e in yn(n))zn.call(n,e)&&"constructor"!=e&&t.push(e);return t}function Uo(n,t){return n<t}function Mo(n,t){var e=-1,r=Qa(n)?o(n.length):[];return po(n,(function(n,o,i){r[++e]=t(n,o,i)})),r}function qo(n){var t=si(n);return 1==t.length&&t[0][2]?xi(t[0][0],t[0][1]):function(e){return e===n||Do(e,n,t)}}function jo(n,t){return hi(n)&&$i(t)?xi(Mi(n),t):function(e){var o=EA(e,n);return o===r&&o===t?IA(e,n):Po(t,o,3)}}function To(n,t,e,o,i){n!==t&&Co(t,(function(a,A){if(i||(i=new Ye),tA(a))!function(n,t,e,o,i,a,A){var l=Ii(n,e),s=Ii(t,e),d=A.get(s);if(d)Ze(n,e,d);else{var c=a?a(l,s,e+"",n,t,A):r,p=c===r;if(p){var u=Ga(s),m=!u&&Ka(s),f=!u&&!m&&dA(s);c=s,u||m||f?Ga(l)?c=l:Ya(l)?c=Ir(l):m?(p=!1,c=wr(s,!0)):f?(p=!1,c=xr(s,!0)):c=[]:iA(s)||La(s)?(c=l,La(l)?c=CA(l):tA(l)&&!Xa(l)||(c=fi(s))):p=!1}p&&(A.set(s,c),i(c,s,o,a,A),A.delete(s)),Ze(n,e,c)}}(n,t,A,e,To,o,i);else{var l=o?o(Ii(n,A),a,A+"",n,t,i):r;l===r&&(l=a),Ze(n,A,l)}}),DA)}function No(n,t){var e=n.length;if(e)return bi(t+=t<0?e:0,e)?n[t]:r}function Wo(n,t,e){t=t.length?kt(t,(function(n){return Ga(n)?function(t){return $o(t,1===n.length?n[0]:n)}:n})):[rl];var o=-1;t=kt(t,Lt(Ai()));var r=Mo(n,(function(n,e,r){var i=kt(t,(function(t){return t(n)}));return{criteria:i,index:++o,value:n}}));return function(n,t){var o=n.length;for(n.sort((function(n,t){return function(n,t,e){for(var o=-1,r=n.criteria,i=t.criteria,a=r.length,A=e.length;++o<a;){var l=yr(r[o],i[o]);if(l)return o>=A?l:l*("desc"==e[o]?-1:1)}return n.index-t.index}(n,t,e)}));o--;)n[o]=n[o].value;return n}(r)}function Lo(n,t,e){for(var o=-1,r=t.length,i={};++o<r;){var a=t[o],A=$o(n,a);e(A,a)&&Xo(i,Cr(a,n),A)}return i}function Go(n,t,e,o){var r=o?St:zt,i=-1,a=t.length,A=n;for(n===t&&(t=Ir(t)),e&&(A=kt(n,Lt(e)));++i<a;)for(var l=0,s=t[i],d=e?e(s):s;(l=r(A,d,l,o))>-1;)A!==n&&rt.call(A,l,1),rt.call(n,l,1);return n}function Ro(n,t){for(var e=n?t.length:0,o=e-1;e--;){var r=t[e];if(e==o||r!==i){var i=r;bi(r)?rt.call(n,r,1):dr(n,r)}}return n}function Qo(n,t){return n+ce(ve()*(t-n+1))}function Yo(n,t){var e="";if(!n||t<1||t>c)return e;do{t%2&&(e+=n),(t=ce(t/2))&&(n+=n)}while(t);return e}function Ko(n,t){return Ji(yi(n,t,rl),n+"")}function Ho(n){return He(TA(n))}function Vo(n,t){var e=TA(n);return zi(e,ao(t,0,e.length))}function Xo(n,t,e,o){if(!tA(n))return n;for(var i=-1,a=(t=Cr(t,n)).length,A=a-1,l=n;null!=l&&++i<a;){var s=Mi(t[i]),d=e;if("__proto__"===s||"constructor"===s||"prototype"===s)return n;if(i!=A){var c=l[s];(d=o?o(c,s,l):r)===r&&(d=tA(c)?c:bi(t[i+1])?[]:{})}no(l,s,d),l=l[s]}return n}var Zo=_e?function(n,t){return _e.set(n,t),n}:rl,nr=dt?function(n,t){return dt(n,"toString",{configurable:!0,enumerable:!1,value:tl(t),writable:!0})}:rl;function tr(n){return zi(TA(n))}function er(n,t,e){var r=-1,i=n.length;t<0&&(t=-t>i?0:i+t),(e=e>i?i:e)<0&&(e+=i),i=t>e?0:e-t>>>0,t>>>=0;for(var a=o(i);++r<i;)a[r]=n[r+t];return a}function or(n,t){var e;return po(n,(function(n,o,r){return!(e=t(n,o,r))})),!!e}function rr(n,t,e){var o=0,r=null==n?o:n.length;if("number"==typeof t&&t==t&&r<=2147483647){for(;o<r;){var i=o+r>>>1,a=n[i];null!==a&&!sA(a)&&(e?a<=t:a<t)?o=i+1:r=i}return r}return ir(n,t,rl,e)}function ir(n,t,e,o){var i=0,a=null==n?0:n.length;if(0===a)return 0;for(var A=(t=e(t))!=t,l=null===t,s=sA(t),d=t===r;i<a;){var c=ce((i+a)/2),p=e(n[c]),u=p!==r,m=null===p,f=p==p,g=sA(p);if(A)var b=o||f;else b=d?f&&(o||u):l?f&&u&&(o||!m):s?f&&u&&!m&&(o||!g):!m&&!g&&(o?p<=t:p<t);b?i=c+1:a=c}return Ce(a,4294967294)}function ar(n,t){for(var e=-1,o=n.length,r=0,i=[];++e<o;){var a=n[e],A=t?t(a):a;if(!e||!Ta(A,l)){var l=A;i[r++]=0===a?0:a}}return i}function Ar(n){return"number"==typeof n?n:sA(n)?p:+n}function lr(n){if("string"==typeof n)return n;if(Ga(n))return kt(n,lr)+"";if(sA(n))return Me?Me.call(n):"";var t=n+"";return"0"==t&&1/n==-1/0?"-0":t}function sr(n,t,e){var o=-1,r=xt,i=n.length,a=!0,A=[],l=A;if(e)a=!1,r=yt;else if(i>=200){var s=t?null:Yr(n);if(s)return oe(s);a=!1,r=Rt,l=new Qe}else l=t?[]:A;n:for(;++o<i;){var d=n[o],c=t?t(d):d;if(d=e||0!==d?d:0,a&&c==c){for(var p=l.length;p--;)if(l[p]===c)continue n;t&&l.push(c),A.push(d)}else r(l,c,e)||(l!==A&&l.push(c),A.push(d))}return A}function dr(n,t){return null==(n=ki(n,t=Cr(t,n)))||delete n[Mi(Vi(t))]}function cr(n,t,e,o){return Xo(n,t,e($o(n,t)),o)}function pr(n,t,e,o){for(var r=n.length,i=o?r:-1;(o?i--:++i<r)&&t(n[i],i,n););return e?er(n,o?0:i,o?i+1:r):er(n,o?i+1:0,o?r:i)}function ur(n,t){var e=n;return e instanceof We&&(e=e.value()),It(t,(function(n,t){return t.func.apply(t.thisArg,Et([n],t.args))}),e)}function mr(n,t,e){var r=n.length;if(r<2)return r?sr(n[0]):[];for(var i=-1,a=o(r);++i<r;)for(var A=n[i],l=-1;++l<r;)l!=i&&(a[i]=co(a[i]||A,n[l],t,e));return sr(bo(a,1),t,e)}function fr(n,t,e){for(var o=-1,i=n.length,a=t.length,A={};++o<i;){var l=o<a?t[o]:r;e(A,n[o],l)}return A}function gr(n){return Ya(n)?n:[]}function br(n){return"function"==typeof n?n:rl}function Cr(n,t){return Ga(n)?n:hi(n,t)?[n]:Ui(hA(n))}var hr=Ko;function Br(n,t,e){var o=n.length;return e=e===r?o:e,!t&&e>=o?n:er(n,t,e)}var vr=ct||function(n){return at.clearTimeout(n)};function wr(n,t){if(t)return n.slice();var e=n.length,o=Ln?Ln(e):new n.constructor(e);return n.copy(o),o}function $r(n){var t=new n.constructor(n.byteLength);return new Wn(t).set(new Wn(n)),t}function xr(n,t){var e=t?$r(n.buffer):n.buffer;return new n.constructor(e,n.byteOffset,n.length)}function yr(n,t){if(n!==t){var e=n!==r,o=null===n,i=n==n,a=sA(n),A=t!==r,l=null===t,s=t==t,d=sA(t);if(!l&&!d&&!a&&n>t||a&&A&&s&&!l&&!d||o&&A&&s||!e&&s||!i)return 1;if(!o&&!a&&!d&&n<t||d&&e&&i&&!o&&!a||l&&e&&i||!A&&i||!s)return-1}return 0}function kr(n,t,e,r){for(var i=-1,a=n.length,A=e.length,l=-1,s=t.length,d=be(a-A,0),c=o(s+d),p=!r;++l<s;)c[l]=t[l];for(;++i<A;)(p||i<a)&&(c[e[i]]=n[i]);for(;d--;)c[l++]=n[i++];return c}function Er(n,t,e,r){for(var i=-1,a=n.length,A=-1,l=e.length,s=-1,d=t.length,c=be(a-l,0),p=o(c+d),u=!r;++i<c;)p[i]=n[i];for(var m=i;++s<d;)p[m+s]=t[s];for(;++A<l;)(u||i<a)&&(p[m+e[A]]=n[i++]);return p}function Ir(n,t){var e=-1,r=n.length;for(t||(t=o(r));++e<r;)t[e]=n[e];return t}function _r(n,t,e,o){var i=!e;e||(e={});for(var a=-1,A=t.length;++a<A;){var l=t[a],s=o?o(e[l],n[l],l,e,n):r;s===r&&(s=n[l]),i?ro(e,l,s):no(e,l,s)}return e}function Or(n,t){return function(e,o){var r=Ga(e)?ht:eo,i=t?t():{};return r(e,n,Ai(o,2),i)}}function Jr(n){return Ko((function(t,e){var o=-1,i=e.length,a=i>1?e[i-1]:r,A=i>2?e[2]:r;for(a=n.length>3&&"function"==typeof a?(i--,a):r,A&&Ci(e[0],e[1],A)&&(a=i<3?r:a,i=1),t=yn(t);++o<i;){var l=e[o];l&&n(t,l,o,a)}return t}))}function Pr(n,t){return function(e,o){if(null==e)return e;if(!Qa(e))return n(e,o);for(var r=e.length,i=t?r:-1,a=yn(e);(t?i--:++i<r)&&!1!==o(a[i],i,a););return e}}function Dr(n){return function(t,e,o){for(var r=-1,i=yn(t),a=o(t),A=a.length;A--;){var l=a[n?A:++r];if(!1===e(i[l],l,i))break}return t}}function zr(n){return function(t){var e=Zt(t=hA(t))?ae(t):r,o=e?e[0]:t.charAt(0),i=e?Br(e,1).join(""):t.slice(1);return o[n]()+i}}function Sr(n){return function(t){return It(XA(LA(t).replace(Gn,"")),n,"")}}function Fr(n){return function(){var t=arguments;switch(t.length){case 0:return new n;case 1:return new n(t[0]);case 2:return new n(t[0],t[1]);case 3:return new n(t[0],t[1],t[2]);case 4:return new n(t[0],t[1],t[2],t[3]);case 5:return new n(t[0],t[1],t[2],t[3],t[4]);case 6:return new n(t[0],t[1],t[2],t[3],t[4],t[5]);case 7:return new n(t[0],t[1],t[2],t[3],t[4],t[5],t[6])}var e=je(n.prototype),o=n.apply(e,t);return tA(o)?o:e}}function Ur(n){return function(t,e,o){var i=yn(t);if(!Qa(t)){var a=Ai(e,3);t=PA(t),e=function(n){return a(i[n],n,i)}}var A=n(t,e,o);return A>-1?i[a?t[A]:A]:r}}function Mr(n){return ti((function(t){var e=t.length,o=e,a=Ne.prototype.thru;for(n&&t.reverse();o--;){var A=t[o];if("function"!=typeof A)throw new In(i);if(a&&!l&&"wrapper"==ii(A))var l=new Ne([],!0)}for(o=l?o:e;++o<e;){var s=ii(A=t[o]),d="wrapper"==s?ri(A):r;l=d&&Bi(d[0])&&424==d[1]&&!d[4].length&&1==d[9]?l[ii(d[0])].apply(l,d[3]):1==A.length&&Bi(A)?l[s]():l.thru(A)}return function(){var n=arguments,o=n[0];if(l&&1==n.length&&Ga(o))return l.plant(o).value();for(var r=0,i=e?t[r].apply(this,n):o;++r<e;)i=t[r].call(this,i);return i}}))}function qr(n,t,e,i,a,A,l,d,c,p){var u=t&s,m=1&t,f=2&t,g=24&t,b=512&t,C=f?r:Fr(n);return function r(){for(var s=arguments.length,h=o(s),B=s;B--;)h[B]=arguments[B];if(g)var v=ai(r),w=Kt(h,v);if(i&&(h=kr(h,i,a,g)),A&&(h=Er(h,A,l,g)),s-=w,g&&s<p){var $=ee(h,v);return Rr(n,t,qr,r.placeholder,e,h,$,d,c,p-s)}var x=m?e:this,y=f?x[n]:n;return s=h.length,d?h=Ei(h,d):b&&s>1&&h.reverse(),u&&c<s&&(h.length=c),this&&this!==at&&this instanceof r&&(y=C||Fr(y)),y.apply(x,h)}}function jr(n,t){return function(e,o){return function(n,t,e,o){return Bo(n,(function(n,r,i){t(o,e(n),r,i)})),o}(e,n,t(o),{})}}function Tr(n,t){return function(e,o){var i;if(e===r&&o===r)return t;if(e!==r&&(i=e),o!==r){if(i===r)return o;"string"==typeof e||"string"==typeof o?(e=lr(e),o=lr(o)):(e=Ar(e),o=Ar(o)),i=n(e,o)}return i}}function Nr(n){return ti((function(t){return t=kt(t,Lt(Ai())),Ko((function(e){var o=this;return n(t,(function(n){return Ct(n,o,e)}))}))}))}function Wr(n,t){var e=(t=t===r?" ":lr(t)).length;if(e<2)return e?Yo(t,n):t;var o=Yo(t,de(n/ie(t)));return Zt(t)?Br(ae(o),0,n).join(""):o.slice(0,n)}function Lr(n){return function(t,e,i){return i&&"number"!=typeof i&&Ci(t,e,i)&&(e=i=r),t=mA(t),e===r?(e=t,t=0):e=mA(e),function(n,t,e,r){for(var i=-1,a=be(de((t-n)/(e||1)),0),A=o(a);a--;)A[r?a:++i]=n,n+=e;return A}(t,e,i=i===r?t<e?1:-1:mA(i),n)}}function Gr(n){return function(t,e){return"string"==typeof t&&"string"==typeof e||(t=bA(t),e=bA(e)),n(t,e)}}function Rr(n,t,e,o,i,a,A,s,d,c){var p=8&t;t|=p?l:64,4&(t&=~(p?64:l))||(t&=-4);var u=[n,t,i,p?a:r,p?A:r,p?r:a,p?r:A,s,d,c],m=e.apply(r,u);return Bi(n)&&_i(m,u),m.placeholder=o,Pi(m,n,t)}function Qr(n){var t=xn[n];return function(n,e){if(n=bA(n),(e=null==e?0:Ce(fA(e),292))&&me(n)){var o=(hA(n)+"e").split("e");return+((o=(hA(t(o[0]+"e"+(+o[1]+e)))+"e").split("e"))[0]+"e"+(+o[1]-e))}return t(n)}}var Yr=ke&&1/oe(new ke([,-0]))[1]==d?function(n){return new ke(n)}:sl;function Kr(n){return function(t){var e=ui(t);return e==w?ne(t):e==E?re(t):function(n,t){return kt(t,(function(t){return[t,n[t]]}))}(t,n(t))}}function Hr(n,t,e,a,d,c,p,u){var m=2&t;if(!m&&"function"!=typeof n)throw new In(i);var f=a?a.length:0;if(f||(t&=-97,a=d=r),p=p===r?p:be(fA(p),0),u=u===r?u:fA(u),f-=d?d.length:0,64&t){var g=a,b=d;a=d=r}var C=m?r:ri(n),h=[n,t,e,a,d,g,b,c,p,u];if(C&&function(n,t){var e=n[1],o=t[1],r=e|o,i=r<131,a=o==s&&8==e||o==s&&256==e&&n[7].length<=t[8]||384==o&&t[7].length<=t[8]&&8==e;if(!i&&!a)return n;1&o&&(n[2]=t[2],r|=1&e?0:4);var l=t[3];if(l){var d=n[3];n[3]=d?kr(d,l,t[4]):l,n[4]=d?ee(n[3],A):t[4]}(l=t[5])&&(d=n[5],n[5]=d?Er(d,l,t[6]):l,n[6]=d?ee(n[5],A):t[6]),(l=t[7])&&(n[7]=l),o&s&&(n[8]=null==n[8]?t[8]:Ce(n[8],t[8])),null==n[9]&&(n[9]=t[9]),n[0]=t[0],n[1]=r}(h,C),n=h[0],t=h[1],e=h[2],a=h[3],d=h[4],!(u=h[9]=h[9]===r?m?0:n.length:be(h[9]-f,0))&&24&t&&(t&=-25),t&&1!=t)B=8==t||16==t?function(n,t,e){var i=Fr(n);return function a(){for(var A=arguments.length,l=o(A),s=A,d=ai(a);s--;)l[s]=arguments[s];var c=A<3&&l[0]!==d&&l[A-1]!==d?[]:ee(l,d);return(A-=c.length)<e?Rr(n,t,qr,a.placeholder,r,l,c,r,r,e-A):Ct(this&&this!==at&&this instanceof a?i:n,this,l)}}(n,t,u):t!=l&&33!=t||d.length?qr.apply(r,h):function(n,t,e,r){var i=1&t,a=Fr(n);return function t(){for(var A=-1,l=arguments.length,s=-1,d=r.length,c=o(d+l),p=this&&this!==at&&this instanceof t?a:n;++s<d;)c[s]=r[s];for(;l--;)c[s++]=arguments[++A];return Ct(p,i?e:this,c)}}(n,t,e,a);else var B=function(n,t,e){var o=1&t,r=Fr(n);return function t(){return(this&&this!==at&&this instanceof t?r:n).apply(o?e:this,arguments)}}(n,t,e);return Pi((C?Zo:_i)(B,h),n,t)}function Vr(n,t,e,o){return n===r||Ta(n,Jn[e])&&!zn.call(o,e)?t:n}function Xr(n,t,e,o,i,a){return tA(n)&&tA(t)&&(a.set(t,n),To(n,t,r,Xr,a),a.delete(t)),n}function Zr(n){return iA(n)?r:n}function ni(n,t,e,o,i,a){var A=1&e,l=n.length,s=t.length;if(l!=s&&!(A&&s>l))return!1;var d=a.get(n),c=a.get(t);if(d&&c)return d==t&&c==n;var p=-1,u=!0,m=2&e?new Qe:r;for(a.set(n,t),a.set(t,n);++p<l;){var f=n[p],g=t[p];if(o)var b=A?o(g,f,p,t,n,a):o(f,g,p,n,t,a);if(b!==r){if(b)continue;u=!1;break}if(m){if(!Ot(t,(function(n,t){if(!Rt(m,t)&&(f===n||i(f,n,e,o,a)))return m.push(t)}))){u=!1;break}}else if(f!==g&&!i(f,g,e,o,a)){u=!1;break}}return a.delete(n),a.delete(t),u}function ti(n){return Ji(yi(n,r,Ri),n+"")}function ei(n){return xo(n,PA,ci)}function oi(n){return xo(n,DA,pi)}var ri=_e?function(n){return _e.get(n)}:sl;function ii(n){for(var t=n.name+"",e=Oe[t],o=zn.call(Oe,t)?e.length:0;o--;){var r=e[o],i=r.func;if(null==i||i==n)return r.name}return t}function ai(n){return(zn.call(qe,"placeholder")?qe:n).placeholder}function Ai(){var n=qe.iteratee||il;return n=n===il?So:n,arguments.length?n(arguments[0],arguments[1]):n}function li(n,t){var e,o,r=n.__data__;return("string"==(o=typeof(e=t))||"number"==o||"symbol"==o||"boolean"==o?"__proto__"!==e:null===e)?r["string"==typeof t?"string":"hash"]:r.map}function si(n){for(var t=PA(n),e=t.length;e--;){var o=t[e],r=n[o];t[e]=[o,r,$i(r)]}return t}function di(n,t){var e=function(n,t){return null==n?r:n[t]}(n,t);return zo(e)?e:r}var ci=pe?function(n){return null==n?[]:(n=yn(n),$t(pe(n),(function(t){return tt.call(n,t)})))}:gl,pi=pe?function(n){for(var t=[];n;)Et(t,ci(n)),n=Qn(n);return t}:gl,ui=yo;function mi(n,t,e){for(var o=-1,r=(t=Cr(t,n)).length,i=!1;++o<r;){var a=Mi(t[o]);if(!(i=null!=n&&e(n,a)))break;n=n[a]}return i||++o!=r?i:!!(r=null==n?0:n.length)&&nA(r)&&bi(a,r)&&(Ga(n)||La(n))}function fi(n){return"function"!=typeof n.constructor||wi(n)?{}:je(Qn(n))}function gi(n){return Ga(n)||La(n)||!!(it&&n&&n[it])}function bi(n,t){var e=typeof n;return!!(t=null==t?c:t)&&("number"==e||"symbol"!=e&&Cn.test(n))&&n>-1&&n%1==0&&n<t}function Ci(n,t,e){if(!tA(e))return!1;var o=typeof t;return!!("number"==o?Qa(e)&&bi(t,e.length):"string"==o&&t in e)&&Ta(e[t],n)}function hi(n,t){if(Ga(n))return!1;var e=typeof n;return!("number"!=e&&"symbol"!=e&&"boolean"!=e&&null!=n&&!sA(n))||Z.test(n)||!X.test(n)||null!=t&&n in yn(t)}function Bi(n){var t=ii(n),e=qe[t];if("function"!=typeof e||!(t in We.prototype))return!1;if(n===e)return!0;var o=ri(e);return!!o&&n===o[0]}($e&&ui(new $e(new ArrayBuffer(1)))!=P||xe&&ui(new xe)!=w||ye&&ui(ye.resolve())!=y||ke&&ui(new ke)!=E||Ee&&ui(new Ee)!=O)&&(ui=function(n){var t=yo(n),e=t==x?n.constructor:r,o=e?qi(e):"";if(o)switch(o){case Je:return P;case Pe:return w;case De:return y;case ze:return E;case Se:return O}return t});var vi=Pn?Xa:bl;function wi(n){var t=n&&n.constructor;return n===("function"==typeof t&&t.prototype||Jn)}function $i(n){return n==n&&!tA(n)}function xi(n,t){return function(e){return null!=e&&e[n]===t&&(t!==r||n in yn(e))}}function yi(n,t,e){return t=be(t===r?n.length-1:t,0),function(){for(var r=arguments,i=-1,a=be(r.length-t,0),A=o(a);++i<a;)A[i]=r[t+i];i=-1;for(var l=o(t+1);++i<t;)l[i]=r[i];return l[t]=e(A),Ct(n,this,l)}}function ki(n,t){return t.length<2?n:$o(n,er(t,0,-1))}function Ei(n,t){for(var e=n.length,o=Ce(t.length,e),i=Ir(n);o--;){var a=t[o];n[o]=bi(a,e)?i[a]:r}return n}function Ii(n,t){if(("constructor"!==t||"function"!=typeof n[t])&&"__proto__"!=t)return n[t]}var _i=Di(Zo),Oi=qt||function(n,t){return at.setTimeout(n,t)},Ji=Di(nr);function Pi(n,t,e){var o=t+"";return Ji(n,function(n,t){var e=t.length;if(!e)return n;var o=e-1;return t[o]=(e>1?"& ":"")+t[o],t=t.join(e>2?", ":" "),n.replace(an,"{\n/* [wrapped with "+t+"] */\n")}(o,function(n,t){return Bt(m,(function(e){var o="_."+e[0];t&e[1]&&!xt(n,o)&&n.push(o)})),n.sort()}(function(n){var t=n.match(An);return t?t[1].split(ln):[]}(o),e)))}function Di(n){var t=0,e=0;return function(){var o=he(),i=16-(o-e);if(e=o,i>0){if(++t>=800)return arguments[0]}else t=0;return n.apply(r,arguments)}}function zi(n,t){var e=-1,o=n.length,i=o-1;for(t=t===r?o:t;++e<t;){var a=Qo(e,i),A=n[a];n[a]=n[e],n[e]=A}return n.length=t,n}var Si,Fi,Ui=(Si=Sa((function(n){var t=[];return 46===n.charCodeAt(0)&&t.push(""),n.replace(nn,(function(n,e,o,r){t.push(o?r.replace(cn,"$1"):e||n)})),t}),(function(n){return 500===Fi.size&&Fi.clear(),n})),Fi=Si.cache,Si);function Mi(n){if("string"==typeof n||sA(n))return n;var t=n+"";return"0"==t&&1/n==-1/0?"-0":t}function qi(n){if(null!=n){try{return Dn.call(n)}catch(n){}try{return n+""}catch(n){}}return""}function ji(n){if(n instanceof We)return n.clone();var t=new Ne(n.__wrapped__,n.__chain__);return t.__actions__=Ir(n.__actions__),t.__index__=n.__index__,t.__values__=n.__values__,t}var Ti=Ko((function(n,t){return Ya(n)?co(n,bo(t,1,Ya,!0)):[]})),Ni=Ko((function(n,t){var e=Vi(t);return Ya(e)&&(e=r),Ya(n)?co(n,bo(t,1,Ya,!0),Ai(e,2)):[]})),Wi=Ko((function(n,t){var e=Vi(t);return Ya(e)&&(e=r),Ya(n)?co(n,bo(t,1,Ya,!0),r,e):[]}));function Li(n,t,e){var o=null==n?0:n.length;if(!o)return-1;var r=null==e?0:fA(e);return r<0&&(r=be(o+r,0)),Dt(n,Ai(t,3),r)}function Gi(n,t,e){var o=null==n?0:n.length;if(!o)return-1;var i=o-1;return e!==r&&(i=fA(e),i=e<0?be(o+i,0):Ce(i,o-1)),Dt(n,Ai(t,3),i,!0)}function Ri(n){return null!=n&&n.length?bo(n,1):[]}function Qi(n){return n&&n.length?n[0]:r}var Yi=Ko((function(n){var t=kt(n,gr);return t.length&&t[0]===n[0]?_o(t):[]})),Ki=Ko((function(n){var t=Vi(n),e=kt(n,gr);return t===Vi(e)?t=r:e.pop(),e.length&&e[0]===n[0]?_o(e,Ai(t,2)):[]})),Hi=Ko((function(n){var t=Vi(n),e=kt(n,gr);return(t="function"==typeof t?t:r)&&e.pop(),e.length&&e[0]===n[0]?_o(e,r,t):[]}));function Vi(n){var t=null==n?0:n.length;return t?n[t-1]:r}var Xi=Ko(Zi);function Zi(n,t){return n&&n.length&&t&&t.length?Go(n,t):n}var na=ti((function(n,t){var e=null==n?0:n.length,o=io(n,t);return Ro(n,kt(t,(function(n){return bi(n,e)?+n:n})).sort(yr)),o}));function ta(n){return null==n?n:we.call(n)}var ea=Ko((function(n){return sr(bo(n,1,Ya,!0))})),oa=Ko((function(n){var t=Vi(n);return Ya(t)&&(t=r),sr(bo(n,1,Ya,!0),Ai(t,2))})),ra=Ko((function(n){var t=Vi(n);return t="function"==typeof t?t:r,sr(bo(n,1,Ya,!0),r,t)}));function ia(n){if(!n||!n.length)return[];var t=0;return n=$t(n,(function(n){if(Ya(n))return t=be(n.length,t),!0})),Nt(t,(function(t){return kt(n,Mt(t))}))}function aa(n,t){if(!n||!n.length)return[];var e=ia(n);return null==t?e:kt(e,(function(n){return Ct(t,r,n)}))}var Aa=Ko((function(n,t){return Ya(n)?co(n,t):[]})),la=Ko((function(n){return mr($t(n,Ya))})),sa=Ko((function(n){var t=Vi(n);return Ya(t)&&(t=r),mr($t(n,Ya),Ai(t,2))})),da=Ko((function(n){var t=Vi(n);return t="function"==typeof t?t:r,mr($t(n,Ya),r,t)})),ca=Ko(ia),pa=Ko((function(n){var t=n.length,e=t>1?n[t-1]:r;return e="function"==typeof e?(n.pop(),e):r,aa(n,e)}));function ua(n){var t=qe(n);return t.__chain__=!0,t}function ma(n,t){return t(n)}var fa=ti((function(n){var t=n.length,e=t?n[0]:0,o=this.__wrapped__,i=function(t){return io(t,n)};return!(t>1||this.__actions__.length)&&o instanceof We&&bi(e)?((o=o.slice(e,+e+(t?1:0))).__actions__.push({func:ma,args:[i],thisArg:r}),new Ne(o,this.__chain__).thru((function(n){return t&&!n.length&&n.push(r),n}))):this.thru(i)})),ga=Or((function(n,t,e){zn.call(n,e)?++n[e]:ro(n,e,1)})),ba=Ur(Li),Ca=Ur(Gi);function ha(n,t){return(Ga(n)?Bt:po)(n,Ai(t,3))}function Ba(n,t){return(Ga(n)?vt:uo)(n,Ai(t,3))}var va=Or((function(n,t,e){zn.call(n,e)?n[e].push(t):ro(n,e,[t])})),wa=Ko((function(n,t,e){var r=-1,i="function"==typeof t,a=Qa(n)?o(n.length):[];return po(n,(function(n){a[++r]=i?Ct(t,n,e):Oo(n,t,e)})),a})),$a=Or((function(n,t,e){ro(n,e,t)}));function xa(n,t){return(Ga(n)?kt:Mo)(n,Ai(t,3))}var ya=Or((function(n,t,e){n[e?0:1].push(t)}),(function(){return[[],[]]})),ka=Ko((function(n,t){if(null==n)return[];var e=t.length;return e>1&&Ci(n,t[0],t[1])?t=[]:e>2&&Ci(t[0],t[1],t[2])&&(t=[t[0]]),Wo(n,bo(t,1),[])})),Ea=Jt||function(){return at.Date.now()};function Ia(n,t,e){return t=e?r:t,t=n&&null==t?n.length:t,Hr(n,s,r,r,r,r,t)}function _a(n,t){var e;if("function"!=typeof t)throw new In(i);return n=fA(n),function(){return--n>0&&(e=t.apply(this,arguments)),n<=1&&(t=r),e}}var Oa=Ko((function(n,t,e){var o=1;if(e.length){var r=ee(e,ai(Oa));o|=l}return Hr(n,o,t,e,r)})),Ja=Ko((function(n,t,e){var o=3;if(e.length){var r=ee(e,ai(Ja));o|=l}return Hr(t,o,n,e,r)}));function Pa(n,t,e){var o,a,A,l,s,d,c=0,p=!1,u=!1,m=!0;if("function"!=typeof n)throw new In(i);function f(t){var e=o,i=a;return o=a=r,c=t,l=n.apply(i,e)}function g(n){return c=n,s=Oi(C,t),p?f(n):l}function b(n){var e=n-d;return d===r||e>=t||e<0||u&&n-c>=A}function C(){var n=Ea();if(b(n))return h(n);s=Oi(C,function(n){var e=t-(n-d);return u?Ce(e,A-(n-c)):e}(n))}function h(n){return s=r,m&&o?f(n):(o=a=r,l)}function B(){var n=Ea(),e=b(n);if(o=arguments,a=this,d=n,e){if(s===r)return g(d);if(u)return vr(s),s=Oi(C,t),f(d)}return s===r&&(s=Oi(C,t)),l}return t=bA(t)||0,tA(e)&&(p=!!e.leading,A=(u="maxWait"in e)?be(bA(e.maxWait)||0,t):A,m="trailing"in e?!!e.trailing:m),B.cancel=function(){s!==r&&vr(s),c=0,o=d=a=s=r},B.flush=function(){return s===r?l:h(Ea())},B}var Da=Ko((function(n,t){return so(n,1,t)})),za=Ko((function(n,t,e){return so(n,bA(t)||0,e)}));function Sa(n,t){if("function"!=typeof n||null!=t&&"function"!=typeof t)throw new In(i);var e=function(){var o=arguments,r=t?t.apply(this,o):o[0],i=e.cache;if(i.has(r))return i.get(r);var a=n.apply(this,o);return e.cache=i.set(r,a)||i,a};return e.cache=new(Sa.Cache||Re),e}function Fa(n){if("function"!=typeof n)throw new In(i);return function(){var t=arguments;switch(t.length){case 0:return!n.call(this);case 1:return!n.call(this,t[0]);case 2:return!n.call(this,t[0],t[1]);case 3:return!n.call(this,t[0],t[1],t[2])}return!n.apply(this,t)}}Sa.Cache=Re;var Ua=hr((function(n,t){var e=(t=1==t.length&&Ga(t[0])?kt(t[0],Lt(Ai())):kt(bo(t,1),Lt(Ai()))).length;return Ko((function(o){for(var r=-1,i=Ce(o.length,e);++r<i;)o[r]=t[r].call(this,o[r]);return Ct(n,this,o)}))})),Ma=Ko((function(n,t){var e=ee(t,ai(Ma));return Hr(n,l,r,t,e)})),qa=Ko((function(n,t){var e=ee(t,ai(qa));return Hr(n,64,r,t,e)})),ja=ti((function(n,t){return Hr(n,256,r,r,r,t)}));function Ta(n,t){return n===t||n!=n&&t!=t}var Na=Gr(ko),Wa=Gr((function(n,t){return n>=t})),La=Jo(function(){return arguments}())?Jo:function(n){return eA(n)&&zn.call(n,"callee")&&!tt.call(n,"callee")},Ga=o.isArray,Ra=pt?Lt(pt):function(n){return eA(n)&&yo(n)==J};function Qa(n){return null!=n&&nA(n.length)&&!Xa(n)}function Ya(n){return eA(n)&&Qa(n)}var Ka=ue||bl,Ha=ut?Lt(ut):function(n){return eA(n)&&yo(n)==C};function Va(n){if(!eA(n))return!1;var t=yo(n);return t==h||"[object DOMException]"==t||"string"==typeof n.message&&"string"==typeof n.name&&!iA(n)}function Xa(n){if(!tA(n))return!1;var t=yo(n);return t==B||t==v||"[object AsyncFunction]"==t||"[object Proxy]"==t}function Za(n){return"number"==typeof n&&n==fA(n)}function nA(n){return"number"==typeof n&&n>-1&&n%1==0&&n<=c}function tA(n){var t=typeof n;return null!=n&&("object"==t||"function"==t)}function eA(n){return null!=n&&"object"==typeof n}var oA=mt?Lt(mt):function(n){return eA(n)&&ui(n)==w};function rA(n){return"number"==typeof n||eA(n)&&yo(n)==$}function iA(n){if(!eA(n)||yo(n)!=x)return!1;var t=Qn(n);if(null===t)return!0;var e=zn.call(t,"constructor")&&t.constructor;return"function"==typeof e&&e instanceof e&&Dn.call(e)==Mn}var aA=ft?Lt(ft):function(n){return eA(n)&&yo(n)==k},AA=gt?Lt(gt):function(n){return eA(n)&&ui(n)==E};function lA(n){return"string"==typeof n||!Ga(n)&&eA(n)&&yo(n)==I}function sA(n){return"symbol"==typeof n||eA(n)&&yo(n)==_}var dA=bt?Lt(bt):function(n){return eA(n)&&nA(n.length)&&!!Zn[yo(n)]},cA=Gr(Uo),pA=Gr((function(n,t){return n<=t}));function uA(n){if(!n)return[];if(Qa(n))return lA(n)?ae(n):Ir(n);if(At&&n[At])return function(n){for(var t,e=[];!(t=n.next()).done;)e.push(t.value);return e}(n[At]());var t=ui(n);return(t==w?ne:t==E?oe:TA)(n)}function mA(n){return n?(n=bA(n))===d||n===-1/0?17976931348623157e292*(n<0?-1:1):n==n?n:0:0===n?n:0}function fA(n){var t=mA(n),e=t%1;return t==t?e?t-e:t:0}function gA(n){return n?ao(fA(n),0,u):0}function bA(n){if("number"==typeof n)return n;if(sA(n))return p;if(tA(n)){var t="function"==typeof n.valueOf?n.valueOf():n;n=tA(t)?t+"":t}if("string"!=typeof n)return 0===n?n:+n;n=Wt(n);var e=fn.test(n);return e||bn.test(n)?ot(n.slice(2),e?2:8):mn.test(n)?p:+n}function CA(n){return _r(n,DA(n))}function hA(n){return null==n?"":lr(n)}var BA=Jr((function(n,t){if(wi(t)||Qa(t))_r(t,PA(t),n);else for(var e in t)zn.call(t,e)&&no(n,e,t[e])})),vA=Jr((function(n,t){_r(t,DA(t),n)})),wA=Jr((function(n,t,e,o){_r(t,DA(t),n,o)})),$A=Jr((function(n,t,e,o){_r(t,PA(t),n,o)})),xA=ti(io),yA=Ko((function(n,t){n=yn(n);var e=-1,o=t.length,i=o>2?t[2]:r;for(i&&Ci(t[0],t[1],i)&&(o=1);++e<o;)for(var a=t[e],A=DA(a),l=-1,s=A.length;++l<s;){var d=A[l],c=n[d];(c===r||Ta(c,Jn[d])&&!zn.call(n,d))&&(n[d]=a[d])}return n})),kA=Ko((function(n){return n.push(r,Xr),Ct(SA,r,n)}));function EA(n,t,e){var o=null==n?r:$o(n,t);return o===r?e:o}function IA(n,t){return null!=n&&mi(n,t,Io)}var _A=jr((function(n,t,e){null!=t&&"function"!=typeof t.toString&&(t=Un.call(t)),n[t]=e}),tl(rl)),OA=jr((function(n,t,e){null!=t&&"function"!=typeof t.toString&&(t=Un.call(t)),zn.call(n,t)?n[t].push(e):n[t]=[e]}),Ai),JA=Ko(Oo);function PA(n){return Qa(n)?Ke(n):Fo(n)}function DA(n){return Qa(n)?Ke(n,!0):function(n){if(!tA(n))return function(n){var t=[];if(null!=n)for(var e in yn(n))t.push(e);return t}(n);var t=wi(n),e=[];for(var o in n)("constructor"!=o||!t&&zn.call(n,o))&&e.push(o);return e}(n)}var zA=Jr((function(n,t,e){To(n,t,e)})),SA=Jr((function(n,t,e,o){To(n,t,e,o)})),FA=ti((function(n,t){var e={};if(null==n)return e;var o=!1;t=kt(t,(function(t){return t=Cr(t,n),o||(o=t.length>1),t})),_r(n,oi(n),e),o&&(e=Ao(e,7,Zr));for(var r=t.length;r--;)dr(e,t[r]);return e})),UA=ti((function(n,t){return null==n?{}:function(n,t){return Lo(n,t,(function(t,e){return IA(n,e)}))}(n,t)}));function MA(n,t){if(null==n)return{};var e=kt(oi(n),(function(n){return[n]}));return t=Ai(t),Lo(n,e,(function(n,e){return t(n,e[0])}))}var qA=Kr(PA),jA=Kr(DA);function TA(n){return null==n?[]:Gt(n,PA(n))}var NA=Sr((function(n,t,e){return t=t.toLowerCase(),n+(e?WA(t):t)}));function WA(n){return VA(hA(n).toLowerCase())}function LA(n){return(n=hA(n))&&n.replace(hn,Ht).replace(Rn,"")}var GA=Sr((function(n,t,e){return n+(e?"-":"")+t.toLowerCase()})),RA=Sr((function(n,t,e){return n+(e?" ":"")+t.toLowerCase()})),QA=zr("toLowerCase"),YA=Sr((function(n,t,e){return n+(e?"_":"")+t.toLowerCase()})),KA=Sr((function(n,t,e){return n+(e?" ":"")+VA(t)})),HA=Sr((function(n,t,e){return n+(e?" ":"")+t.toUpperCase()})),VA=zr("toUpperCase");function XA(n,t,e){return n=hA(n),(t=e?r:t)===r?function(n){return Hn.test(n)}(n)?function(n){return n.match(Yn)||[]}(n):function(n){return n.match(sn)||[]}(n):n.match(t)||[]}var ZA=Ko((function(n,t){try{return Ct(n,r,t)}catch(n){return Va(n)?n:new wn(n)}})),nl=ti((function(n,t){return Bt(t,(function(t){t=Mi(t),ro(n,t,Oa(n[t],n))})),n}));function tl(n){return function(){return n}}var el=Mr(),ol=Mr(!0);function rl(n){return n}function il(n){return So("function"==typeof n?n:Ao(n,1))}var al=Ko((function(n,t){return function(e){return Oo(e,n,t)}})),Al=Ko((function(n,t){return function(e){return Oo(n,e,t)}}));function ll(n,t,e){var o=PA(t),r=wo(t,o);null!=e||tA(t)&&(r.length||!o.length)||(e=t,t=n,n=this,r=wo(t,PA(t)));var i=!(tA(e)&&"chain"in e&&!e.chain),a=Xa(n);return Bt(r,(function(e){var o=t[e];n[e]=o,a&&(n.prototype[e]=function(){var t=this.__chain__;if(i||t){var e=n(this.__wrapped__),r=e.__actions__=Ir(this.__actions__);return r.push({func:o,args:arguments,thisArg:n}),e.__chain__=t,e}return o.apply(n,Et([this.value()],arguments))})})),n}function sl(){}var dl=Nr(kt),cl=Nr(wt),pl=Nr(Ot);function ul(n){return hi(n)?Mt(Mi(n)):function(n){return function(t){return $o(t,n)}}(n)}var ml=Lr(),fl=Lr(!0);function gl(){return[]}function bl(){return!1}var Cl,hl=Tr((function(n,t){return n+t}),0),Bl=Qr("ceil"),vl=Tr((function(n,t){return n/t}),1),wl=Qr("floor"),$l=Tr((function(n,t){return n*t}),1),xl=Qr("round"),yl=Tr((function(n,t){return n-t}),0);return qe.after=function(n,t){if("function"!=typeof t)throw new In(i);return n=fA(n),function(){if(--n<1)return t.apply(this,arguments)}},qe.ary=Ia,qe.assign=BA,qe.assignIn=vA,qe.assignInWith=wA,qe.assignWith=$A,qe.at=xA,qe.before=_a,qe.bind=Oa,qe.bindAll=nl,qe.bindKey=Ja,qe.castArray=function(){if(!arguments.length)return[];var n=arguments[0];return Ga(n)?n:[n]},qe.chain=ua,qe.chunk=function(n,t,e){t=(e?Ci(n,t,e):t===r)?1:be(fA(t),0);var i=null==n?0:n.length;if(!i||t<1)return[];for(var a=0,A=0,l=o(de(i/t));a<i;)l[A++]=er(n,a,a+=t);return l},qe.compact=function(n){for(var t=-1,e=null==n?0:n.length,o=0,r=[];++t<e;){var i=n[t];i&&(r[o++]=i)}return r},qe.concat=function(){var n=arguments.length;if(!n)return[];for(var t=o(n-1),e=arguments[0],r=n;r--;)t[r-1]=arguments[r];return Et(Ga(e)?Ir(e):[e],bo(t,1))},qe.cond=function(n){var t=null==n?0:n.length,e=Ai();return n=t?kt(n,(function(n){if("function"!=typeof n[1])throw new In(i);return[e(n[0]),n[1]]})):[],Ko((function(e){for(var o=-1;++o<t;){var r=n[o];if(Ct(r[0],this,e))return Ct(r[1],this,e)}}))},qe.conforms=function(n){return function(n){var t=PA(n);return function(e){return lo(e,n,t)}}(Ao(n,1))},qe.constant=tl,qe.countBy=ga,qe.create=function(n,t){var e=je(n);return null==t?e:oo(e,t)},qe.curry=function n(t,e,o){var i=Hr(t,8,r,r,r,r,r,e=o?r:e);return i.placeholder=n.placeholder,i},qe.curryRight=function n(t,e,o){var i=Hr(t,16,r,r,r,r,r,e=o?r:e);return i.placeholder=n.placeholder,i},qe.debounce=Pa,qe.defaults=yA,qe.defaultsDeep=kA,qe.defer=Da,qe.delay=za,qe.difference=Ti,qe.differenceBy=Ni,qe.differenceWith=Wi,qe.drop=function(n,t,e){var o=null==n?0:n.length;return o?er(n,(t=e||t===r?1:fA(t))<0?0:t,o):[]},qe.dropRight=function(n,t,e){var o=null==n?0:n.length;return o?er(n,0,(t=o-(t=e||t===r?1:fA(t)))<0?0:t):[]},qe.dropRightWhile=function(n,t){return n&&n.length?pr(n,Ai(t,3),!0,!0):[]},qe.dropWhile=function(n,t){return n&&n.length?pr(n,Ai(t,3),!0):[]},qe.fill=function(n,t,e,o){var i=null==n?0:n.length;return i?(e&&"number"!=typeof e&&Ci(n,t,e)&&(e=0,o=i),function(n,t,e,o){var i=n.length;for((e=fA(e))<0&&(e=-e>i?0:i+e),(o=o===r||o>i?i:fA(o))<0&&(o+=i),o=e>o?0:gA(o);e<o;)n[e++]=t;return n}(n,t,e,o)):[]},qe.filter=function(n,t){return(Ga(n)?$t:go)(n,Ai(t,3))},qe.flatMap=function(n,t){return bo(xa(n,t),1)},qe.flatMapDeep=function(n,t){return bo(xa(n,t),d)},qe.flatMapDepth=function(n,t,e){return e=e===r?1:fA(e),bo(xa(n,t),e)},qe.flatten=Ri,qe.flattenDeep=function(n){return null!=n&&n.length?bo(n,d):[]},qe.flattenDepth=function(n,t){return null!=n&&n.length?bo(n,t=t===r?1:fA(t)):[]},qe.flip=function(n){return Hr(n,512)},qe.flow=el,qe.flowRight=ol,qe.fromPairs=function(n){for(var t=-1,e=null==n?0:n.length,o={};++t<e;){var r=n[t];o[r[0]]=r[1]}return o},qe.functions=function(n){return null==n?[]:wo(n,PA(n))},qe.functionsIn=function(n){return null==n?[]:wo(n,DA(n))},qe.groupBy=va,qe.initial=function(n){return null!=n&&n.length?er(n,0,-1):[]},qe.intersection=Yi,qe.intersectionBy=Ki,qe.intersectionWith=Hi,qe.invert=_A,qe.invertBy=OA,qe.invokeMap=wa,qe.iteratee=il,qe.keyBy=$a,qe.keys=PA,qe.keysIn=DA,qe.map=xa,qe.mapKeys=function(n,t){var e={};return t=Ai(t,3),Bo(n,(function(n,o,r){ro(e,t(n,o,r),n)})),e},qe.mapValues=function(n,t){var e={};return t=Ai(t,3),Bo(n,(function(n,o,r){ro(e,o,t(n,o,r))})),e},qe.matches=function(n){return qo(Ao(n,1))},qe.matchesProperty=function(n,t){return jo(n,Ao(t,1))},qe.memoize=Sa,qe.merge=zA,qe.mergeWith=SA,qe.method=al,qe.methodOf=Al,qe.mixin=ll,qe.negate=Fa,qe.nthArg=function(n){return n=fA(n),Ko((function(t){return No(t,n)}))},qe.omit=FA,qe.omitBy=function(n,t){return MA(n,Fa(Ai(t)))},qe.once=function(n){return _a(2,n)},qe.orderBy=function(n,t,e,o){return null==n?[]:(Ga(t)||(t=null==t?[]:[t]),Ga(e=o?r:e)||(e=null==e?[]:[e]),Wo(n,t,e))},qe.over=dl,qe.overArgs=Ua,qe.overEvery=cl,qe.overSome=pl,qe.partial=Ma,qe.partialRight=qa,qe.partition=ya,qe.pick=UA,qe.pickBy=MA,qe.property=ul,qe.propertyOf=function(n){return function(t){return null==n?r:$o(n,t)}},qe.pull=Xi,qe.pullAll=Zi,qe.pullAllBy=function(n,t,e){return n&&n.length&&t&&t.length?Go(n,t,Ai(e,2)):n},qe.pullAllWith=function(n,t,e){return n&&n.length&&t&&t.length?Go(n,t,r,e):n},qe.pullAt=na,qe.range=ml,qe.rangeRight=fl,qe.rearg=ja,qe.reject=function(n,t){return(Ga(n)?$t:go)(n,Fa(Ai(t,3)))},qe.remove=function(n,t){var e=[];if(!n||!n.length)return e;var o=-1,r=[],i=n.length;for(t=Ai(t,3);++o<i;){var a=n[o];t(a,o,n)&&(e.push(a),r.push(o))}return Ro(n,r),e},qe.rest=function(n,t){if("function"!=typeof n)throw new In(i);return Ko(n,t=t===r?t:fA(t))},qe.reverse=ta,qe.sampleSize=function(n,t,e){return t=(e?Ci(n,t,e):t===r)?1:fA(t),(Ga(n)?Ve:Vo)(n,t)},qe.set=function(n,t,e){return null==n?n:Xo(n,t,e)},qe.setWith=function(n,t,e,o){return o="function"==typeof o?o:r,null==n?n:Xo(n,t,e,o)},qe.shuffle=function(n){return(Ga(n)?Xe:tr)(n)},qe.slice=function(n,t,e){var o=null==n?0:n.length;return o?(e&&"number"!=typeof e&&Ci(n,t,e)?(t=0,e=o):(t=null==t?0:fA(t),e=e===r?o:fA(e)),er(n,t,e)):[]},qe.sortBy=ka,qe.sortedUniq=function(n){return n&&n.length?ar(n):[]},qe.sortedUniqBy=function(n,t){return n&&n.length?ar(n,Ai(t,2)):[]},qe.split=function(n,t,e){return e&&"number"!=typeof e&&Ci(n,t,e)&&(t=e=r),(e=e===r?u:e>>>0)?(n=hA(n))&&("string"==typeof t||null!=t&&!aA(t))&&!(t=lr(t))&&Zt(n)?Br(ae(n),0,e):n.split(t,e):[]},qe.spread=function(n,t){if("function"!=typeof n)throw new In(i);return t=null==t?0:be(fA(t),0),Ko((function(e){var o=e[t],r=Br(e,0,t);return o&&Et(r,o),Ct(n,this,r)}))},qe.tail=function(n){var t=null==n?0:n.length;return t?er(n,1,t):[]},qe.take=function(n,t,e){return n&&n.length?er(n,0,(t=e||t===r?1:fA(t))<0?0:t):[]},qe.takeRight=function(n,t,e){var o=null==n?0:n.length;return o?er(n,(t=o-(t=e||t===r?1:fA(t)))<0?0:t,o):[]},qe.takeRightWhile=function(n,t){return n&&n.length?pr(n,Ai(t,3),!1,!0):[]},qe.takeWhile=function(n,t){return n&&n.length?pr(n,Ai(t,3)):[]},qe.tap=function(n,t){return t(n),n},qe.throttle=function(n,t,e){var o=!0,r=!0;if("function"!=typeof n)throw new In(i);return tA(e)&&(o="leading"in e?!!e.leading:o,r="trailing"in e?!!e.trailing:r),Pa(n,t,{leading:o,maxWait:t,trailing:r})},qe.thru=ma,qe.toArray=uA,qe.toPairs=qA,qe.toPairsIn=jA,qe.toPath=function(n){return Ga(n)?kt(n,Mi):sA(n)?[n]:Ir(Ui(hA(n)))},qe.toPlainObject=CA,qe.transform=function(n,t,e){var o=Ga(n),r=o||Ka(n)||dA(n);if(t=Ai(t,4),null==e){var i=n&&n.constructor;e=r?o?new i:[]:tA(n)&&Xa(i)?je(Qn(n)):{}}return(r?Bt:Bo)(n,(function(n,o,r){return t(e,n,o,r)})),e},qe.unary=function(n){return Ia(n,1)},qe.union=ea,qe.unionBy=oa,qe.unionWith=ra,qe.uniq=function(n){return n&&n.length?sr(n):[]},qe.uniqBy=function(n,t){return n&&n.length?sr(n,Ai(t,2)):[]},qe.uniqWith=function(n,t){return t="function"==typeof t?t:r,n&&n.length?sr(n,r,t):[]},qe.unset=function(n,t){return null==n||dr(n,t)},qe.unzip=ia,qe.unzipWith=aa,qe.update=function(n,t,e){return null==n?n:cr(n,t,br(e))},qe.updateWith=function(n,t,e,o){return o="function"==typeof o?o:r,null==n?n:cr(n,t,br(e),o)},qe.values=TA,qe.valuesIn=function(n){return null==n?[]:Gt(n,DA(n))},qe.without=Aa,qe.words=XA,qe.wrap=function(n,t){return Ma(br(t),n)},qe.xor=la,qe.xorBy=sa,qe.xorWith=da,qe.zip=ca,qe.zipObject=function(n,t){return fr(n||[],t||[],no)},qe.zipObjectDeep=function(n,t){return fr(n||[],t||[],Xo)},qe.zipWith=pa,qe.entries=qA,qe.entriesIn=jA,qe.extend=vA,qe.extendWith=wA,ll(qe,qe),qe.add=hl,qe.attempt=ZA,qe.camelCase=NA,qe.capitalize=WA,qe.ceil=Bl,qe.clamp=function(n,t,e){return e===r&&(e=t,t=r),e!==r&&(e=(e=bA(e))==e?e:0),t!==r&&(t=(t=bA(t))==t?t:0),ao(bA(n),t,e)},qe.clone=function(n){return Ao(n,4)},qe.cloneDeep=function(n){return Ao(n,5)},qe.cloneDeepWith=function(n,t){return Ao(n,5,t="function"==typeof t?t:r)},qe.cloneWith=function(n,t){return Ao(n,4,t="function"==typeof t?t:r)},qe.conformsTo=function(n,t){return null==t||lo(n,t,PA(t))},qe.deburr=LA,qe.defaultTo=function(n,t){return null==n||n!=n?t:n},qe.divide=vl,qe.endsWith=function(n,t,e){n=hA(n),t=lr(t);var o=n.length,i=e=e===r?o:ao(fA(e),0,o);return(e-=t.length)>=0&&n.slice(e,i)==t},qe.eq=Ta,qe.escape=function(n){return(n=hA(n))&&Y.test(n)?n.replace(R,Vt):n},qe.escapeRegExp=function(n){return(n=hA(n))&&en.test(n)?n.replace(tn,"\\$&"):n},qe.every=function(n,t,e){var o=Ga(n)?wt:mo;return e&&Ci(n,t,e)&&(t=r),o(n,Ai(t,3))},qe.find=ba,qe.findIndex=Li,qe.findKey=function(n,t){return Pt(n,Ai(t,3),Bo)},qe.findLast=Ca,qe.findLastIndex=Gi,qe.findLastKey=function(n,t){return Pt(n,Ai(t,3),vo)},qe.floor=wl,qe.forEach=ha,qe.forEachRight=Ba,qe.forIn=function(n,t){return null==n?n:Co(n,Ai(t,3),DA)},qe.forInRight=function(n,t){return null==n?n:ho(n,Ai(t,3),DA)},qe.forOwn=function(n,t){return n&&Bo(n,Ai(t,3))},qe.forOwnRight=function(n,t){return n&&vo(n,Ai(t,3))},qe.get=EA,qe.gt=Na,qe.gte=Wa,qe.has=function(n,t){return null!=n&&mi(n,t,Eo)},qe.hasIn=IA,qe.head=Qi,qe.identity=rl,qe.includes=function(n,t,e,o){n=Qa(n)?n:TA(n),e=e&&!o?fA(e):0;var r=n.length;return e<0&&(e=be(r+e,0)),lA(n)?e<=r&&n.indexOf(t,e)>-1:!!r&&zt(n,t,e)>-1},qe.indexOf=function(n,t,e){var o=null==n?0:n.length;if(!o)return-1;var r=null==e?0:fA(e);return r<0&&(r=be(o+r,0)),zt(n,t,r)},qe.inRange=function(n,t,e){return t=mA(t),e===r?(e=t,t=0):e=mA(e),function(n,t,e){return n>=Ce(t,e)&&n<be(t,e)}(n=bA(n),t,e)},qe.invoke=JA,qe.isArguments=La,qe.isArray=Ga,qe.isArrayBuffer=Ra,qe.isArrayLike=Qa,qe.isArrayLikeObject=Ya,qe.isBoolean=function(n){return!0===n||!1===n||eA(n)&&yo(n)==b},qe.isBuffer=Ka,qe.isDate=Ha,qe.isElement=function(n){return eA(n)&&1===n.nodeType&&!iA(n)},qe.isEmpty=function(n){if(null==n)return!0;if(Qa(n)&&(Ga(n)||"string"==typeof n||"function"==typeof n.splice||Ka(n)||dA(n)||La(n)))return!n.length;var t=ui(n);if(t==w||t==E)return!n.size;if(wi(n))return!Fo(n).length;for(var e in n)if(zn.call(n,e))return!1;return!0},qe.isEqual=function(n,t){return Po(n,t)},qe.isEqualWith=function(n,t,e){var o=(e="function"==typeof e?e:r)?e(n,t):r;return o===r?Po(n,t,r,e):!!o},qe.isError=Va,qe.isFinite=function(n){return"number"==typeof n&&me(n)},qe.isFunction=Xa,qe.isInteger=Za,qe.isLength=nA,qe.isMap=oA,qe.isMatch=function(n,t){return n===t||Do(n,t,si(t))},qe.isMatchWith=function(n,t,e){return e="function"==typeof e?e:r,Do(n,t,si(t),e)},qe.isNaN=function(n){return rA(n)&&n!=+n},qe.isNative=function(n){if(vi(n))throw new wn("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return zo(n)},qe.isNil=function(n){return null==n},qe.isNull=function(n){return null===n},qe.isNumber=rA,qe.isObject=tA,qe.isObjectLike=eA,qe.isPlainObject=iA,qe.isRegExp=aA,qe.isSafeInteger=function(n){return Za(n)&&n>=-9007199254740991&&n<=c},qe.isSet=AA,qe.isString=lA,qe.isSymbol=sA,qe.isTypedArray=dA,qe.isUndefined=function(n){return n===r},qe.isWeakMap=function(n){return eA(n)&&ui(n)==O},qe.isWeakSet=function(n){return eA(n)&&"[object WeakSet]"==yo(n)},qe.join=function(n,t){return null==n?"":fe.call(n,t)},qe.kebabCase=GA,qe.last=Vi,qe.lastIndexOf=function(n,t,e){var o=null==n?0:n.length;if(!o)return-1;var i=o;return e!==r&&(i=(i=fA(e))<0?be(o+i,0):Ce(i,o-1)),t==t?function(n,t,e){for(var o=e+1;o--;)if(n[o]===t)return o;return o}(n,t,i):Dt(n,Ft,i,!0)},qe.lowerCase=RA,qe.lowerFirst=QA,qe.lt=cA,qe.lte=pA,qe.max=function(n){return n&&n.length?fo(n,rl,ko):r},qe.maxBy=function(n,t){return n&&n.length?fo(n,Ai(t,2),ko):r},qe.mean=function(n){return Ut(n,rl)},qe.meanBy=function(n,t){return Ut(n,Ai(t,2))},qe.min=function(n){return n&&n.length?fo(n,rl,Uo):r},qe.minBy=function(n,t){return n&&n.length?fo(n,Ai(t,2),Uo):r},qe.stubArray=gl,qe.stubFalse=bl,qe.stubObject=function(){return{}},qe.stubString=function(){return""},qe.stubTrue=function(){return!0},qe.multiply=$l,qe.nth=function(n,t){return n&&n.length?No(n,fA(t)):r},qe.noConflict=function(){return at._===this&&(at._=qn),this},qe.noop=sl,qe.now=Ea,qe.pad=function(n,t,e){n=hA(n);var o=(t=fA(t))?ie(n):0;if(!t||o>=t)return n;var r=(t-o)/2;return Wr(ce(r),e)+n+Wr(de(r),e)},qe.padEnd=function(n,t,e){n=hA(n);var o=(t=fA(t))?ie(n):0;return t&&o<t?n+Wr(t-o,e):n},qe.padStart=function(n,t,e){n=hA(n);var o=(t=fA(t))?ie(n):0;return t&&o<t?Wr(t-o,e)+n:n},qe.parseInt=function(n,t,e){return e||null==t?t=0:t&&(t=+t),Be(hA(n).replace(on,""),t||0)},qe.random=function(n,t,e){if(e&&"boolean"!=typeof e&&Ci(n,t,e)&&(t=e=r),e===r&&("boolean"==typeof t?(e=t,t=r):"boolean"==typeof n&&(e=n,n=r)),n===r&&t===r?(n=0,t=1):(n=mA(n),t===r?(t=n,n=0):t=mA(t)),n>t){var o=n;n=t,t=o}if(e||n%1||t%1){var i=ve();return Ce(n+i*(t-n+et("1e-"+((i+"").length-1))),t)}return Qo(n,t)},qe.reduce=function(n,t,e){var o=Ga(n)?It:jt,r=arguments.length<3;return o(n,Ai(t,4),e,r,po)},qe.reduceRight=function(n,t,e){var o=Ga(n)?_t:jt,r=arguments.length<3;return o(n,Ai(t,4),e,r,uo)},qe.repeat=function(n,t,e){return t=(e?Ci(n,t,e):t===r)?1:fA(t),Yo(hA(n),t)},qe.replace=function(){var n=arguments,t=hA(n[0]);return n.length<3?t:t.replace(n[1],n[2])},qe.result=function(n,t,e){var o=-1,i=(t=Cr(t,n)).length;for(i||(i=1,n=r);++o<i;){var a=null==n?r:n[Mi(t[o])];a===r&&(o=i,a=e),n=Xa(a)?a.call(n):a}return n},qe.round=xl,qe.runInContext=n,qe.sample=function(n){return(Ga(n)?He:Ho)(n)},qe.size=function(n){if(null==n)return 0;if(Qa(n))return lA(n)?ie(n):n.length;var t=ui(n);return t==w||t==E?n.size:Fo(n).length},qe.snakeCase=YA,qe.some=function(n,t,e){var o=Ga(n)?Ot:or;return e&&Ci(n,t,e)&&(t=r),o(n,Ai(t,3))},qe.sortedIndex=function(n,t){return rr(n,t)},qe.sortedIndexBy=function(n,t,e){return ir(n,t,Ai(e,2))},qe.sortedIndexOf=function(n,t){var e=null==n?0:n.length;if(e){var o=rr(n,t);if(o<e&&Ta(n[o],t))return o}return-1},qe.sortedLastIndex=function(n,t){return rr(n,t,!0)},qe.sortedLastIndexBy=function(n,t,e){return ir(n,t,Ai(e,2),!0)},qe.sortedLastIndexOf=function(n,t){if(null!=n&&n.length){var e=rr(n,t,!0)-1;if(Ta(n[e],t))return e}return-1},qe.startCase=KA,qe.startsWith=function(n,t,e){return n=hA(n),e=null==e?0:ao(fA(e),0,n.length),t=lr(t),n.slice(e,e+t.length)==t},qe.subtract=yl,qe.sum=function(n){return n&&n.length?Tt(n,rl):0},qe.sumBy=function(n,t){return n&&n.length?Tt(n,Ai(t,2)):0},qe.template=function(n,t,e){var o=qe.templateSettings;e&&Ci(n,t,e)&&(t=r),n=hA(n),t=wA({},t,o,Vr);var i,a,A=wA({},t.imports,o.imports,Vr),l=PA(A),s=Gt(A,l),d=0,c=t.interpolate||Bn,p="__p += '",u=kn((t.escape||Bn).source+"|"+c.source+"|"+(c===V?pn:Bn).source+"|"+(t.evaluate||Bn).source+"|$","g"),m="//# sourceURL="+(zn.call(t,"sourceURL")?(t.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++Xn+"]")+"\n";n.replace(u,(function(t,e,o,r,A,l){return o||(o=r),p+=n.slice(d,l).replace(vn,Xt),e&&(i=!0,p+="' +\n__e("+e+") +\n'"),A&&(a=!0,p+="';\n"+A+";\n__p += '"),o&&(p+="' +\n((__t = ("+o+")) == null ? '' : __t) +\n'"),d=l+t.length,t})),p+="';\n";var f=zn.call(t,"variable")&&t.variable;if(f){if(dn.test(f))throw new wn("Invalid `variable` option passed into `_.template`")}else p="with (obj) {\n"+p+"\n}\n";p=(a?p.replace(N,""):p).replace(W,"$1").replace(L,"$1;"),p="function("+(f||"obj")+") {\n"+(f?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(i?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+p+"return __p\n}";var g=ZA((function(){return $n(l,m+"return "+p).apply(r,s)}));if(g.source=p,Va(g))throw g;return g},qe.times=function(n,t){if((n=fA(n))<1||n>c)return[];var e=u,o=Ce(n,u);t=Ai(t),n-=u;for(var r=Nt(o,t);++e<n;)t(e);return r},qe.toFinite=mA,qe.toInteger=fA,qe.toLength=gA,qe.toLower=function(n){return hA(n).toLowerCase()},qe.toNumber=bA,qe.toSafeInteger=function(n){return n?ao(fA(n),-9007199254740991,c):0===n?n:0},qe.toString=hA,qe.toUpper=function(n){return hA(n).toUpperCase()},qe.trim=function(n,t,e){if((n=hA(n))&&(e||t===r))return Wt(n);if(!n||!(t=lr(t)))return n;var o=ae(n),i=ae(t);return Br(o,Qt(o,i),Yt(o,i)+1).join("")},qe.trimEnd=function(n,t,e){if((n=hA(n))&&(e||t===r))return n.slice(0,Ae(n)+1);if(!n||!(t=lr(t)))return n;var o=ae(n);return Br(o,0,Yt(o,ae(t))+1).join("")},qe.trimStart=function(n,t,e){if((n=hA(n))&&(e||t===r))return n.replace(on,"");if(!n||!(t=lr(t)))return n;var o=ae(n);return Br(o,Qt(o,ae(t))).join("")},qe.truncate=function(n,t){var e=30,o="...";if(tA(t)){var i="separator"in t?t.separator:i;e="length"in t?fA(t.length):e,o="omission"in t?lr(t.omission):o}var a=(n=hA(n)).length;if(Zt(n)){var A=ae(n);a=A.length}if(e>=a)return n;var l=e-ie(o);if(l<1)return o;var s=A?Br(A,0,l).join(""):n.slice(0,l);if(i===r)return s+o;if(A&&(l+=s.length-l),aA(i)){if(n.slice(l).search(i)){var d,c=s;for(i.global||(i=kn(i.source,hA(un.exec(i))+"g")),i.lastIndex=0;d=i.exec(c);)var p=d.index;s=s.slice(0,p===r?l:p)}}else if(n.indexOf(lr(i),l)!=l){var u=s.lastIndexOf(i);u>-1&&(s=s.slice(0,u))}return s+o},qe.unescape=function(n){return(n=hA(n))&&Q.test(n)?n.replace(G,le):n},qe.uniqueId=function(n){var t=++Sn;return hA(n)+t},qe.upperCase=HA,qe.upperFirst=VA,qe.each=ha,qe.eachRight=Ba,qe.first=Qi,ll(qe,(Cl={},Bo(qe,(function(n,t){zn.call(qe.prototype,t)||(Cl[t]=n)})),Cl),{chain:!1}),qe.VERSION="4.17.21",Bt(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(n){qe[n].placeholder=qe})),Bt(["drop","take"],(function(n,t){We.prototype[n]=function(e){e=e===r?1:be(fA(e),0);var o=this.__filtered__&&!t?new We(this):this.clone();return o.__filtered__?o.__takeCount__=Ce(e,o.__takeCount__):o.__views__.push({size:Ce(e,u),type:n+(o.__dir__<0?"Right":"")}),o},We.prototype[n+"Right"]=function(t){return this.reverse()[n](t).reverse()}})),Bt(["filter","map","takeWhile"],(function(n,t){var e=t+1,o=1==e||3==e;We.prototype[n]=function(n){var t=this.clone();return t.__iteratees__.push({iteratee:Ai(n,3),type:e}),t.__filtered__=t.__filtered__||o,t}})),Bt(["head","last"],(function(n,t){var e="take"+(t?"Right":"");We.prototype[n]=function(){return this[e](1).value()[0]}})),Bt(["initial","tail"],(function(n,t){var e="drop"+(t?"":"Right");We.prototype[n]=function(){return this.__filtered__?new We(this):this[e](1)}})),We.prototype.compact=function(){return this.filter(rl)},We.prototype.find=function(n){return this.filter(n).head()},We.prototype.findLast=function(n){return this.reverse().find(n)},We.prototype.invokeMap=Ko((function(n,t){return"function"==typeof n?new We(this):this.map((function(e){return Oo(e,n,t)}))})),We.prototype.reject=function(n){return this.filter(Fa(Ai(n)))},We.prototype.slice=function(n,t){n=fA(n);var e=this;return e.__filtered__&&(n>0||t<0)?new We(e):(n<0?e=e.takeRight(-n):n&&(e=e.drop(n)),t!==r&&(e=(t=fA(t))<0?e.dropRight(-t):e.take(t-n)),e)},We.prototype.takeRightWhile=function(n){return this.reverse().takeWhile(n).reverse()},We.prototype.toArray=function(){return this.take(u)},Bo(We.prototype,(function(n,t){var e=/^(?:filter|find|map|reject)|While$/.test(t),o=/^(?:head|last)$/.test(t),i=qe[o?"take"+("last"==t?"Right":""):t],a=o||/^find/.test(t);i&&(qe.prototype[t]=function(){var t=this.__wrapped__,A=o?[1]:arguments,l=t instanceof We,s=A[0],d=l||Ga(t),c=function(n){var t=i.apply(qe,Et([n],A));return o&&p?t[0]:t};d&&e&&"function"==typeof s&&1!=s.length&&(l=d=!1);var p=this.__chain__,u=!!this.__actions__.length,m=a&&!p,f=l&&!u;if(!a&&d){t=f?t:new We(this);var g=n.apply(t,A);return g.__actions__.push({func:ma,args:[c],thisArg:r}),new Ne(g,p)}return m&&f?n.apply(this,A):(g=this.thru(c),m?o?g.value()[0]:g.value():g)})})),Bt(["pop","push","shift","sort","splice","unshift"],(function(n){var t=_n[n],e=/^(?:push|sort|unshift)$/.test(n)?"tap":"thru",o=/^(?:pop|shift)$/.test(n);qe.prototype[n]=function(){var n=arguments;if(o&&!this.__chain__){var r=this.value();return t.apply(Ga(r)?r:[],n)}return this[e]((function(e){return t.apply(Ga(e)?e:[],n)}))}})),Bo(We.prototype,(function(n,t){var e=qe[t];if(e){var o=e.name+"";zn.call(Oe,o)||(Oe[o]=[]),Oe[o].push({name:t,func:e})}})),Oe[qr(r,2).name]=[{name:"wrapper",func:r}],We.prototype.clone=function(){var n=new We(this.__wrapped__);return n.__actions__=Ir(this.__actions__),n.__dir__=this.__dir__,n.__filtered__=this.__filtered__,n.__iteratees__=Ir(this.__iteratees__),n.__takeCount__=this.__takeCount__,n.__views__=Ir(this.__views__),n},We.prototype.reverse=function(){if(this.__filtered__){var n=new We(this);n.__dir__=-1,n.__filtered__=!0}else(n=this.clone()).__dir__*=-1;return n},We.prototype.value=function(){var n=this.__wrapped__.value(),t=this.__dir__,e=Ga(n),o=t<0,r=e?n.length:0,i=function(n,t,e){for(var o=-1,r=e.length;++o<r;){var i=e[o],a=i.size;switch(i.type){case"drop":n+=a;break;case"dropRight":t-=a;break;case"take":t=Ce(t,n+a);break;case"takeRight":n=be(n,t-a)}}return{start:n,end:t}}(0,r,this.__views__),a=i.start,A=i.end,l=A-a,s=o?A:a-1,d=this.__iteratees__,c=d.length,p=0,u=Ce(l,this.__takeCount__);if(!e||!o&&r==l&&u==l)return ur(n,this.__actions__);var m=[];n:for(;l--&&p<u;){for(var f=-1,g=n[s+=t];++f<c;){var b=d[f],C=b.iteratee,h=b.type,B=C(g);if(2==h)g=B;else if(!B){if(1==h)continue n;break n}}m[p++]=g}return m},qe.prototype.at=fa,qe.prototype.chain=function(){return ua(this)},qe.prototype.commit=function(){return new Ne(this.value(),this.__chain__)},qe.prototype.next=function(){this.__values__===r&&(this.__values__=uA(this.value()));var n=this.__index__>=this.__values__.length;return{done:n,value:n?r:this.__values__[this.__index__++]}},qe.prototype.plant=function(n){for(var t,e=this;e instanceof Te;){var o=ji(e);o.__index__=0,o.__values__=r,t?i.__wrapped__=o:t=o;var i=o;e=e.__wrapped__}return i.__wrapped__=n,t},qe.prototype.reverse=function(){var n=this.__wrapped__;if(n instanceof We){var t=n;return this.__actions__.length&&(t=new We(this)),(t=t.reverse()).__actions__.push({func:ma,args:[ta],thisArg:r}),new Ne(t,this.__chain__)}return this.thru(ta)},qe.prototype.toJSON=qe.prototype.valueOf=qe.prototype.value=function(){return ur(this.__wrapped__,this.__actions__)},qe.prototype.first=qe.prototype.head,At&&(qe.prototype[At]=function(){return this}),qe}();at._=se,(o=function(){return se}.call(t,e,t,n))===r||(n.exports=o)}.call(this)},379:n=>{"use strict";var t=[];function e(n){for(var e=-1,o=0;o<t.length;o++)if(t[o].identifier===n){e=o;break}return e}function o(n,o){for(var i={},a=[],A=0;A<n.length;A++){var l=n[A],s=o.base?l[0]+o.base:l[0],d=i[s]||0,c="".concat(s," ").concat(d);i[s]=d+1;var p=e(c),u={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)t[p].references++,t[p].updater(u);else{var m=r(u,o);o.byIndex=A,t.splice(A,0,{identifier:c,updater:m,references:1})}a.push(c)}return a}function r(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,r){var i=o(n=n||[],r=r||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var A=e(i[a]);t[A].references--}for(var l=o(n,r),s=0;s<i.length;s++){var d=e(i[s]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}i=l}}},569:n=>{"use strict";var t={};n.exports=function(n,e){var o=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(e)}},216:n=>{"use strict";n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},565:(n,t,e)=>{"use strict";n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{"use strict";n.exports=function(n){var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var o="";e.supports&&(o+="@supports (".concat(e.supports,") {")),e.media&&(o+="@media ".concat(e.media," {"));var r=void 0!==e.layer;r&&(o+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),o+=e.css,r&&(o+="}"),e.media&&(o+="}"),e.supports&&(o+="}");var i=e.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(o,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{"use strict";n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}},204:n=>{"use strict";n.exports="data:image/svg+xml,%3csvg xmlns=%27http://www.w3.org/2000/svg%27 viewBox=%27-4 -4 8 8%27%3e%3ccircle r=%272%27 fill=%27%23fff%27/%3e%3c/svg%3e"},609:n=>{"use strict";n.exports="data:image/svg+xml,%3csvg xmlns=%27http://www.w3.org/2000/svg%27 viewBox=%27-4 -4 8 8%27%3e%3ccircle r=%273%27 fill=%27%2386b7fe%27/%3e%3c/svg%3e"},469:n=>{"use strict";n.exports="data:image/svg+xml,%3csvg xmlns=%27http://www.w3.org/2000/svg%27 viewBox=%27-4 -4 8 8%27%3e%3ccircle r=%273%27 fill=%27%23fff%27/%3e%3c/svg%3e"},19:n=>{"use strict";n.exports="data:image/svg+xml,%3csvg xmlns=%27http://www.w3.org/2000/svg%27 viewBox=%27-4 -4 8 8%27%3e%3ccircle r=%273%27 fill=%27rgba%280, 0, 0, 0.25%29%27/%3e%3c/svg%3e"},144:n=>{"use strict";n.exports="data:image/svg+xml,%3csvg xmlns=%27http://www.w3.org/2000/svg%27 viewBox=%270 0 12 12%27 width=%2712%27 height=%2712%27 fill=%27none%27 stroke=%27%23dc3545%27%3e%3ccircle cx=%276%27 cy=%276%27 r=%274.5%27/%3e%3cpath stroke-linejoin=%27round%27 d=%27M5.8 3.6h.4L6 6.5z%27/%3e%3ccircle cx=%276%27 cy=%278.2%27 r=%27.6%27 fill=%27%23dc3545%27 stroke=%27none%27/%3e%3c/svg%3e"},175:n=>{"use strict";n.exports="data:image/svg+xml,%3csvg xmlns=%27http://www.w3.org/2000/svg%27 viewBox=%270 0 16 16%27 fill=%27%23000%27%3e%3cpath d=%27M.293.293a1 1 0 011.414 0L8 6.586 14.293.293a1 1 0 111.414 1.414L9.414 8l6.293 6.293a1 1 0 01-1.414 1.414L8 9.414l-6.293 6.293a1 1 0 01-1.414-1.414L6.586 8 .293 1.707a1 1 0 010-1.414z%27/%3e%3c/svg%3e"},740:n=>{"use strict";n.exports="data:image/svg+xml,%3csvg xmlns=%27http://www.w3.org/2000/svg%27 viewBox=%270 0 16 16%27 fill=%27%230c63e4%27%3e%3cpath fill-rule=%27evenodd%27 d=%27M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z%27/%3e%3c/svg%3e"},460:n=>{"use strict";n.exports="data:image/svg+xml,%3csvg xmlns=%27http://www.w3.org/2000/svg%27 viewBox=%270 0 16 16%27 fill=%27%23212529%27%3e%3cpath fill-rule=%27evenodd%27 d=%27M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z%27/%3e%3c/svg%3e"},647:n=>{"use strict";n.exports="data:image/svg+xml,%3csvg xmlns=%27http://www.w3.org/2000/svg%27 viewBox=%270 0 16 16%27 fill=%27%23fff%27%3e%3cpath d=%27M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z%27/%3e%3c/svg%3e"},692:n=>{"use strict";n.exports="data:image/svg+xml,%3csvg xmlns=%27http://www.w3.org/2000/svg%27 viewBox=%270 0 16 16%27 fill=%27%23fff%27%3e%3cpath d=%27M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z%27/%3e%3c/svg%3e"},214:n=>{"use strict";n.exports="data:image/svg+xml,%3csvg xmlns=%27http://www.w3.org/2000/svg%27 viewBox=%270 0 16 16%27%3e%3cpath fill=%27none%27 stroke=%27%23343a40%27 stroke-linecap=%27round%27 stroke-linejoin=%27round%27 stroke-width=%272%27 d=%27M2 5l6 6 6-6%27/%3e%3c/svg%3e"},931:n=>{"use strict";n.exports="data:image/svg+xml,%3csvg xmlns=%27http://www.w3.org/2000/svg%27 viewBox=%270 0 20 20%27%3e%3cpath fill=%27none%27 stroke=%27%23fff%27 stroke-linecap=%27round%27 stroke-linejoin=%27round%27 stroke-width=%273%27 d=%27M6 10h8%27/%3e%3c/svg%3e"},349:n=>{"use strict";n.exports="data:image/svg+xml,%3csvg xmlns=%27http://www.w3.org/2000/svg%27 viewBox=%270 0 20 20%27%3e%3cpath fill=%27none%27 stroke=%27%23fff%27 stroke-linecap=%27round%27 stroke-linejoin=%27round%27 stroke-width=%273%27 d=%27M6 10l3 3l6-6%27/%3e%3c/svg%3e"},217:n=>{"use strict";n.exports="data:image/svg+xml,%3csvg xmlns=%27http://www.w3.org/2000/svg%27 viewBox=%270 0 30 30%27%3e%3cpath stroke=%27rgba%280, 0, 0, 0.55%29%27 stroke-linecap=%27round%27 stroke-miterlimit=%2710%27 stroke-width=%272%27 d=%27M4 7h22M4 15h22M4 23h22%27/%3e%3c/svg%3e"},956:n=>{"use strict";n.exports="data:image/svg+xml,%3csvg xmlns=%27http://www.w3.org/2000/svg%27 viewBox=%270 0 30 30%27%3e%3cpath stroke=%27rgba%28255, 255, 255, 0.55%29%27 stroke-linecap=%27round%27 stroke-miterlimit=%2710%27 stroke-width=%272%27 d=%27M4 7h22M4 15h22M4 23h22%27/%3e%3c/svg%3e"},819:n=>{"use strict";n.exports="data:image/svg+xml,%3csvg xmlns=%27http://www.w3.org/2000/svg%27 viewBox=%270 0 8 8%27%3e%3cpath fill=%27%23198754%27 d=%27M2.3 6.73L.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z%27/%3e%3c/svg%3e"}},t={};function e(o){var r=t[o];if(void 0!==r)return r.exports;var i=t[o]={id:o,loaded:!1,exports:{}};return n[o].call(i.exports,i,i.exports,e),i.loaded=!0,i.exports}e.m=n,e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var o in t)e.o(t,o)&&!e.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:t[o]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),e.r=n=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},e.nmd=n=>(n.paths=[],n.children||(n.children=[]),n),e.b=document.baseURI||self.location.href,(()=>{"use strict";var n={};e.r(n),e.d(n,{afterMain:()=>U,afterRead:()=>z,afterWrite:()=>j,applyStyles:()=>Q,arrow:()=>pn,auto:()=>w,basePlacements:()=>$,beforeMain:()=>S,beforeRead:()=>P,beforeWrite:()=>M,bottom:()=>h,clippingParents:()=>k,computeStyles:()=>gn,createPopper:()=>Gn,createPopperBase:()=>Ln,createPopperLite:()=>Rn,detectOverflow:()=>Jn,end:()=>y,eventListeners:()=>Cn,flip:()=>Pn,hide:()=>Sn,left:()=>v,main:()=>F,modifierPhases:()=>T,offset:()=>Fn,placements:()=>J,popper:()=>I,popperGenerator:()=>Wn,popperOffsets:()=>Un,preventOverflow:()=>Mn,read:()=>D,reference:()=>_,right:()=>B,start:()=>x,top:()=>C,variationPlacements:()=>O,viewport:()=>E,write:()=>q});var t=e(486),o=e.n(t),r=e(379),i=e.n(r),a=e(795),A=e.n(a),l=e(569),s=e.n(l),d=e(565),c=e.n(d),p=e(216),u=e.n(p),m=e(589),f=e.n(m),g=e(332),b={};b.styleTagTransform=f(),b.setAttributes=c(),b.insert=s().bind(null,"head"),b.domAPI=A(),b.insertStyleElement=u(),i()(g.Z,b),g.Z&&g.Z.locals&&g.Z.locals;var C="top",h="bottom",B="right",v="left",w="auto",$=[C,h,B,v],x="start",y="end",k="clippingParents",E="viewport",I="popper",_="reference",O=$.reduce((function(n,t){return n.concat([t+"-"+x,t+"-"+y])}),[]),J=[].concat($,[w]).reduce((function(n,t){return n.concat([t,t+"-"+x,t+"-"+y])}),[]),P="beforeRead",D="read",z="afterRead",S="beforeMain",F="main",U="afterMain",M="beforeWrite",q="write",j="afterWrite",T=[P,D,z,S,F,U,M,q,j];function N(n){return n?(n.nodeName||"").toLowerCase():null}function W(n){if(null==n)return window;if("[object Window]"!==n.toString()){var t=n.ownerDocument;return t&&t.defaultView||window}return n}function L(n){return n instanceof W(n).Element||n instanceof Element}function G(n){return n instanceof W(n).HTMLElement||n instanceof HTMLElement}function R(n){return"undefined"!=typeof ShadowRoot&&(n instanceof W(n).ShadowRoot||n instanceof ShadowRoot)}const Q={name:"applyStyles",enabled:!0,phase:"write",fn:function(n){var t=n.state;Object.keys(t.elements).forEach((function(n){var e=t.styles[n]||{},o=t.attributes[n]||{},r=t.elements[n];G(r)&&N(r)&&(Object.assign(r.style,e),Object.keys(o).forEach((function(n){var t=o[n];!1===t?r.removeAttribute(n):r.setAttribute(n,!0===t?"":t)})))}))},effect:function(n){var t=n.state,e={popper:{position:t.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(t.elements.popper.style,e.popper),t.styles=e,t.elements.arrow&&Object.assign(t.elements.arrow.style,e.arrow),function(){Object.keys(t.elements).forEach((function(n){var o=t.elements[n],r=t.attributes[n]||{},i=Object.keys(t.styles.hasOwnProperty(n)?t.styles[n]:e[n]).reduce((function(n,t){return n[t]="",n}),{});G(o)&&N(o)&&(Object.assign(o.style,i),Object.keys(r).forEach((function(n){o.removeAttribute(n)})))}))}},requires:["computeStyles"]};function Y(n){return n.split("-")[0]}var K=Math.max,H=Math.min,V=Math.round;function X(n,t){void 0===t&&(t=!1);var e=n.getBoundingClientRect(),o=1,r=1;if(G(n)&&t){var i=n.offsetHeight,a=n.offsetWidth;a>0&&(o=V(e.width)/a||1),i>0&&(r=V(e.height)/i||1)}return{width:e.width/o,height:e.height/r,top:e.top/r,right:e.right/o,bottom:e.bottom/r,left:e.left/o,x:e.left/o,y:e.top/r}}function Z(n){var t=X(n),e=n.offsetWidth,o=n.offsetHeight;return Math.abs(t.width-e)<=1&&(e=t.width),Math.abs(t.height-o)<=1&&(o=t.height),{x:n.offsetLeft,y:n.offsetTop,width:e,height:o}}function nn(n,t){var e=t.getRootNode&&t.getRootNode();if(n.contains(t))return!0;if(e&&R(e)){var o=t;do{if(o&&n.isSameNode(o))return!0;o=o.parentNode||o.host}while(o)}return!1}function tn(n){return W(n).getComputedStyle(n)}function en(n){return["table","td","th"].indexOf(N(n))>=0}function on(n){return((L(n)?n.ownerDocument:n.document)||window.document).documentElement}function rn(n){return"html"===N(n)?n:n.assignedSlot||n.parentNode||(R(n)?n.host:null)||on(n)}function an(n){return G(n)&&"fixed"!==tn(n).position?n.offsetParent:null}function An(n){for(var t=W(n),e=an(n);e&&en(e)&&"static"===tn(e).position;)e=an(e);return e&&("html"===N(e)||"body"===N(e)&&"static"===tn(e).position)?t:e||function(n){var t=-1!==navigator.userAgent.toLowerCase().indexOf("firefox");if(-1!==navigator.userAgent.indexOf("Trident")&&G(n)&&"fixed"===tn(n).position)return null;for(var e=rn(n);G(e)&&["html","body"].indexOf(N(e))<0;){var o=tn(e);if("none"!==o.transform||"none"!==o.perspective||"paint"===o.contain||-1!==["transform","perspective"].indexOf(o.willChange)||t&&"filter"===o.willChange||t&&o.filter&&"none"!==o.filter)return e;e=e.parentNode}return null}(n)||t}function ln(n){return["top","bottom"].indexOf(n)>=0?"x":"y"}function sn(n,t,e){return K(n,H(t,e))}function dn(n){return Object.assign({},{top:0,right:0,bottom:0,left:0},n)}function cn(n,t){return t.reduce((function(t,e){return t[e]=n,t}),{})}const pn={name:"arrow",enabled:!0,phase:"main",fn:function(n){var t,e=n.state,o=n.name,r=n.options,i=e.elements.arrow,a=e.modifiersData.popperOffsets,A=Y(e.placement),l=ln(A),s=[v,B].indexOf(A)>=0?"height":"width";if(i&&a){var d=function(n,t){return dn("number"!=typeof(n="function"==typeof n?n(Object.assign({},t.rects,{placement:t.placement})):n)?n:cn(n,$))}(r.padding,e),c=Z(i),p="y"===l?C:v,u="y"===l?h:B,m=e.rects.reference[s]+e.rects.reference[l]-a[l]-e.rects.popper[s],f=a[l]-e.rects.reference[l],g=An(i),b=g?"y"===l?g.clientHeight||0:g.clientWidth||0:0,w=m/2-f/2,x=d[p],y=b-c[s]-d[u],k=b/2-c[s]/2+w,E=sn(x,k,y),I=l;e.modifiersData[o]=((t={})[I]=E,t.centerOffset=E-k,t)}},effect:function(n){var t=n.state,e=n.options.element,o=void 0===e?"[data-popper-arrow]":e;null!=o&&("string"!=typeof o||(o=t.elements.popper.querySelector(o)))&&nn(t.elements.popper,o)&&(t.elements.arrow=o)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function un(n){return n.split("-")[1]}var mn={top:"auto",right:"auto",bottom:"auto",left:"auto"};function fn(n){var t,e=n.popper,o=n.popperRect,r=n.placement,i=n.variation,a=n.offsets,A=n.position,l=n.gpuAcceleration,s=n.adaptive,d=n.roundOffsets,c=n.isFixed,p=a.x,u=void 0===p?0:p,m=a.y,f=void 0===m?0:m,g="function"==typeof d?d({x:u,y:f}):{x:u,y:f};u=g.x,f=g.y;var b=a.hasOwnProperty("x"),w=a.hasOwnProperty("y"),$=v,x=C,k=window;if(s){var E=An(e),I="clientHeight",_="clientWidth";E===W(e)&&"static"!==tn(E=on(e)).position&&"absolute"===A&&(I="scrollHeight",_="scrollWidth"),E=E,(r===C||(r===v||r===B)&&i===y)&&(x=h,f-=(c&&k.visualViewport?k.visualViewport.height:E[I])-o.height,f*=l?1:-1),r!==v&&(r!==C&&r!==h||i!==y)||($=B,u-=(c&&k.visualViewport?k.visualViewport.width:E[_])-o.width,u*=l?1:-1)}var O,J=Object.assign({position:A},s&&mn),P=!0===d?function(n){var t=n.x,e=n.y,o=window.devicePixelRatio||1;return{x:V(t*o)/o||0,y:V(e*o)/o||0}}({x:u,y:f}):{x:u,y:f};return u=P.x,f=P.y,l?Object.assign({},J,((O={})[x]=w?"0":"",O[$]=b?"0":"",O.transform=(k.devicePixelRatio||1)<=1?"translate("+u+"px, "+f+"px)":"translate3d("+u+"px, "+f+"px, 0)",O)):Object.assign({},J,((t={})[x]=w?f+"px":"",t[$]=b?u+"px":"",t.transform="",t))}const gn={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(n){var t=n.state,e=n.options,o=e.gpuAcceleration,r=void 0===o||o,i=e.adaptive,a=void 0===i||i,A=e.roundOffsets,l=void 0===A||A,s={placement:Y(t.placement),variation:un(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:r,isFixed:"fixed"===t.options.strategy};null!=t.modifiersData.popperOffsets&&(t.styles.popper=Object.assign({},t.styles.popper,fn(Object.assign({},s,{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:a,roundOffsets:l})))),null!=t.modifiersData.arrow&&(t.styles.arrow=Object.assign({},t.styles.arrow,fn(Object.assign({},s,{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:l})))),t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-placement":t.placement})},data:{}};var bn={passive:!0};const Cn={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(n){var t=n.state,e=n.instance,o=n.options,r=o.scroll,i=void 0===r||r,a=o.resize,A=void 0===a||a,l=W(t.elements.popper),s=[].concat(t.scrollParents.reference,t.scrollParents.popper);return i&&s.forEach((function(n){n.addEventListener("scroll",e.update,bn)})),A&&l.addEventListener("resize",e.update,bn),function(){i&&s.forEach((function(n){n.removeEventListener("scroll",e.update,bn)})),A&&l.removeEventListener("resize",e.update,bn)}},data:{}};var hn={left:"right",right:"left",bottom:"top",top:"bottom"};function Bn(n){return n.replace(/left|right|bottom|top/g,(function(n){return hn[n]}))}var vn={start:"end",end:"start"};function wn(n){return n.replace(/start|end/g,(function(n){return vn[n]}))}function $n(n){var t=W(n);return{scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}function xn(n){return X(on(n)).left+$n(n).scrollLeft}function yn(n){var t=tn(n),e=t.overflow,o=t.overflowX,r=t.overflowY;return/auto|scroll|overlay|hidden/.test(e+r+o)}function kn(n){return["html","body","#document"].indexOf(N(n))>=0?n.ownerDocument.body:G(n)&&yn(n)?n:kn(rn(n))}function En(n,t){var e;void 0===t&&(t=[]);var o=kn(n),r=o===(null==(e=n.ownerDocument)?void 0:e.body),i=W(o),a=r?[i].concat(i.visualViewport||[],yn(o)?o:[]):o,A=t.concat(a);return r?A:A.concat(En(rn(a)))}function In(n){return Object.assign({},n,{left:n.x,top:n.y,right:n.x+n.width,bottom:n.y+n.height})}function _n(n,t){return t===E?In(function(n){var t=W(n),e=on(n),o=t.visualViewport,r=e.clientWidth,i=e.clientHeight,a=0,A=0;return o&&(r=o.width,i=o.height,/^((?!chrome|android).)*safari/i.test(navigator.userAgent)||(a=o.offsetLeft,A=o.offsetTop)),{width:r,height:i,x:a+xn(n),y:A}}(n)):L(t)?function(n){var t=X(n);return t.top=t.top+n.clientTop,t.left=t.left+n.clientLeft,t.bottom=t.top+n.clientHeight,t.right=t.left+n.clientWidth,t.width=n.clientWidth,t.height=n.clientHeight,t.x=t.left,t.y=t.top,t}(t):In(function(n){var t,e=on(n),o=$n(n),r=null==(t=n.ownerDocument)?void 0:t.body,i=K(e.scrollWidth,e.clientWidth,r?r.scrollWidth:0,r?r.clientWidth:0),a=K(e.scrollHeight,e.clientHeight,r?r.scrollHeight:0,r?r.clientHeight:0),A=-o.scrollLeft+xn(n),l=-o.scrollTop;return"rtl"===tn(r||e).direction&&(A+=K(e.clientWidth,r?r.clientWidth:0)-i),{width:i,height:a,x:A,y:l}}(on(n)))}function On(n){var t,e=n.reference,o=n.element,r=n.placement,i=r?Y(r):null,a=r?un(r):null,A=e.x+e.width/2-o.width/2,l=e.y+e.height/2-o.height/2;switch(i){case C:t={x:A,y:e.y-o.height};break;case h:t={x:A,y:e.y+e.height};break;case B:t={x:e.x+e.width,y:l};break;case v:t={x:e.x-o.width,y:l};break;default:t={x:e.x,y:e.y}}var s=i?ln(i):null;if(null!=s){var d="y"===s?"height":"width";switch(a){case x:t[s]=t[s]-(e[d]/2-o[d]/2);break;case y:t[s]=t[s]+(e[d]/2-o[d]/2)}}return t}function Jn(n,t){void 0===t&&(t={});var e=t,o=e.placement,r=void 0===o?n.placement:o,i=e.boundary,a=void 0===i?k:i,A=e.rootBoundary,l=void 0===A?E:A,s=e.elementContext,d=void 0===s?I:s,c=e.altBoundary,p=void 0!==c&&c,u=e.padding,m=void 0===u?0:u,f=dn("number"!=typeof m?m:cn(m,$)),g=d===I?_:I,b=n.rects.popper,v=n.elements[p?g:d],w=function(n,t,e){var o="clippingParents"===t?function(n){var t=En(rn(n)),e=["absolute","fixed"].indexOf(tn(n).position)>=0&&G(n)?An(n):n;return L(e)?t.filter((function(n){return L(n)&&nn(n,e)&&"body"!==N(n)})):[]}(n):[].concat(t),r=[].concat(o,[e]),i=r[0],a=r.reduce((function(t,e){var o=_n(n,e);return t.top=K(o.top,t.top),t.right=H(o.right,t.right),t.bottom=H(o.bottom,t.bottom),t.left=K(o.left,t.left),t}),_n(n,i));return a.width=a.right-a.left,a.height=a.bottom-a.top,a.x=a.left,a.y=a.top,a}(L(v)?v:v.contextElement||on(n.elements.popper),a,l),x=X(n.elements.reference),y=On({reference:x,element:b,strategy:"absolute",placement:r}),O=In(Object.assign({},b,y)),J=d===I?O:x,P={top:w.top-J.top+f.top,bottom:J.bottom-w.bottom+f.bottom,left:w.left-J.left+f.left,right:J.right-w.right+f.right},D=n.modifiersData.offset;if(d===I&&D){var z=D[r];Object.keys(P).forEach((function(n){var t=[B,h].indexOf(n)>=0?1:-1,e=[C,h].indexOf(n)>=0?"y":"x";P[n]+=z[e]*t}))}return P}const Pn={name:"flip",enabled:!0,phase:"main",fn:function(n){var t=n.state,e=n.options,o=n.name;if(!t.modifiersData[o]._skip){for(var r=e.mainAxis,i=void 0===r||r,a=e.altAxis,A=void 0===a||a,l=e.fallbackPlacements,s=e.padding,d=e.boundary,c=e.rootBoundary,p=e.altBoundary,u=e.flipVariations,m=void 0===u||u,f=e.allowedAutoPlacements,g=t.options.placement,b=Y(g),y=l||(b!==g&&m?function(n){if(Y(n)===w)return[];var t=Bn(n);return[wn(n),t,wn(t)]}(g):[Bn(g)]),k=[g].concat(y).reduce((function(n,e){return n.concat(Y(e)===w?function(n,t){void 0===t&&(t={});var e=t,o=e.placement,r=e.boundary,i=e.rootBoundary,a=e.padding,A=e.flipVariations,l=e.allowedAutoPlacements,s=void 0===l?J:l,d=un(o),c=d?A?O:O.filter((function(n){return un(n)===d})):$,p=c.filter((function(n){return s.indexOf(n)>=0}));0===p.length&&(p=c);var u=p.reduce((function(t,e){return t[e]=Jn(n,{placement:e,boundary:r,rootBoundary:i,padding:a})[Y(e)],t}),{});return Object.keys(u).sort((function(n,t){return u[n]-u[t]}))}(t,{placement:e,boundary:d,rootBoundary:c,padding:s,flipVariations:m,allowedAutoPlacements:f}):e)}),[]),E=t.rects.reference,I=t.rects.popper,_=new Map,P=!0,D=k[0],z=0;z<k.length;z++){var S=k[z],F=Y(S),U=un(S)===x,M=[C,h].indexOf(F)>=0,q=M?"width":"height",j=Jn(t,{placement:S,boundary:d,rootBoundary:c,altBoundary:p,padding:s}),T=M?U?B:v:U?h:C;E[q]>I[q]&&(T=Bn(T));var N=Bn(T),W=[];if(i&&W.push(j[F]<=0),A&&W.push(j[T]<=0,j[N]<=0),W.every((function(n){return n}))){D=S,P=!1;break}_.set(S,W)}if(P)for(var L=function(n){var t=k.find((function(t){var e=_.get(t);if(e)return e.slice(0,n).every((function(n){return n}))}));if(t)return D=t,"break"},G=m?3:1;G>0&&"break"!==L(G);G--);t.placement!==D&&(t.modifiersData[o]._skip=!0,t.placement=D,t.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}};function Dn(n,t,e){return void 0===e&&(e={x:0,y:0}),{top:n.top-t.height-e.y,right:n.right-t.width+e.x,bottom:n.bottom-t.height+e.y,left:n.left-t.width-e.x}}function zn(n){return[C,B,h,v].some((function(t){return n[t]>=0}))}const Sn={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(n){var t=n.state,e=n.name,o=t.rects.reference,r=t.rects.popper,i=t.modifiersData.preventOverflow,a=Jn(t,{elementContext:"reference"}),A=Jn(t,{altBoundary:!0}),l=Dn(a,o),s=Dn(A,r,i),d=zn(l),c=zn(s);t.modifiersData[e]={referenceClippingOffsets:l,popperEscapeOffsets:s,isReferenceHidden:d,hasPopperEscaped:c},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":d,"data-popper-escaped":c})}},Fn={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(n){var t=n.state,e=n.options,o=n.name,r=e.offset,i=void 0===r?[0,0]:r,a=J.reduce((function(n,e){return n[e]=function(n,t,e){var o=Y(n),r=[v,C].indexOf(o)>=0?-1:1,i="function"==typeof e?e(Object.assign({},t,{placement:n})):e,a=i[0],A=i[1];return a=a||0,A=(A||0)*r,[v,B].indexOf(o)>=0?{x:A,y:a}:{x:a,y:A}}(e,t.rects,i),n}),{}),A=a[t.placement],l=A.x,s=A.y;null!=t.modifiersData.popperOffsets&&(t.modifiersData.popperOffsets.x+=l,t.modifiersData.popperOffsets.y+=s),t.modifiersData[o]=a}},Un={name:"popperOffsets",enabled:!0,phase:"read",fn:function(n){var t=n.state,e=n.name;t.modifiersData[e]=On({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}},Mn={name:"preventOverflow",enabled:!0,phase:"main",fn:function(n){var t=n.state,e=n.options,o=n.name,r=e.mainAxis,i=void 0===r||r,a=e.altAxis,A=void 0!==a&&a,l=e.boundary,s=e.rootBoundary,d=e.altBoundary,c=e.padding,p=e.tether,u=void 0===p||p,m=e.tetherOffset,f=void 0===m?0:m,g=Jn(t,{boundary:l,rootBoundary:s,padding:c,altBoundary:d}),b=Y(t.placement),w=un(t.placement),$=!w,y=ln(b),k="x"===y?"y":"x",E=t.modifiersData.popperOffsets,I=t.rects.reference,_=t.rects.popper,O="function"==typeof f?f(Object.assign({},t.rects,{placement:t.placement})):f,J="number"==typeof O?{mainAxis:O,altAxis:O}:Object.assign({mainAxis:0,altAxis:0},O),P=t.modifiersData.offset?t.modifiersData.offset[t.placement]:null,D={x:0,y:0};if(E){if(i){var z,S="y"===y?C:v,F="y"===y?h:B,U="y"===y?"height":"width",M=E[y],q=M+g[S],j=M-g[F],T=u?-_[U]/2:0,N=w===x?I[U]:_[U],W=w===x?-_[U]:-I[U],L=t.elements.arrow,G=u&&L?Z(L):{width:0,height:0},R=t.modifiersData["arrow#persistent"]?t.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},Q=R[S],V=R[F],X=sn(0,I[U],G[U]),nn=$?I[U]/2-T-X-Q-J.mainAxis:N-X-Q-J.mainAxis,tn=$?-I[U]/2+T+X+V+J.mainAxis:W+X+V+J.mainAxis,en=t.elements.arrow&&An(t.elements.arrow),on=en?"y"===y?en.clientTop||0:en.clientLeft||0:0,rn=null!=(z=null==P?void 0:P[y])?z:0,an=M+tn-rn,dn=sn(u?H(q,M+nn-rn-on):q,M,u?K(j,an):j);E[y]=dn,D[y]=dn-M}if(A){var cn,pn="x"===y?C:v,mn="x"===y?h:B,fn=E[k],gn="y"===k?"height":"width",bn=fn+g[pn],Cn=fn-g[mn],hn=-1!==[C,v].indexOf(b),Bn=null!=(cn=null==P?void 0:P[k])?cn:0,vn=hn?bn:fn-I[gn]-_[gn]-Bn+J.altAxis,wn=hn?fn+I[gn]+_[gn]-Bn-J.altAxis:Cn,$n=u&&hn?function(n,t,e){var o=sn(n,t,e);return o>e?e:o}(vn,fn,wn):sn(u?vn:bn,fn,u?wn:Cn);E[k]=$n,D[k]=$n-fn}t.modifiersData[o]=D}},requiresIfExists:["offset"]};function qn(n,t,e){void 0===e&&(e=!1);var o,r,i=G(t),a=G(t)&&function(n){var t=n.getBoundingClientRect(),e=V(t.width)/n.offsetWidth||1,o=V(t.height)/n.offsetHeight||1;return 1!==e||1!==o}(t),A=on(t),l=X(n,a),s={scrollLeft:0,scrollTop:0},d={x:0,y:0};return(i||!i&&!e)&&(("body"!==N(t)||yn(A))&&(s=(o=t)!==W(o)&&G(o)?{scrollLeft:(r=o).scrollLeft,scrollTop:r.scrollTop}:$n(o)),G(t)?((d=X(t,!0)).x+=t.clientLeft,d.y+=t.clientTop):A&&(d.x=xn(A))),{x:l.left+s.scrollLeft-d.x,y:l.top+s.scrollTop-d.y,width:l.width,height:l.height}}function jn(n){var t=new Map,e=new Set,o=[];function r(n){e.add(n.name),[].concat(n.requires||[],n.requiresIfExists||[]).forEach((function(n){if(!e.has(n)){var o=t.get(n);o&&r(o)}})),o.push(n)}return n.forEach((function(n){t.set(n.name,n)})),n.forEach((function(n){e.has(n.name)||r(n)})),o}var Tn={placement:"bottom",modifiers:[],strategy:"absolute"};function Nn(){for(var n=arguments.length,t=new Array(n),e=0;e<n;e++)t[e]=arguments[e];return!t.some((function(n){return!(n&&"function"==typeof n.getBoundingClientRect)}))}function Wn(n){void 0===n&&(n={});var t=n,e=t.defaultModifiers,o=void 0===e?[]:e,r=t.defaultOptions,i=void 0===r?Tn:r;return function(n,t,e){void 0===e&&(e=i);var r,a,A={placement:"bottom",orderedModifiers:[],options:Object.assign({},Tn,i),modifiersData:{},elements:{reference:n,popper:t},attributes:{},styles:{}},l=[],s=!1,d={state:A,setOptions:function(e){var r="function"==typeof e?e(A.options):e;c(),A.options=Object.assign({},i,A.options,r),A.scrollParents={reference:L(n)?En(n):n.contextElement?En(n.contextElement):[],popper:En(t)};var a,s,p=function(n){var t=jn(n);return T.reduce((function(n,e){return n.concat(t.filter((function(n){return n.phase===e})))}),[])}((a=[].concat(o,A.options.modifiers),s=a.reduce((function(n,t){var e=n[t.name];return n[t.name]=e?Object.assign({},e,t,{options:Object.assign({},e.options,t.options),data:Object.assign({},e.data,t.data)}):t,n}),{}),Object.keys(s).map((function(n){return s[n]}))));return A.orderedModifiers=p.filter((function(n){return n.enabled})),A.orderedModifiers.forEach((function(n){var t=n.name,e=n.options,o=void 0===e?{}:e,r=n.effect;if("function"==typeof r){var i=r({state:A,name:t,instance:d,options:o});l.push(i||function(){})}})),d.update()},forceUpdate:function(){if(!s){var n=A.elements,t=n.reference,e=n.popper;if(Nn(t,e)){A.rects={reference:qn(t,An(e),"fixed"===A.options.strategy),popper:Z(e)},A.reset=!1,A.placement=A.options.placement,A.orderedModifiers.forEach((function(n){return A.modifiersData[n.name]=Object.assign({},n.data)}));for(var o=0;o<A.orderedModifiers.length;o++)if(!0!==A.reset){var r=A.orderedModifiers[o],i=r.fn,a=r.options,l=void 0===a?{}:a,c=r.name;"function"==typeof i&&(A=i({state:A,options:l,name:c,instance:d})||A)}else A.reset=!1,o=-1}}},update:(r=function(){return new Promise((function(n){d.forceUpdate(),n(A)}))},function(){return a||(a=new Promise((function(n){Promise.resolve().then((function(){a=void 0,n(r())}))}))),a}),destroy:function(){c(),s=!0}};if(!Nn(n,t))return d;function c(){l.forEach((function(n){return n()})),l=[]}return d.setOptions(e).then((function(n){!s&&e.onFirstUpdate&&e.onFirstUpdate(n)})),d}}var Ln=Wn(),Gn=Wn({defaultModifiers:[Cn,Un,gn,Q,Fn,Pn,Mn,pn,Sn]}),Rn=Wn({defaultModifiers:[Cn,Un,gn,Q]});const Qn="transitionend",Yn=n=>{let t=n.getAttribute("data-bs-target");if(!t||"#"===t){let e=n.getAttribute("href");if(!e||!e.includes("#")&&!e.startsWith("."))return null;e.includes("#")&&!e.startsWith("#")&&(e=`#${e.split("#")[1]}`),t=e&&"#"!==e?e.trim():null}return t},Kn=n=>{const t=Yn(n);return t&&document.querySelector(t)?t:null},Hn=n=>{const t=Yn(n);return t?document.querySelector(t):null},Vn=n=>{n.dispatchEvent(new Event(Qn))},Xn=n=>!(!n||"object"!=typeof n)&&(void 0!==n.jquery&&(n=n[0]),void 0!==n.nodeType),Zn=n=>Xn(n)?n.jquery?n[0]:n:"string"==typeof n&&n.length>0?document.querySelector(n):null,nt=(n,t,e)=>{Object.keys(e).forEach((o=>{const r=e[o],i=t[o],a=i&&Xn(i)?"element":null==(A=i)?`${A}`:{}.toString.call(A).match(/\s([a-z]+)/i)[1].toLowerCase();var A;if(!new RegExp(r).test(a))throw new TypeError(`${n.toUpperCase()}: Option "${o}" provided type "${a}" but expected type "${r}".`)}))},tt=n=>!(!Xn(n)||0===n.getClientRects().length)&&"visible"===getComputedStyle(n).getPropertyValue("visibility"),et=n=>!n||n.nodeType!==Node.ELEMENT_NODE||!!n.classList.contains("disabled")||(void 0!==n.disabled?n.disabled:n.hasAttribute("disabled")&&"false"!==n.getAttribute("disabled")),ot=n=>{if(!document.documentElement.attachShadow)return null;if("function"==typeof n.getRootNode){const t=n.getRootNode();return t instanceof ShadowRoot?t:null}return n instanceof ShadowRoot?n:n.parentNode?ot(n.parentNode):null},rt=()=>{},it=n=>{n.offsetHeight},at=()=>{const{jQuery:n}=window;return n&&!document.body.hasAttribute("data-bs-no-jquery")?n:null},At=[],lt=()=>"rtl"===document.documentElement.dir,st=n=>{var t;t=()=>{const t=at();if(t){const e=n.NAME,o=t.fn[e];t.fn[e]=n.jQueryInterface,t.fn[e].Constructor=n,t.fn[e].noConflict=()=>(t.fn[e]=o,n.jQueryInterface)}},"loading"===document.readyState?(At.length||document.addEventListener("DOMContentLoaded",(()=>{At.forEach((n=>n()))})),At.push(t)):t()},dt=n=>{"function"==typeof n&&n()},ct=(n,t,e=!0)=>{if(!e)return void dt(n);const o=(n=>{if(!n)return 0;let{transitionDuration:t,transitionDelay:e}=window.getComputedStyle(n);const o=Number.parseFloat(t),r=Number.parseFloat(e);return o||r?(t=t.split(",")[0],e=e.split(",")[0],1e3*(Number.parseFloat(t)+Number.parseFloat(e))):0})(t)+5;let r=!1;const i=({target:e})=>{e===t&&(r=!0,t.removeEventListener(Qn,i),dt(n))};t.addEventListener(Qn,i),setTimeout((()=>{r||Vn(t)}),o)},pt=(n,t,e,o)=>{let r=n.indexOf(t);if(-1===r)return n[!e&&o?n.length-1:0];const i=n.length;return r+=e?1:-1,o&&(r=(r+i)%i),n[Math.max(0,Math.min(r,i-1))]},ut=/[^.]*(?=\..*)\.|.*/,mt=/\..*/,ft=/::\d+$/,gt={};let bt=1;const Ct={mouseenter:"mouseover",mouseleave:"mouseout"},ht=/^(mouseenter|mouseleave)/i,Bt=new Set(["click","dblclick","mouseup","mousedown","contextmenu","mousewheel","DOMMouseScroll","mouseover","mouseout","mousemove","selectstart","selectend","keydown","keypress","keyup","orientationchange","touchstart","touchmove","touchend","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","gesturestart","gesturechange","gestureend","focus","blur","change","reset","select","submit","focusin","focusout","load","unload","beforeunload","resize","move","DOMContentLoaded","readystatechange","error","abort","scroll"]);function vt(n,t){return t&&`${t}::${bt++}`||n.uidEvent||bt++}function wt(n){const t=vt(n);return n.uidEvent=t,gt[t]=gt[t]||{},gt[t]}function $t(n,t,e=null){const o=Object.keys(n);for(let r=0,i=o.length;r<i;r++){const i=n[o[r]];if(i.originalHandler===t&&i.delegationSelector===e)return i}return null}function xt(n,t,e){const o="string"==typeof t,r=o?e:t;let i=Et(n);return Bt.has(i)||(i=n),[o,r,i]}function yt(n,t,e,o,r){if("string"!=typeof t||!n)return;if(e||(e=o,o=null),ht.test(t)){const n=n=>function(t){if(!t.relatedTarget||t.relatedTarget!==t.delegateTarget&&!t.delegateTarget.contains(t.relatedTarget))return n.call(this,t)};o?o=n(o):e=n(e)}const[i,a,A]=xt(t,e,o),l=wt(n),s=l[A]||(l[A]={}),d=$t(s,a,i?e:null);if(d)return void(d.oneOff=d.oneOff&&r);const c=vt(a,t.replace(ut,"")),p=i?function(n,t,e){return function o(r){const i=n.querySelectorAll(t);for(let{target:a}=r;a&&a!==this;a=a.parentNode)for(let A=i.length;A--;)if(i[A]===a)return r.delegateTarget=a,o.oneOff&&It.off(n,r.type,t,e),e.apply(a,[r]);return null}}(n,e,o):function(n,t){return function e(o){return o.delegateTarget=n,e.oneOff&&It.off(n,o.type,t),t.apply(n,[o])}}(n,e);p.delegationSelector=i?e:null,p.originalHandler=a,p.oneOff=r,p.uidEvent=c,s[c]=p,n.addEventListener(A,p,i)}function kt(n,t,e,o,r){const i=$t(t[e],o,r);i&&(n.removeEventListener(e,i,Boolean(r)),delete t[e][i.uidEvent])}function Et(n){return n=n.replace(mt,""),Ct[n]||n}const It={on(n,t,e,o){yt(n,t,e,o,!1)},one(n,t,e,o){yt(n,t,e,o,!0)},off(n,t,e,o){if("string"!=typeof t||!n)return;const[r,i,a]=xt(t,e,o),A=a!==t,l=wt(n),s=t.startsWith(".");if(void 0!==i){if(!l||!l[a])return;return void kt(n,l,a,i,r?e:null)}s&&Object.keys(l).forEach((e=>{!function(n,t,e,o){const r=t[e]||{};Object.keys(r).forEach((i=>{if(i.includes(o)){const o=r[i];kt(n,t,e,o.originalHandler,o.delegationSelector)}}))}(n,l,e,t.slice(1))}));const d=l[a]||{};Object.keys(d).forEach((e=>{const o=e.replace(ft,"");if(!A||t.includes(o)){const t=d[e];kt(n,l,a,t.originalHandler,t.delegationSelector)}}))},trigger(n,t,e){if("string"!=typeof t||!n)return null;const o=at(),r=Et(t),i=t!==r,a=Bt.has(r);let A,l=!0,s=!0,d=!1,c=null;return i&&o&&(A=o.Event(t,e),o(n).trigger(A),l=!A.isPropagationStopped(),s=!A.isImmediatePropagationStopped(),d=A.isDefaultPrevented()),a?(c=document.createEvent("HTMLEvents"),c.initEvent(r,l,!0)):c=new CustomEvent(t,{bubbles:l,cancelable:!0}),void 0!==e&&Object.keys(e).forEach((n=>{Object.defineProperty(c,n,{get:()=>e[n]})})),d&&c.preventDefault(),s&&n.dispatchEvent(c),c.defaultPrevented&&void 0!==A&&A.preventDefault(),c}},_t=new Map,Ot={set(n,t,e){_t.has(n)||_t.set(n,new Map);const o=_t.get(n);o.has(t)||0===o.size?o.set(t,e):console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(o.keys())[0]}.`)},get:(n,t)=>_t.has(n)&&_t.get(n).get(t)||null,remove(n,t){if(!_t.has(n))return;const e=_t.get(n);e.delete(t),0===e.size&&_t.delete(n)}};class Jt{constructor(n){(n=Zn(n))&&(this._element=n,Ot.set(this._element,this.constructor.DATA_KEY,this))}dispose(){Ot.remove(this._element,this.constructor.DATA_KEY),It.off(this._element,this.constructor.EVENT_KEY),Object.getOwnPropertyNames(this).forEach((n=>{this[n]=null}))}_queueCallback(n,t,e=!0){ct(n,t,e)}static getInstance(n){return Ot.get(Zn(n),this.DATA_KEY)}static getOrCreateInstance(n,t={}){return this.getInstance(n)||new this(n,"object"==typeof t?t:null)}static get VERSION(){return"5.1.3"}static get NAME(){throw new Error('You have to implement the static method "NAME", for each component!')}static get DATA_KEY(){return`bs.${this.NAME}`}static get EVENT_KEY(){return`.${this.DATA_KEY}`}}const Pt=(n,t="hide")=>{const e=`click.dismiss${n.EVENT_KEY}`,o=n.NAME;It.on(document,e,`[data-bs-dismiss="${o}"]`,(function(e){if(["A","AREA"].includes(this.tagName)&&e.preventDefault(),et(this))return;const r=Hn(this)||this.closest(`.${o}`);n.getOrCreateInstance(r)[t]()}))};class Dt extends Jt{static get NAME(){return"alert"}close(){if(It.trigger(this._element,"close.bs.alert").defaultPrevented)return;this._element.classList.remove("show");const n=this._element.classList.contains("fade");this._queueCallback((()=>this._destroyElement()),this._element,n)}_destroyElement(){this._element.remove(),It.trigger(this._element,"closed.bs.alert"),this.dispose()}static jQueryInterface(n){return this.each((function(){const t=Dt.getOrCreateInstance(this);if("string"==typeof n){if(void 0===t[n]||n.startsWith("_")||"constructor"===n)throw new TypeError(`No method named "${n}"`);t[n](this)}}))}}Pt(Dt,"close"),st(Dt);const zt='[data-bs-toggle="button"]';class St extends Jt{static get NAME(){return"button"}toggle(){this._element.setAttribute("aria-pressed",this._element.classList.toggle("active"))}static jQueryInterface(n){return this.each((function(){const t=St.getOrCreateInstance(this);"toggle"===n&&t[n]()}))}}function Ft(n){return"true"===n||"false"!==n&&(n===Number(n).toString()?Number(n):""===n||"null"===n?null:n)}function Ut(n){return n.replace(/[A-Z]/g,(n=>`-${n.toLowerCase()}`))}It.on(document,"click.bs.button.data-api",zt,(n=>{n.preventDefault();const t=n.target.closest(zt);St.getOrCreateInstance(t).toggle()})),st(St);const Mt={setDataAttribute(n,t,e){n.setAttribute(`data-bs-${Ut(t)}`,e)},removeDataAttribute(n,t){n.removeAttribute(`data-bs-${Ut(t)}`)},getDataAttributes(n){if(!n)return{};const t={};return Object.keys(n.dataset).filter((n=>n.startsWith("bs"))).forEach((e=>{let o=e.replace(/^bs/,"");o=o.charAt(0).toLowerCase()+o.slice(1,o.length),t[o]=Ft(n.dataset[e])})),t},getDataAttribute:(n,t)=>Ft(n.getAttribute(`data-bs-${Ut(t)}`)),offset(n){const t=n.getBoundingClientRect();return{top:t.top+window.pageYOffset,left:t.left+window.pageXOffset}},position:n=>({top:n.offsetTop,left:n.offsetLeft})},qt={find:(n,t=document.documentElement)=>[].concat(...Element.prototype.querySelectorAll.call(t,n)),findOne:(n,t=document.documentElement)=>Element.prototype.querySelector.call(t,n),children:(n,t)=>[].concat(...n.children).filter((n=>n.matches(t))),parents(n,t){const e=[];let o=n.parentNode;for(;o&&o.nodeType===Node.ELEMENT_NODE&&3!==o.nodeType;)o.matches(t)&&e.push(o),o=o.parentNode;return e},prev(n,t){let e=n.previousElementSibling;for(;e;){if(e.matches(t))return[e];e=e.previousElementSibling}return[]},next(n,t){let e=n.nextElementSibling;for(;e;){if(e.matches(t))return[e];e=e.nextElementSibling}return[]},focusableChildren(n){const t=["a","button","input","textarea","select","details","[tabindex]",'[contenteditable="true"]'].map((n=>`${n}:not([tabindex^="-"])`)).join(", ");return this.find(t,n).filter((n=>!et(n)&&tt(n)))}},jt="carousel",Tt={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0,touch:!0},Nt={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean",touch:"boolean"},Wt="next",Lt="prev",Gt="left",Rt="right",Qt={ArrowLeft:Rt,ArrowRight:Gt},Yt="slid.bs.carousel",Kt="active",Ht=".active.carousel-item";class Vt extends Jt{constructor(n,t){super(n),this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this.touchStartX=0,this.touchDeltaX=0,this._config=this._getConfig(t),this._indicatorsElement=qt.findOne(".carousel-indicators",this._element),this._touchSupported="ontouchstart"in document.documentElement||navigator.maxTouchPoints>0,this._pointerEvent=Boolean(window.PointerEvent),this._addEventListeners()}static get Default(){return Tt}static get NAME(){return jt}next(){this._slide(Wt)}nextWhenVisible(){!document.hidden&&tt(this._element)&&this.next()}prev(){this._slide(Lt)}pause(n){n||(this._isPaused=!0),qt.findOne(".carousel-item-next, .carousel-item-prev",this._element)&&(Vn(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null}cycle(n){n||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config&&this._config.interval&&!this._isPaused&&(this._updateInterval(),this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))}to(n){this._activeElement=qt.findOne(Ht,this._element);const t=this._getItemIndex(this._activeElement);if(n>this._items.length-1||n<0)return;if(this._isSliding)return void It.one(this._element,Yt,(()=>this.to(n)));if(t===n)return this.pause(),void this.cycle();const e=n>t?Wt:Lt;this._slide(e,this._items[n])}_getConfig(n){return n={...Tt,...Mt.getDataAttributes(this._element),..."object"==typeof n?n:{}},nt(jt,n,Nt),n}_handleSwipe(){const n=Math.abs(this.touchDeltaX);if(n<=40)return;const t=n/this.touchDeltaX;this.touchDeltaX=0,t&&this._slide(t>0?Rt:Gt)}_addEventListeners(){this._config.keyboard&&It.on(this._element,"keydown.bs.carousel",(n=>this._keydown(n))),"hover"===this._config.pause&&(It.on(this._element,"mouseenter.bs.carousel",(n=>this.pause(n))),It.on(this._element,"mouseleave.bs.carousel",(n=>this.cycle(n)))),this._config.touch&&this._touchSupported&&this._addTouchEventListeners()}_addTouchEventListeners(){const n=n=>this._pointerEvent&&("pen"===n.pointerType||"touch"===n.pointerType),t=t=>{n(t)?this.touchStartX=t.clientX:this._pointerEvent||(this.touchStartX=t.touches[0].clientX)},e=n=>{this.touchDeltaX=n.touches&&n.touches.length>1?0:n.touches[0].clientX-this.touchStartX},o=t=>{n(t)&&(this.touchDeltaX=t.clientX-this.touchStartX),this._handleSwipe(),"hover"===this._config.pause&&(this.pause(),this.touchTimeout&&clearTimeout(this.touchTimeout),this.touchTimeout=setTimeout((n=>this.cycle(n)),500+this._config.interval))};qt.find(".carousel-item img",this._element).forEach((n=>{It.on(n,"dragstart.bs.carousel",(n=>n.preventDefault()))})),this._pointerEvent?(It.on(this._element,"pointerdown.bs.carousel",(n=>t(n))),It.on(this._element,"pointerup.bs.carousel",(n=>o(n))),this._element.classList.add("pointer-event")):(It.on(this._element,"touchstart.bs.carousel",(n=>t(n))),It.on(this._element,"touchmove.bs.carousel",(n=>e(n))),It.on(this._element,"touchend.bs.carousel",(n=>o(n))))}_keydown(n){if(/input|textarea/i.test(n.target.tagName))return;const t=Qt[n.key];t&&(n.preventDefault(),this._slide(t))}_getItemIndex(n){return this._items=n&&n.parentNode?qt.find(".carousel-item",n.parentNode):[],this._items.indexOf(n)}_getItemByOrder(n,t){const e=n===Wt;return pt(this._items,t,e,this._config.wrap)}_triggerSlideEvent(n,t){const e=this._getItemIndex(n),o=this._getItemIndex(qt.findOne(Ht,this._element));return It.trigger(this._element,"slide.bs.carousel",{relatedTarget:n,direction:t,from:o,to:e})}_setActiveIndicatorElement(n){if(this._indicatorsElement){const t=qt.findOne(".active",this._indicatorsElement);t.classList.remove(Kt),t.removeAttribute("aria-current");const e=qt.find("[data-bs-target]",this._indicatorsElement);for(let t=0;t<e.length;t++)if(Number.parseInt(e[t].getAttribute("data-bs-slide-to"),10)===this._getItemIndex(n)){e[t].classList.add(Kt),e[t].setAttribute("aria-current","true");break}}}_updateInterval(){const n=this._activeElement||qt.findOne(Ht,this._element);if(!n)return;const t=Number.parseInt(n.getAttribute("data-bs-interval"),10);t?(this._config.defaultInterval=this._config.defaultInterval||this._config.interval,this._config.interval=t):this._config.interval=this._config.defaultInterval||this._config.interval}_slide(n,t){const e=this._directionToOrder(n),o=qt.findOne(Ht,this._element),r=this._getItemIndex(o),i=t||this._getItemByOrder(e,o),a=this._getItemIndex(i),A=Boolean(this._interval),l=e===Wt,s=l?"carousel-item-start":"carousel-item-end",d=l?"carousel-item-next":"carousel-item-prev",c=this._orderToDirection(e);if(i&&i.classList.contains(Kt))return void(this._isSliding=!1);if(this._isSliding)return;if(this._triggerSlideEvent(i,c).defaultPrevented)return;if(!o||!i)return;this._isSliding=!0,A&&this.pause(),this._setActiveIndicatorElement(i),this._activeElement=i;const p=()=>{It.trigger(this._element,Yt,{relatedTarget:i,direction:c,from:r,to:a})};if(this._element.classList.contains("slide")){i.classList.add(d),it(i),o.classList.add(s),i.classList.add(s);const n=()=>{i.classList.remove(s,d),i.classList.add(Kt),o.classList.remove(Kt,d,s),this._isSliding=!1,setTimeout(p,0)};this._queueCallback(n,o,!0)}else o.classList.remove(Kt),i.classList.add(Kt),this._isSliding=!1,p();A&&this.cycle()}_directionToOrder(n){return[Rt,Gt].includes(n)?lt()?n===Gt?Lt:Wt:n===Gt?Wt:Lt:n}_orderToDirection(n){return[Wt,Lt].includes(n)?lt()?n===Lt?Gt:Rt:n===Lt?Rt:Gt:n}static carouselInterface(n,t){const e=Vt.getOrCreateInstance(n,t);let{_config:o}=e;"object"==typeof t&&(o={...o,...t});const r="string"==typeof t?t:o.slide;if("number"==typeof t)e.to(t);else if("string"==typeof r){if(void 0===e[r])throw new TypeError(`No method named "${r}"`);e[r]()}else o.interval&&o.ride&&(e.pause(),e.cycle())}static jQueryInterface(n){return this.each((function(){Vt.carouselInterface(this,n)}))}static dataApiClickHandler(n){const t=Hn(this);if(!t||!t.classList.contains("carousel"))return;const e={...Mt.getDataAttributes(t),...Mt.getDataAttributes(this)},o=this.getAttribute("data-bs-slide-to");o&&(e.interval=!1),Vt.carouselInterface(t,e),o&&Vt.getInstance(t).to(o),n.preventDefault()}}It.on(document,"click.bs.carousel.data-api","[data-bs-slide], [data-bs-slide-to]",Vt.dataApiClickHandler),It.on(window,"load.bs.carousel.data-api",(()=>{const n=qt.find('[data-bs-ride="carousel"]');for(let t=0,e=n.length;t<e;t++)Vt.carouselInterface(n[t],Vt.getInstance(n[t]))})),st(Vt);const Xt="collapse",Zt={toggle:!0,parent:null},ne={toggle:"boolean",parent:"(null|element)"},te="show",ee="collapse",oe="collapsing",re="collapsed",ie=":scope .collapse .collapse",ae='[data-bs-toggle="collapse"]';class Ae extends Jt{constructor(n,t){super(n),this._isTransitioning=!1,this._config=this._getConfig(t),this._triggerArray=[];const e=qt.find(ae);for(let n=0,t=e.length;n<t;n++){const t=e[n],o=Kn(t),r=qt.find(o).filter((n=>n===this._element));null!==o&&r.length&&(this._selector=o,this._triggerArray.push(t))}this._initializeChildren(),this._config.parent||this._addAriaAndCollapsedClass(this._triggerArray,this._isShown()),this._config.toggle&&this.toggle()}static get Default(){return Zt}static get NAME(){return Xt}toggle(){this._isShown()?this.hide():this.show()}show(){if(this._isTransitioning||this._isShown())return;let n,t=[];if(this._config.parent){const n=qt.find(ie,this._config.parent);t=qt.find(".collapse.show, .collapse.collapsing",this._config.parent).filter((t=>!n.includes(t)))}const e=qt.findOne(this._selector);if(t.length){const o=t.find((n=>e!==n));if(n=o?Ae.getInstance(o):null,n&&n._isTransitioning)return}if(It.trigger(this._element,"show.bs.collapse").defaultPrevented)return;t.forEach((t=>{e!==t&&Ae.getOrCreateInstance(t,{toggle:!1}).hide(),n||Ot.set(t,"bs.collapse",null)}));const o=this._getDimension();this._element.classList.remove(ee),this._element.classList.add(oe),this._element.style[o]=0,this._addAriaAndCollapsedClass(this._triggerArray,!0),this._isTransitioning=!0;const r=`scroll${o[0].toUpperCase()+o.slice(1)}`;this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(oe),this._element.classList.add(ee,te),this._element.style[o]="",It.trigger(this._element,"shown.bs.collapse")}),this._element,!0),this._element.style[o]=`${this._element[r]}px`}hide(){if(this._isTransitioning||!this._isShown())return;if(It.trigger(this._element,"hide.bs.collapse").defaultPrevented)return;const n=this._getDimension();this._element.style[n]=`${this._element.getBoundingClientRect()[n]}px`,it(this._element),this._element.classList.add(oe),this._element.classList.remove(ee,te);const t=this._triggerArray.length;for(let n=0;n<t;n++){const t=this._triggerArray[n],e=Hn(t);e&&!this._isShown(e)&&this._addAriaAndCollapsedClass([t],!1)}this._isTransitioning=!0,this._element.style[n]="",this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(oe),this._element.classList.add(ee),It.trigger(this._element,"hidden.bs.collapse")}),this._element,!0)}_isShown(n=this._element){return n.classList.contains(te)}_getConfig(n){return(n={...Zt,...Mt.getDataAttributes(this._element),...n}).toggle=Boolean(n.toggle),n.parent=Zn(n.parent),nt(Xt,n,ne),n}_getDimension(){return this._element.classList.contains("collapse-horizontal")?"width":"height"}_initializeChildren(){if(!this._config.parent)return;const n=qt.find(ie,this._config.parent);qt.find(ae,this._config.parent).filter((t=>!n.includes(t))).forEach((n=>{const t=Hn(n);t&&this._addAriaAndCollapsedClass([n],this._isShown(t))}))}_addAriaAndCollapsedClass(n,t){n.length&&n.forEach((n=>{t?n.classList.remove(re):n.classList.add(re),n.setAttribute("aria-expanded",t)}))}static jQueryInterface(n){return this.each((function(){const t={};"string"==typeof n&&/show|hide/.test(n)&&(t.toggle=!1);const e=Ae.getOrCreateInstance(this,t);if("string"==typeof n){if(void 0===e[n])throw new TypeError(`No method named "${n}"`);e[n]()}}))}}It.on(document,"click.bs.collapse.data-api",ae,(function(n){("A"===n.target.tagName||n.delegateTarget&&"A"===n.delegateTarget.tagName)&&n.preventDefault();const t=Kn(this);qt.find(t).forEach((n=>{Ae.getOrCreateInstance(n,{toggle:!1}).toggle()}))})),st(Ae);const le="dropdown",se="Escape",de="Space",ce="ArrowUp",pe="ArrowDown",ue=new RegExp("ArrowUp|ArrowDown|Escape"),me="click.bs.dropdown.data-api",fe="keydown.bs.dropdown.data-api",ge="show",be='[data-bs-toggle="dropdown"]',Ce=".dropdown-menu",he=lt()?"top-end":"top-start",Be=lt()?"top-start":"top-end",ve=lt()?"bottom-end":"bottom-start",we=lt()?"bottom-start":"bottom-end",$e=lt()?"left-start":"right-start",xe=lt()?"right-start":"left-start",ye={offset:[0,2],boundary:"clippingParents",reference:"toggle",display:"dynamic",popperConfig:null,autoClose:!0},ke={offset:"(array|string|function)",boundary:"(string|element)",reference:"(string|element|object)",display:"string",popperConfig:"(null|object|function)",autoClose:"(boolean|string)"};class Ee extends Jt{constructor(n,t){super(n),this._popper=null,this._config=this._getConfig(t),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar()}static get Default(){return ye}static get DefaultType(){return ke}static get NAME(){return le}toggle(){return this._isShown()?this.hide():this.show()}show(){if(et(this._element)||this._isShown(this._menu))return;const n={relatedTarget:this._element};if(It.trigger(this._element,"show.bs.dropdown",n).defaultPrevented)return;const t=Ee.getParentFromElement(this._element);this._inNavbar?Mt.setDataAttribute(this._menu,"popper","none"):this._createPopper(t),"ontouchstart"in document.documentElement&&!t.closest(".navbar-nav")&&[].concat(...document.body.children).forEach((n=>It.on(n,"mouseover",rt))),this._element.focus(),this._element.setAttribute("aria-expanded",!0),this._menu.classList.add(ge),this._element.classList.add(ge),It.trigger(this._element,"shown.bs.dropdown",n)}hide(){if(et(this._element)||!this._isShown(this._menu))return;const n={relatedTarget:this._element};this._completeHide(n)}dispose(){this._popper&&this._popper.destroy(),super.dispose()}update(){this._inNavbar=this._detectNavbar(),this._popper&&this._popper.update()}_completeHide(n){It.trigger(this._element,"hide.bs.dropdown",n).defaultPrevented||("ontouchstart"in document.documentElement&&[].concat(...document.body.children).forEach((n=>It.off(n,"mouseover",rt))),this._popper&&this._popper.destroy(),this._menu.classList.remove(ge),this._element.classList.remove(ge),this._element.setAttribute("aria-expanded","false"),Mt.removeDataAttribute(this._menu,"popper"),It.trigger(this._element,"hidden.bs.dropdown",n))}_getConfig(n){if(n={...this.constructor.Default,...Mt.getDataAttributes(this._element),...n},nt(le,n,this.constructor.DefaultType),"object"==typeof n.reference&&!Xn(n.reference)&&"function"!=typeof n.reference.getBoundingClientRect)throw new TypeError(`${le.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);return n}_createPopper(t){if(void 0===n)throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");let e=this._element;"parent"===this._config.reference?e=t:Xn(this._config.reference)?e=Zn(this._config.reference):"object"==typeof this._config.reference&&(e=this._config.reference);const o=this._getPopperConfig(),r=o.modifiers.find((n=>"applyStyles"===n.name&&!1===n.enabled));this._popper=Gn(e,this._menu,o),r&&Mt.setDataAttribute(this._menu,"popper","static")}_isShown(n=this._element){return n.classList.contains(ge)}_getMenuElement(){return qt.next(this._element,Ce)[0]}_getPlacement(){const n=this._element.parentNode;if(n.classList.contains("dropend"))return $e;if(n.classList.contains("dropstart"))return xe;const t="end"===getComputedStyle(this._menu).getPropertyValue("--bs-position").trim();return n.classList.contains("dropup")?t?Be:he:t?we:ve}_detectNavbar(){return null!==this._element.closest(".navbar")}_getOffset(){const{offset:n}=this._config;return"string"==typeof n?n.split(",").map((n=>Number.parseInt(n,10))):"function"==typeof n?t=>n(t,this._element):n}_getPopperConfig(){const n={placement:this._getPlacement(),modifiers:[{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"offset",options:{offset:this._getOffset()}}]};return"static"===this._config.display&&(n.modifiers=[{name:"applyStyles",enabled:!1}]),{...n,..."function"==typeof this._config.popperConfig?this._config.popperConfig(n):this._config.popperConfig}}_selectMenuItem({key:n,target:t}){const e=qt.find(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",this._menu).filter(tt);e.length&&pt(e,t,n===pe,!e.includes(t)).focus()}static jQueryInterface(n){return this.each((function(){const t=Ee.getOrCreateInstance(this,n);if("string"==typeof n){if(void 0===t[n])throw new TypeError(`No method named "${n}"`);t[n]()}}))}static clearMenus(n){if(n&&(2===n.button||"keyup"===n.type&&"Tab"!==n.key))return;const t=qt.find(be);for(let e=0,o=t.length;e<o;e++){const o=Ee.getInstance(t[e]);if(!o||!1===o._config.autoClose)continue;if(!o._isShown())continue;const r={relatedTarget:o._element};if(n){const t=n.composedPath(),e=t.includes(o._menu);if(t.includes(o._element)||"inside"===o._config.autoClose&&!e||"outside"===o._config.autoClose&&e)continue;if(o._menu.contains(n.target)&&("keyup"===n.type&&"Tab"===n.key||/input|select|option|textarea|form/i.test(n.target.tagName)))continue;"click"===n.type&&(r.clickEvent=n)}o._completeHide(r)}}static getParentFromElement(n){return Hn(n)||n.parentNode}static dataApiKeydownHandler(n){if(/input|textarea/i.test(n.target.tagName)?n.key===de||n.key!==se&&(n.key!==pe&&n.key!==ce||n.target.closest(Ce)):!ue.test(n.key))return;const t=this.classList.contains(ge);if(!t&&n.key===se)return;if(n.preventDefault(),n.stopPropagation(),et(this))return;const e=this.matches(be)?this:qt.prev(this,be)[0],o=Ee.getOrCreateInstance(e);if(n.key!==se)return n.key===ce||n.key===pe?(t||o.show(),void o._selectMenuItem(n)):void(t&&n.key!==de||Ee.clearMenus());o.hide()}}It.on(document,fe,be,Ee.dataApiKeydownHandler),It.on(document,fe,Ce,Ee.dataApiKeydownHandler),It.on(document,me,Ee.clearMenus),It.on(document,"keyup.bs.dropdown.data-api",Ee.clearMenus),It.on(document,me,be,(function(n){n.preventDefault(),Ee.getOrCreateInstance(this).toggle()})),st(Ee);const Ie=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",_e=".sticky-top";class Oe{constructor(){this._element=document.body}getWidth(){const n=document.documentElement.clientWidth;return Math.abs(window.innerWidth-n)}hide(){const n=this.getWidth();this._disableOverFlow(),this._setElementAttributes(this._element,"paddingRight",(t=>t+n)),this._setElementAttributes(Ie,"paddingRight",(t=>t+n)),this._setElementAttributes(_e,"marginRight",(t=>t-n))}_disableOverFlow(){this._saveInitialAttribute(this._element,"overflow"),this._element.style.overflow="hidden"}_setElementAttributes(n,t,e){const o=this.getWidth();this._applyManipulationCallback(n,(n=>{if(n!==this._element&&window.innerWidth>n.clientWidth+o)return;this._saveInitialAttribute(n,t);const r=window.getComputedStyle(n)[t];n.style[t]=`${e(Number.parseFloat(r))}px`}))}reset(){this._resetElementAttributes(this._element,"overflow"),this._resetElementAttributes(this._element,"paddingRight"),this._resetElementAttributes(Ie,"paddingRight"),this._resetElementAttributes(_e,"marginRight")}_saveInitialAttribute(n,t){const e=n.style[t];e&&Mt.setDataAttribute(n,t,e)}_resetElementAttributes(n,t){this._applyManipulationCallback(n,(n=>{const e=Mt.getDataAttribute(n,t);void 0===e?n.style.removeProperty(t):(Mt.removeDataAttribute(n,t),n.style[t]=e)}))}_applyManipulationCallback(n,t){Xn(n)?t(n):qt.find(n,this._element).forEach(t)}isOverflowing(){return this.getWidth()>0}}const Je={className:"modal-backdrop",isVisible:!0,isAnimated:!1,rootElement:"body",clickCallback:null},Pe={className:"string",isVisible:"boolean",isAnimated:"boolean",rootElement:"(element|string)",clickCallback:"(function|null)"},De="show",ze="mousedown.bs.backdrop";class Se{constructor(n){this._config=this._getConfig(n),this._isAppended=!1,this._element=null}show(n){this._config.isVisible?(this._append(),this._config.isAnimated&&it(this._getElement()),this._getElement().classList.add(De),this._emulateAnimation((()=>{dt(n)}))):dt(n)}hide(n){this._config.isVisible?(this._getElement().classList.remove(De),this._emulateAnimation((()=>{this.dispose(),dt(n)}))):dt(n)}_getElement(){if(!this._element){const n=document.createElement("div");n.className=this._config.className,this._config.isAnimated&&n.classList.add("fade"),this._element=n}return this._element}_getConfig(n){return(n={...Je,..."object"==typeof n?n:{}}).rootElement=Zn(n.rootElement),nt("backdrop",n,Pe),n}_append(){this._isAppended||(this._config.rootElement.append(this._getElement()),It.on(this._getElement(),ze,(()=>{dt(this._config.clickCallback)})),this._isAppended=!0)}dispose(){this._isAppended&&(It.off(this._element,ze),this._element.remove(),this._isAppended=!1)}_emulateAnimation(n){ct(n,this._getElement(),this._config.isAnimated)}}const Fe={trapElement:null,autofocus:!0},Ue={trapElement:"element",autofocus:"boolean"},Me=".bs.focustrap",qe="backward";class je{constructor(n){this._config=this._getConfig(n),this._isActive=!1,this._lastTabNavDirection=null}activate(){const{trapElement:n,autofocus:t}=this._config;this._isActive||(t&&n.focus(),It.off(document,Me),It.on(document,"focusin.bs.focustrap",(n=>this._handleFocusin(n))),It.on(document,"keydown.tab.bs.focustrap",(n=>this._handleKeydown(n))),this._isActive=!0)}deactivate(){this._isActive&&(this._isActive=!1,It.off(document,Me))}_handleFocusin(n){const{target:t}=n,{trapElement:e}=this._config;if(t===document||t===e||e.contains(t))return;const o=qt.focusableChildren(e);0===o.length?e.focus():this._lastTabNavDirection===qe?o[o.length-1].focus():o[0].focus()}_handleKeydown(n){"Tab"===n.key&&(this._lastTabNavDirection=n.shiftKey?qe:"forward")}_getConfig(n){return n={...Fe,..."object"==typeof n?n:{}},nt("focustrap",n,Ue),n}}const Te="modal",Ne="Escape",We={backdrop:!0,keyboard:!0,focus:!0},Le={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean"},Ge="hidden.bs.modal",Re="show.bs.modal",Qe="resize.bs.modal",Ye="click.dismiss.bs.modal",Ke="keydown.dismiss.bs.modal",He="mousedown.dismiss.bs.modal",Ve="modal-open",Xe="show",Ze="modal-static";class no extends Jt{constructor(n,t){super(n),this._config=this._getConfig(t),this._dialog=qt.findOne(".modal-dialog",this._element),this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._isShown=!1,this._ignoreBackdropClick=!1,this._isTransitioning=!1,this._scrollBar=new Oe}static get Default(){return We}static get NAME(){return Te}toggle(n){return this._isShown?this.hide():this.show(n)}show(n){this._isShown||this._isTransitioning||It.trigger(this._element,Re,{relatedTarget:n}).defaultPrevented||(this._isShown=!0,this._isAnimated()&&(this._isTransitioning=!0),this._scrollBar.hide(),document.body.classList.add(Ve),this._adjustDialog(),this._setEscapeEvent(),this._setResizeEvent(),It.on(this._dialog,He,(()=>{It.one(this._element,"mouseup.dismiss.bs.modal",(n=>{n.target===this._element&&(this._ignoreBackdropClick=!0)}))})),this._showBackdrop((()=>this._showElement(n))))}hide(){if(!this._isShown||this._isTransitioning)return;if(It.trigger(this._element,"hide.bs.modal").defaultPrevented)return;this._isShown=!1;const n=this._isAnimated();n&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),this._focustrap.deactivate(),this._element.classList.remove(Xe),It.off(this._element,Ye),It.off(this._dialog,He),this._queueCallback((()=>this._hideModal()),this._element,n)}dispose(){[window,this._dialog].forEach((n=>It.off(n,".bs.modal"))),this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}handleUpdate(){this._adjustDialog()}_initializeBackDrop(){return new Se({isVisible:Boolean(this._config.backdrop),isAnimated:this._isAnimated()})}_initializeFocusTrap(){return new je({trapElement:this._element})}_getConfig(n){return n={...We,...Mt.getDataAttributes(this._element),..."object"==typeof n?n:{}},nt(Te,n,Le),n}_showElement(n){const t=this._isAnimated(),e=qt.findOne(".modal-body",this._dialog);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.append(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.scrollTop=0,e&&(e.scrollTop=0),t&&it(this._element),this._element.classList.add(Xe),this._queueCallback((()=>{this._config.focus&&this._focustrap.activate(),this._isTransitioning=!1,It.trigger(this._element,"shown.bs.modal",{relatedTarget:n})}),this._dialog,t)}_setEscapeEvent(){this._isShown?It.on(this._element,Ke,(n=>{this._config.keyboard&&n.key===Ne?(n.preventDefault(),this.hide()):this._config.keyboard||n.key!==Ne||this._triggerBackdropTransition()})):It.off(this._element,Ke)}_setResizeEvent(){this._isShown?It.on(window,Qe,(()=>this._adjustDialog())):It.off(window,Qe)}_hideModal(){this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._backdrop.hide((()=>{document.body.classList.remove(Ve),this._resetAdjustments(),this._scrollBar.reset(),It.trigger(this._element,Ge)}))}_showBackdrop(n){It.on(this._element,Ye,(n=>{this._ignoreBackdropClick?this._ignoreBackdropClick=!1:n.target===n.currentTarget&&(!0===this._config.backdrop?this.hide():"static"===this._config.backdrop&&this._triggerBackdropTransition())})),this._backdrop.show(n)}_isAnimated(){return this._element.classList.contains("fade")}_triggerBackdropTransition(){if(It.trigger(this._element,"hidePrevented.bs.modal").defaultPrevented)return;const{classList:n,scrollHeight:t,style:e}=this._element,o=t>document.documentElement.clientHeight;!o&&"hidden"===e.overflowY||n.contains(Ze)||(o||(e.overflowY="hidden"),n.add(Ze),this._queueCallback((()=>{n.remove(Ze),o||this._queueCallback((()=>{e.overflowY=""}),this._dialog)}),this._dialog),this._element.focus())}_adjustDialog(){const n=this._element.scrollHeight>document.documentElement.clientHeight,t=this._scrollBar.getWidth(),e=t>0;(!e&&n&&!lt()||e&&!n&&lt())&&(this._element.style.paddingLeft=`${t}px`),(e&&!n&&!lt()||!e&&n&&lt())&&(this._element.style.paddingRight=`${t}px`)}_resetAdjustments(){this._element.style.paddingLeft="",this._element.style.paddingRight=""}static jQueryInterface(n,t){return this.each((function(){const e=no.getOrCreateInstance(this,n);if("string"==typeof n){if(void 0===e[n])throw new TypeError(`No method named "${n}"`);e[n](t)}}))}}It.on(document,"click.bs.modal.data-api",'[data-bs-toggle="modal"]',(function(n){const t=Hn(this);["A","AREA"].includes(this.tagName)&&n.preventDefault(),It.one(t,Re,(n=>{n.defaultPrevented||It.one(t,Ge,(()=>{tt(this)&&this.focus()}))}));const e=qt.findOne(".modal.show");e&&no.getInstance(e).hide(),no.getOrCreateInstance(t).toggle(this)})),Pt(no),st(no);const to="offcanvas",eo={backdrop:!0,keyboard:!0,scroll:!1},oo={backdrop:"boolean",keyboard:"boolean",scroll:"boolean"},ro="show",io=".offcanvas.show",ao="hidden.bs.offcanvas";class Ao extends Jt{constructor(n,t){super(n),this._config=this._getConfig(t),this._isShown=!1,this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._addEventListeners()}static get NAME(){return to}static get Default(){return eo}toggle(n){return this._isShown?this.hide():this.show(n)}show(n){this._isShown||It.trigger(this._element,"show.bs.offcanvas",{relatedTarget:n}).defaultPrevented||(this._isShown=!0,this._element.style.visibility="visible",this._backdrop.show(),this._config.scroll||(new Oe).hide(),this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.classList.add(ro),this._queueCallback((()=>{this._config.scroll||this._focustrap.activate(),It.trigger(this._element,"shown.bs.offcanvas",{relatedTarget:n})}),this._element,!0))}hide(){this._isShown&&(It.trigger(this._element,"hide.bs.offcanvas").defaultPrevented||(this._focustrap.deactivate(),this._element.blur(),this._isShown=!1,this._element.classList.remove(ro),this._backdrop.hide(),this._queueCallback((()=>{this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._element.style.visibility="hidden",this._config.scroll||(new Oe).reset(),It.trigger(this._element,ao)}),this._element,!0)))}dispose(){this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}_getConfig(n){return n={...eo,...Mt.getDataAttributes(this._element),..."object"==typeof n?n:{}},nt(to,n,oo),n}_initializeBackDrop(){return new Se({className:"offcanvas-backdrop",isVisible:this._config.backdrop,isAnimated:!0,rootElement:this._element.parentNode,clickCallback:()=>this.hide()})}_initializeFocusTrap(){return new je({trapElement:this._element})}_addEventListeners(){It.on(this._element,"keydown.dismiss.bs.offcanvas",(n=>{this._config.keyboard&&"Escape"===n.key&&this.hide()}))}static jQueryInterface(n){return this.each((function(){const t=Ao.getOrCreateInstance(this,n);if("string"==typeof n){if(void 0===t[n]||n.startsWith("_")||"constructor"===n)throw new TypeError(`No method named "${n}"`);t[n](this)}}))}}It.on(document,"click.bs.offcanvas.data-api",'[data-bs-toggle="offcanvas"]',(function(n){const t=Hn(this);if(["A","AREA"].includes(this.tagName)&&n.preventDefault(),et(this))return;It.one(t,ao,(()=>{tt(this)&&this.focus()}));const e=qt.findOne(io);e&&e!==t&&Ao.getInstance(e).hide(),Ao.getOrCreateInstance(t).toggle(this)})),It.on(window,"load.bs.offcanvas.data-api",(()=>qt.find(io).forEach((n=>Ao.getOrCreateInstance(n).show())))),Pt(Ao),st(Ao);const lo=new Set(["background","cite","href","itemtype","longdesc","poster","src","xlink:href"]),so=/^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i,co=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i,po=(n,t)=>{const e=n.nodeName.toLowerCase();if(t.includes(e))return!lo.has(e)||Boolean(so.test(n.nodeValue)||co.test(n.nodeValue));const o=t.filter((n=>n instanceof RegExp));for(let n=0,t=o.length;n<t;n++)if(o[n].test(e))return!0;return!1};function uo(n,t,e){if(!n.length)return n;if(e&&"function"==typeof e)return e(n);const o=(new window.DOMParser).parseFromString(n,"text/html"),r=[].concat(...o.body.querySelectorAll("*"));for(let n=0,e=r.length;n<e;n++){const e=r[n],o=e.nodeName.toLowerCase();if(!Object.keys(t).includes(o)){e.remove();continue}const i=[].concat(...e.attributes),a=[].concat(t["*"]||[],t[o]||[]);i.forEach((n=>{po(n,a)||e.removeAttribute(n.nodeName)}))}return o.body.innerHTML}const mo="tooltip",fo=new Set(["sanitize","allowList","sanitizeFn"]),go={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(array|string|function)",container:"(string|element|boolean)",fallbackPlacements:"array",boundary:"(string|element)",customClass:"(string|function)",sanitize:"boolean",sanitizeFn:"(null|function)",allowList:"object",popperConfig:"(null|object|function)"},bo={AUTO:"auto",TOP:"top",RIGHT:lt()?"left":"right",BOTTOM:"bottom",LEFT:lt()?"right":"left"},Co={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:[0,0],container:!1,fallbackPlacements:["top","right","bottom","left"],boundary:"clippingParents",customClass:"",sanitize:!0,sanitizeFn:null,allowList:{"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]},popperConfig:null},ho={HIDE:"hide.bs.tooltip",HIDDEN:"hidden.bs.tooltip",SHOW:"show.bs.tooltip",SHOWN:"shown.bs.tooltip",INSERTED:"inserted.bs.tooltip",CLICK:"click.bs.tooltip",FOCUSIN:"focusin.bs.tooltip",FOCUSOUT:"focusout.bs.tooltip",MOUSEENTER:"mouseenter.bs.tooltip",MOUSELEAVE:"mouseleave.bs.tooltip"},Bo="fade",vo="show",wo="show",$o="out",xo=".tooltip-inner",yo=".modal",ko="hide.bs.modal",Eo="hover",Io="focus";class _o extends Jt{constructor(t,e){if(void 0===n)throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");super(t),this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this._config=this._getConfig(e),this.tip=null,this._setListeners()}static get Default(){return Co}static get NAME(){return mo}static get Event(){return ho}static get DefaultType(){return go}enable(){this._isEnabled=!0}disable(){this._isEnabled=!1}toggleEnabled(){this._isEnabled=!this._isEnabled}toggle(n){if(this._isEnabled)if(n){const t=this._initializeOnDelegatedTarget(n);t._activeTrigger.click=!t._activeTrigger.click,t._isWithActiveTrigger()?t._enter(null,t):t._leave(null,t)}else{if(this.getTipElement().classList.contains(vo))return void this._leave(null,this);this._enter(null,this)}}dispose(){clearTimeout(this._timeout),It.off(this._element.closest(yo),ko,this._hideModalHandler),this.tip&&this.tip.remove(),this._disposePopper(),super.dispose()}show(){if("none"===this._element.style.display)throw new Error("Please use show on visible elements");if(!this.isWithContent()||!this._isEnabled)return;const n=It.trigger(this._element,this.constructor.Event.SHOW),t=ot(this._element),e=null===t?this._element.ownerDocument.documentElement.contains(this._element):t.contains(this._element);if(n.defaultPrevented||!e)return;"tooltip"===this.constructor.NAME&&this.tip&&this.getTitle()!==this.tip.querySelector(xo).innerHTML&&(this._disposePopper(),this.tip.remove(),this.tip=null);const o=this.getTipElement(),r=(n=>{do{n+=Math.floor(1e6*Math.random())}while(document.getElementById(n));return n})(this.constructor.NAME);o.setAttribute("id",r),this._element.setAttribute("aria-describedby",r),this._config.animation&&o.classList.add(Bo);const i="function"==typeof this._config.placement?this._config.placement.call(this,o,this._element):this._config.placement,a=this._getAttachment(i);this._addAttachmentClass(a);const{container:A}=this._config;Ot.set(o,this.constructor.DATA_KEY,this),this._element.ownerDocument.documentElement.contains(this.tip)||(A.append(o),It.trigger(this._element,this.constructor.Event.INSERTED)),this._popper?this._popper.update():this._popper=Gn(this._element,o,this._getPopperConfig(a)),o.classList.add(vo);const l=this._resolvePossibleFunction(this._config.customClass);l&&o.classList.add(...l.split(" ")),"ontouchstart"in document.documentElement&&[].concat(...document.body.children).forEach((n=>{It.on(n,"mouseover",rt)}));const s=this.tip.classList.contains(Bo);this._queueCallback((()=>{const n=this._hoverState;this._hoverState=null,It.trigger(this._element,this.constructor.Event.SHOWN),n===$o&&this._leave(null,this)}),this.tip,s)}hide(){if(!this._popper)return;const n=this.getTipElement();if(It.trigger(this._element,this.constructor.Event.HIDE).defaultPrevented)return;n.classList.remove(vo),"ontouchstart"in document.documentElement&&[].concat(...document.body.children).forEach((n=>It.off(n,"mouseover",rt))),this._activeTrigger.click=!1,this._activeTrigger.focus=!1,this._activeTrigger.hover=!1;const t=this.tip.classList.contains(Bo);this._queueCallback((()=>{this._isWithActiveTrigger()||(this._hoverState!==wo&&n.remove(),this._cleanTipClass(),this._element.removeAttribute("aria-describedby"),It.trigger(this._element,this.constructor.Event.HIDDEN),this._disposePopper())}),this.tip,t),this._hoverState=""}update(){null!==this._popper&&this._popper.update()}isWithContent(){return Boolean(this.getTitle())}getTipElement(){if(this.tip)return this.tip;const n=document.createElement("div");n.innerHTML=this._config.template;const t=n.children[0];return this.setContent(t),t.classList.remove(Bo,vo),this.tip=t,this.tip}setContent(n){this._sanitizeAndSetContent(n,this.getTitle(),xo)}_sanitizeAndSetContent(n,t,e){const o=qt.findOne(e,n);t||!o?this.setElementContent(o,t):o.remove()}setElementContent(n,t){if(null!==n)return Xn(t)?(t=Zn(t),void(this._config.html?t.parentNode!==n&&(n.innerHTML="",n.append(t)):n.textContent=t.textContent)):void(this._config.html?(this._config.sanitize&&(t=uo(t,this._config.allowList,this._config.sanitizeFn)),n.innerHTML=t):n.textContent=t)}getTitle(){const n=this._element.getAttribute("data-bs-original-title")||this._config.title;return this._resolvePossibleFunction(n)}updateAttachment(n){return"right"===n?"end":"left"===n?"start":n}_initializeOnDelegatedTarget(n,t){return t||this.constructor.getOrCreateInstance(n.delegateTarget,this._getDelegateConfig())}_getOffset(){const{offset:n}=this._config;return"string"==typeof n?n.split(",").map((n=>Number.parseInt(n,10))):"function"==typeof n?t=>n(t,this._element):n}_resolvePossibleFunction(n){return"function"==typeof n?n.call(this._element):n}_getPopperConfig(n){const t={placement:n,modifiers:[{name:"flip",options:{fallbackPlacements:this._config.fallbackPlacements}},{name:"offset",options:{offset:this._getOffset()}},{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"arrow",options:{element:`.${this.constructor.NAME}-arrow`}},{name:"onChange",enabled:!0,phase:"afterWrite",fn:n=>this._handlePopperPlacementChange(n)}],onFirstUpdate:n=>{n.options.placement!==n.placement&&this._handlePopperPlacementChange(n)}};return{...t,..."function"==typeof this._config.popperConfig?this._config.popperConfig(t):this._config.popperConfig}}_addAttachmentClass(n){this.getTipElement().classList.add(`${this._getBasicClassPrefix()}-${this.updateAttachment(n)}`)}_getAttachment(n){return bo[n.toUpperCase()]}_setListeners(){this._config.trigger.split(" ").forEach((n=>{if("click"===n)It.on(this._element,this.constructor.Event.CLICK,this._config.selector,(n=>this.toggle(n)));else if("manual"!==n){const t=n===Eo?this.constructor.Event.MOUSEENTER:this.constructor.Event.FOCUSIN,e=n===Eo?this.constructor.Event.MOUSELEAVE:this.constructor.Event.FOCUSOUT;It.on(this._element,t,this._config.selector,(n=>this._enter(n))),It.on(this._element,e,this._config.selector,(n=>this._leave(n)))}})),this._hideModalHandler=()=>{this._element&&this.hide()},It.on(this._element.closest(yo),ko,this._hideModalHandler),this._config.selector?this._config={...this._config,trigger:"manual",selector:""}:this._fixTitle()}_fixTitle(){const n=this._element.getAttribute("title"),t=typeof this._element.getAttribute("data-bs-original-title");(n||"string"!==t)&&(this._element.setAttribute("data-bs-original-title",n||""),!n||this._element.getAttribute("aria-label")||this._element.textContent||this._element.setAttribute("aria-label",n),this._element.setAttribute("title",""))}_enter(n,t){t=this._initializeOnDelegatedTarget(n,t),n&&(t._activeTrigger["focusin"===n.type?Io:Eo]=!0),t.getTipElement().classList.contains(vo)||t._hoverState===wo?t._hoverState=wo:(clearTimeout(t._timeout),t._hoverState=wo,t._config.delay&&t._config.delay.show?t._timeout=setTimeout((()=>{t._hoverState===wo&&t.show()}),t._config.delay.show):t.show())}_leave(n,t){t=this._initializeOnDelegatedTarget(n,t),n&&(t._activeTrigger["focusout"===n.type?Io:Eo]=t._element.contains(n.relatedTarget)),t._isWithActiveTrigger()||(clearTimeout(t._timeout),t._hoverState=$o,t._config.delay&&t._config.delay.hide?t._timeout=setTimeout((()=>{t._hoverState===$o&&t.hide()}),t._config.delay.hide):t.hide())}_isWithActiveTrigger(){for(const n in this._activeTrigger)if(this._activeTrigger[n])return!0;return!1}_getConfig(n){const t=Mt.getDataAttributes(this._element);return Object.keys(t).forEach((n=>{fo.has(n)&&delete t[n]})),(n={...this.constructor.Default,...t,..."object"==typeof n&&n?n:{}}).container=!1===n.container?document.body:Zn(n.container),"number"==typeof n.delay&&(n.delay={show:n.delay,hide:n.delay}),"number"==typeof n.title&&(n.title=n.title.toString()),"number"==typeof n.content&&(n.content=n.content.toString()),nt(mo,n,this.constructor.DefaultType),n.sanitize&&(n.template=uo(n.template,n.allowList,n.sanitizeFn)),n}_getDelegateConfig(){const n={};for(const t in this._config)this.constructor.Default[t]!==this._config[t]&&(n[t]=this._config[t]);return n}_cleanTipClass(){const n=this.getTipElement(),t=new RegExp(`(^|\\s)${this._getBasicClassPrefix()}\\S+`,"g"),e=n.getAttribute("class").match(t);null!==e&&e.length>0&&e.map((n=>n.trim())).forEach((t=>n.classList.remove(t)))}_getBasicClassPrefix(){return"bs-tooltip"}_handlePopperPlacementChange(n){const{state:t}=n;t&&(this.tip=t.elements.popper,this._cleanTipClass(),this._addAttachmentClass(this._getAttachment(t.placement)))}_disposePopper(){this._popper&&(this._popper.destroy(),this._popper=null)}static jQueryInterface(n){return this.each((function(){const t=_o.getOrCreateInstance(this,n);if("string"==typeof n){if(void 0===t[n])throw new TypeError(`No method named "${n}"`);t[n]()}}))}}st(_o);const Oo={..._o.Default,placement:"right",offset:[0,8],trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'},Jo={..._o.DefaultType,content:"(string|element|function)"},Po={HIDE:"hide.bs.popover",HIDDEN:"hidden.bs.popover",SHOW:"show.bs.popover",SHOWN:"shown.bs.popover",INSERTED:"inserted.bs.popover",CLICK:"click.bs.popover",FOCUSIN:"focusin.bs.popover",FOCUSOUT:"focusout.bs.popover",MOUSEENTER:"mouseenter.bs.popover",MOUSELEAVE:"mouseleave.bs.popover"};class Do extends _o{static get Default(){return Oo}static get NAME(){return"popover"}static get Event(){return Po}static get DefaultType(){return Jo}isWithContent(){return this.getTitle()||this._getContent()}setContent(n){this._sanitizeAndSetContent(n,this.getTitle(),".popover-header"),this._sanitizeAndSetContent(n,this._getContent(),".popover-body")}_getContent(){return this._resolvePossibleFunction(this._config.content)}_getBasicClassPrefix(){return"bs-popover"}static jQueryInterface(n){return this.each((function(){const t=Do.getOrCreateInstance(this,n);if("string"==typeof n){if(void 0===t[n])throw new TypeError(`No method named "${n}"`);t[n]()}}))}}st(Do);const zo="scrollspy",So={offset:10,method:"auto",target:""},Fo={offset:"number",method:"string",target:"(string|element)"},Uo="active",Mo=".nav-link, .list-group-item, .dropdown-item",qo="position";class jo extends Jt{constructor(n,t){super(n),this._scrollElement="BODY"===this._element.tagName?window:this._element,this._config=this._getConfig(t),this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,It.on(this._scrollElement,"scroll.bs.scrollspy",(()=>this._process())),this.refresh(),this._process()}static get Default(){return So}static get NAME(){return zo}refresh(){const n=this._scrollElement===this._scrollElement.window?"offset":qo,t="auto"===this._config.method?n:this._config.method,e=t===qo?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),qt.find(Mo,this._config.target).map((n=>{const o=Kn(n),r=o?qt.findOne(o):null;if(r){const n=r.getBoundingClientRect();if(n.width||n.height)return[Mt[t](r).top+e,o]}return null})).filter((n=>n)).sort(((n,t)=>n[0]-t[0])).forEach((n=>{this._offsets.push(n[0]),this._targets.push(n[1])}))}dispose(){It.off(this._scrollElement,".bs.scrollspy"),super.dispose()}_getConfig(n){return(n={...So,...Mt.getDataAttributes(this._element),..."object"==typeof n&&n?n:{}}).target=Zn(n.target)||document.documentElement,nt(zo,n,Fo),n}_getScrollTop(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop}_getScrollHeight(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)}_getOffsetHeight(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height}_process(){const n=this._getScrollTop()+this._config.offset,t=this._getScrollHeight(),e=this._config.offset+t-this._getOffsetHeight();if(this._scrollHeight!==t&&this.refresh(),n>=e){const n=this._targets[this._targets.length-1];this._activeTarget!==n&&this._activate(n)}else{if(this._activeTarget&&n<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(let t=this._offsets.length;t--;)this._activeTarget!==this._targets[t]&&n>=this._offsets[t]&&(void 0===this._offsets[t+1]||n<this._offsets[t+1])&&this._activate(this._targets[t])}}_activate(n){this._activeTarget=n,this._clear();const t=Mo.split(",").map((t=>`${t}[data-bs-target="${n}"],${t}[href="${n}"]`)),e=qt.findOne(t.join(","),this._config.target);e.classList.add(Uo),e.classList.contains("dropdown-item")?qt.findOne(".dropdown-toggle",e.closest(".dropdown")).classList.add(Uo):qt.parents(e,".nav, .list-group").forEach((n=>{qt.prev(n,".nav-link, .list-group-item").forEach((n=>n.classList.add(Uo))),qt.prev(n,".nav-item").forEach((n=>{qt.children(n,".nav-link").forEach((n=>n.classList.add(Uo)))}))})),It.trigger(this._scrollElement,"activate.bs.scrollspy",{relatedTarget:n})}_clear(){qt.find(Mo,this._config.target).filter((n=>n.classList.contains(Uo))).forEach((n=>n.classList.remove(Uo)))}static jQueryInterface(n){return this.each((function(){const t=jo.getOrCreateInstance(this,n);if("string"==typeof n){if(void 0===t[n])throw new TypeError(`No method named "${n}"`);t[n]()}}))}}It.on(window,"load.bs.scrollspy.data-api",(()=>{qt.find('[data-bs-spy="scroll"]').forEach((n=>new jo(n)))})),st(jo);const To="active",No="fade",Wo="show",Lo=".active",Go=":scope > li > .active";class Ro extends Jt{static get NAME(){return"tab"}show(){if(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&this._element.classList.contains(To))return;let n;const t=Hn(this._element),e=this._element.closest(".nav, .list-group");if(e){const t="UL"===e.nodeName||"OL"===e.nodeName?Go:Lo;n=qt.find(t,e),n=n[n.length-1]}const o=n?It.trigger(n,"hide.bs.tab",{relatedTarget:this._element}):null;if(It.trigger(this._element,"show.bs.tab",{relatedTarget:n}).defaultPrevented||null!==o&&o.defaultPrevented)return;this._activate(this._element,e);const r=()=>{It.trigger(n,"hidden.bs.tab",{relatedTarget:this._element}),It.trigger(this._element,"shown.bs.tab",{relatedTarget:n})};t?this._activate(t,t.parentNode,r):r()}_activate(n,t,e){const o=(!t||"UL"!==t.nodeName&&"OL"!==t.nodeName?qt.children(t,Lo):qt.find(Go,t))[0],r=e&&o&&o.classList.contains(No),i=()=>this._transitionComplete(n,o,e);o&&r?(o.classList.remove(Wo),this._queueCallback(i,n,!0)):i()}_transitionComplete(n,t,e){if(t){t.classList.remove(To);const n=qt.findOne(":scope > .dropdown-menu .active",t.parentNode);n&&n.classList.remove(To),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!1)}n.classList.add(To),"tab"===n.getAttribute("role")&&n.setAttribute("aria-selected",!0),it(n),n.classList.contains(No)&&n.classList.add(Wo);let o=n.parentNode;if(o&&"LI"===o.nodeName&&(o=o.parentNode),o&&o.classList.contains("dropdown-menu")){const t=n.closest(".dropdown");t&&qt.find(".dropdown-toggle",t).forEach((n=>n.classList.add(To))),n.setAttribute("aria-expanded",!0)}e&&e()}static jQueryInterface(n){return this.each((function(){const t=Ro.getOrCreateInstance(this);if("string"==typeof n){if(void 0===t[n])throw new TypeError(`No method named "${n}"`);t[n]()}}))}}It.on(document,"click.bs.tab.data-api",'[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',(function(n){["A","AREA"].includes(this.tagName)&&n.preventDefault(),et(this)||Ro.getOrCreateInstance(this).show()})),st(Ro);const Qo="toast",Yo="hide",Ko="show",Ho="showing",Vo={animation:"boolean",autohide:"boolean",delay:"number"},Xo={animation:!0,autohide:!0,delay:5e3};class Zo extends Jt{constructor(n,t){super(n),this._config=this._getConfig(t),this._timeout=null,this._hasMouseInteraction=!1,this._hasKeyboardInteraction=!1,this._setListeners()}static get DefaultType(){return Vo}static get Default(){return Xo}static get NAME(){return Qo}show(){It.trigger(this._element,"show.bs.toast").defaultPrevented||(this._clearTimeout(),this._config.animation&&this._element.classList.add("fade"),this._element.classList.remove(Yo),it(this._element),this._element.classList.add(Ko),this._element.classList.add(Ho),this._queueCallback((()=>{this._element.classList.remove(Ho),It.trigger(this._element,"shown.bs.toast"),this._maybeScheduleHide()}),this._element,this._config.animation))}hide(){this._element.classList.contains(Ko)&&(It.trigger(this._element,"hide.bs.toast").defaultPrevented||(this._element.classList.add(Ho),this._queueCallback((()=>{this._element.classList.add(Yo),this._element.classList.remove(Ho),this._element.classList.remove(Ko),It.trigger(this._element,"hidden.bs.toast")}),this._element,this._config.animation)))}dispose(){this._clearTimeout(),this._element.classList.contains(Ko)&&this._element.classList.remove(Ko),super.dispose()}_getConfig(n){return n={...Xo,...Mt.getDataAttributes(this._element),..."object"==typeof n&&n?n:{}},nt(Qo,n,this.constructor.DefaultType),n}_maybeScheduleHide(){this._config.autohide&&(this._hasMouseInteraction||this._hasKeyboardInteraction||(this._timeout=setTimeout((()=>{this.hide()}),this._config.delay)))}_onInteraction(n,t){switch(n.type){case"mouseover":case"mouseout":this._hasMouseInteraction=t;break;case"focusin":case"focusout":this._hasKeyboardInteraction=t}if(t)return void this._clearTimeout();const e=n.relatedTarget;this._element===e||this._element.contains(e)||this._maybeScheduleHide()}_setListeners(){It.on(this._element,"mouseover.bs.toast",(n=>this._onInteraction(n,!0))),It.on(this._element,"mouseout.bs.toast",(n=>this._onInteraction(n,!1))),It.on(this._element,"focusin.bs.toast",(n=>this._onInteraction(n,!0))),It.on(this._element,"focusout.bs.toast",(n=>this._onInteraction(n,!1)))}_clearTimeout(){clearTimeout(this._timeout),this._timeout=null}static jQueryInterface(n){return this.each((function(){const t=Zo.getOrCreateInstance(this,n);if("string"==typeof n){if(void 0===t[n])throw new TypeError(`No method named "${n}"`);t[n](this)}}))}}Pt(Zo),st(Zo),document.body.appendChild(function(){const n=document.createElement("div");return n.classList.add("border","border-2","border-dark"),n.innerHTML=o().join(["Hello","webpack"]," "),n}())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,